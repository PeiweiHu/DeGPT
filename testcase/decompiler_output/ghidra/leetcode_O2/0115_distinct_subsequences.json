{
    "00101020": "\nvoid FUN_00101020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)PTR_00103fa8)();\n  return;\n}\n\n", 
    "00105048": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid __cxa_finalize(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __cxa_finalize@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00101000": "\nint _init(EVP_PKEY_CTX *ctx)\n\n{\n  undefined *puVar1;\n  \n  puVar1 = PTR___gmon_start___00103fe8;\n  if (PTR___gmon_start___00103fe8 != (undefined *)0x0) {\n    puVar1 = (undefined *)(*(code *)PTR___gmon_start___00103fe8)();\n  }\n  return (int)puVar1;\n}\n\n", 
    "00101220": "\nvoid frame_dummy(void)\n\n{\n  register_tm_clones();\n  return;\n}\n\n", 
    "00105000": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid _ITM_deregisterTMCloneTable(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "00105020": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid * malloc(size_t __size)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* malloc@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00101140": "\nvoid _start(undefined8 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  undefined8 unaff_retaddr;\n  undefined auStack_8 [8];\n  \n  (*(code *)PTR___libc_start_main_00103fe0)\n            (main,unaff_retaddr,&stack0x00000008,__libc_csu_init,__libc_csu_fini,param_3,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n", 
    "00105040": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid _ITM_registerTMCloneTable(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "00101080": "\nvoid __cxa_finalize(void)\n\n{\n  (*(code *)PTR___cxa_finalize_00103ff8)();\n  return;\n}\n\n", 
    "001014c8": "\nvoid _fini(void)\n\n{\n  return;\n}\n\n", 
    "001010a0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = (void *)(*(code *)PTR_malloc_00103fb8)();\n  return pvVar1;\n}\n\n", 
    "001011a0": "\n/* WARNING: Removing unreachable block (ram,0x001011c4) */\n/* WARNING: Removing unreachable block (ram,0x001011d0) */\n\nvoid register_tm_clones(void)\n\n{\n  return;\n}\n\n", 
    "001014c0": "\nvoid __libc_csu_fini(void)\n\n{\n  return;\n}\n\n", 
    "001010e0": "\nundefined8 main(int param_1,long param_2)\n\n{\n  undefined4 uVar1;\n  \n  if (param_1 == 3) {\n    uVar1 = numDistinct(*(undefined8 *)(param_2 + 8),*(undefined8 *)(param_2 + 0x10));\n    __printf_chk(1,&DAT_00102022,uVar1);\n    return 0;\n  }\n  fwrite(\"Usage: ./test string pattern\\n\",1,0x1d,stderr);\n                    /* WARNING: Subroutine does not return */\n  exit(-1);\n}\n\n", 
    "001011e0": "\nvoid __do_global_dtors_aux(void)\n\n{\n  if (completed_8061 == '\\0') {\n    if (PTR___cxa_finalize_00103ff8 != (undefined *)0x0) {\n      __cxa_finalize(__dso_handle);\n    }\n    deregister_tm_clones();\n    completed_8061 = 1;\n    return;\n  }\n  return;\n}\n\n", 
    "001010c0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid exit(int __status)\n\n{\n  (*(code *)PTR_exit_00103fc8)();\n  return;\n}\n\n", 
    "00105018": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid __gmon_start__(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "00101230": "\nulong numDistinct(char *param_1,char *param_2)\n\n{\n  char cVar1;\n  int iVar2;\n  undefined4 *puVar3;\n  int *piVar4;\n  void *pvVar5;\n  int iVar6;\n  size_t sVar7;\n  size_t sVar8;\n  ulong uVar9;\n  void *pvVar10;\n  void **ppvVar11;\n  void **ppvVar12;\n  undefined4 *puVar13;\n  long lVar14;\n  int iVar15;\n  int iVar16;\n  int iVar17;\n  bool bVar18;\n  long local_48;\n  \n  sVar7 = strlen(param_1);\n  iVar16 = (int)sVar7;\n  iVar17 = (int)(sVar7 & 0xffffffff);\n  sVar8 = strlen(param_2);\n  iVar6 = (int)sVar8;\n  if ((iVar6 == 0) || (iVar16 < iVar6)) {\n    uVar9 = 0;\n  }\n  else {\n    if (iVar16 < 1) {\n      if (iVar16 == 0) {\n        return sVar7 & 0xffffffff;\n      }\n      sVar7 = (long)iVar16 * 8;\n      ppvVar11 = (void **)malloc(sVar7);\n      iVar15 = 0;\n    }\n    else {\n      uVar9 = 0;\n      do {\n        iVar15 = (int)uVar9;\n        if (param_1[uVar9] == *param_2) goto LAB_001012a4;\n        iVar15 = iVar15 + 1;\n        bVar18 = uVar9 != iVar16 - 1;\n        uVar9 = uVar9 + 1;\n      } while (bVar18);\n      if (iVar16 == iVar15) {\n        return 0;\n      }\nLAB_001012a4:\n      iVar17 = iVar16 - iVar15;\n      sVar7 = (long)iVar17 << 3;\n      pvVar10 = malloc((long)(iVar17 * iVar6) << 2);\n      ppvVar11 = (void **)malloc(sVar7);\n      if (0 < iVar17) {\n        ppvVar12 = ppvVar11;\n        do {\n          *ppvVar12 = pvVar10;\n          ppvVar12 = ppvVar12 + 1;\n          pvVar10 = (void *)((long)pvVar10 + (long)iVar6 * 4);\n        } while (ppvVar12 != ppvVar11 + (ulong)(iVar17 - 1) + 1);\n      }\n    }\n    local_48 = (long)iVar6;\n    puVar3 = (undefined4 *)*ppvVar11;\n    *puVar3 = 1;\n    if (1 < iVar6) {\n      puVar13 = puVar3 + 1;\n      do {\n        *puVar13 = 0;\n        puVar13 = puVar13 + 1;\n      } while (puVar3 + (ulong)(iVar6 - 2) + 2 != puVar13);\n    }\n    if (1 < iVar17) {\n      cVar1 = *param_2;\n      lVar14 = 1;\n      do {\n        piVar4 = (int *)ppvVar11[lVar14];\n                    /* WARNING: Load size is inaccurate */\n        iVar16 = *ppvVar11[lVar14 + -1];\n        *piVar4 = iVar16;\n        if (param_1[lVar14 + iVar15] == cVar1) {\n          *piVar4 = iVar16 + 1;\n        }\n        lVar14 = lVar14 + 1;\n      } while ((ulong)(iVar17 - 2) + 2 != lVar14);\n      iVar16 = iVar15 + 1;\n      ppvVar12 = ppvVar11;\n      do {\n        if (1 < iVar6) {\n          pvVar10 = *ppvVar12;\n          pvVar5 = ppvVar12[1];\n          cVar1 = param_1[iVar16];\n          lVar14 = 1;\n          do {\n            iVar2 = *(int *)((long)pvVar10 + lVar14 * 4);\n            *(int *)((long)pvVar5 + lVar14 * 4) = iVar2;\n            if (cVar1 == param_2[lVar14]) {\n              *(int *)((long)pvVar5 + lVar14 * 4) =\n                   iVar2 + *(int *)((long)pvVar10 + lVar14 * 4 + -4);\n            }\n            lVar14 = lVar14 + 1;\n          } while (lVar14 != (ulong)(iVar6 - 2) + 2);\n        }\n        iVar16 = iVar16 + 1;\n        ppvVar12 = ppvVar12 + 1;\n      } while (iVar16 != iVar17 + iVar15);\n    }\n    uVar9 = (ulong)*(uint *)(*(long *)((long)ppvVar11 + (sVar7 - 8)) + -4 + local_48 * 4);\n  }\n  return uVar9;\n}\n\n", 
    "00101450": "\nvoid __libc_csu_init(EVP_PKEY_CTX *param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  long lVar1;\n  \n  _init(param_1);\n  lVar1 = 0;\n  do {\n    (*(code *)(&__frame_dummy_init_array_entry)[lVar1])((ulong)param_1 & 0xffffffff,param_2,param_3)\n    ;\n    lVar1 = lVar1 + 1;\n  } while (lVar1 != 1);\n  return;\n}\n\n", 
    "00105038": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fwrite@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00101170": "\n/* WARNING: Removing unreachable block (ram,0x00101183) */\n/* WARNING: Removing unreachable block (ram,0x0010118f) */\n\nvoid deregister_tm_clones(void)\n\n{\n  return;\n}\n\n", 
    "00105010": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid __libc_start_main(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __libc_start_main@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00101090": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = (*(code *)PTR_strlen_00103fb0)();\n  return sVar1;\n}\n\n", 
    "00105030": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid exit(int __status)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* exit@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "001010b0": "\nvoid __printf_chk(void)\n\n{\n  (*(code *)PTR___printf_chk_00103fc0)();\n  return;\n}\n\n", 
    "001010d0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = (*(code *)PTR_fwrite_00103fd0)();\n  return sVar1;\n}\n\n", 
    "00105008": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nsize_t strlen(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strlen@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00105028": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid __printf_chk(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __printf_chk@@GLIBC_2.3.4 */\n  halt_baddata();\n}\n\n"
}