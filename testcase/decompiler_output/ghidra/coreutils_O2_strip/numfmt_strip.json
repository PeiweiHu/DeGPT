{
    "00108810": "\nvoid FUN_00108810(undefined8 param_1,undefined8 param_2,undefined8 param_3,undefined8 param_4,\n                 undefined4 *param_5)\n\n{\n  int iVar1;\n  int *piVar2;\n  \n  if (param_5 == (undefined4 *)0x0) {\n    param_5 = (undefined4 *)&DAT_001122c0;\n  }\n  piVar2 = __errno_location();\n  iVar1 = *piVar2;\n  FUN_00107390(param_1,param_2,param_3,param_4,*param_5,param_5[1],param_5 + 2,\n               *(undefined8 *)(param_5 + 10),*(undefined8 *)(param_5 + 0xc));\n  *piVar2 = iVar1;\n  return;\n}\n\n", 
    "001130f8": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint fputs_unlocked(char *__s,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "00109b10": "\nuint FUN_00109b10(undefined8 param_1,uint param_2,int param_3)\n\n{\n  uint uVar1;\n  uint uVar2;\n  ulong uVar3;\n  \n  uVar3 = (ulong)param_2;\n  param_3 = param_3 + -1;\n  uVar2 = 0;\n  do {\n    uVar1 = FUN_00109ae0(param_1,uVar3 & 0xffffffff);\n    param_3 = param_3 + -1;\n    uVar2 = uVar2 | uVar1;\n  } while (param_3 != -1);\n  return uVar2;\n}\n\n", 
    "00113048": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "0010281c": "\nvoid switchD_0010742f::caseD_b(void)\n\n{\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n", 
    "00113168": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nchar * nl_langinfo(nl_item __item)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "00106070": "\nlong FUN_00106070(char *param_1,char **param_2,void *param_3,size_t param_4)\n\n{\n  bool bVar1;\n  long lVar2;\n  int iVar3;\n  size_t __n;\n  size_t sVar4;\n  long lVar5;\n  void *__s2;\n  char *__s1;\n  long local_58;\n  \n  __n = strlen(param_1);\n  __s1 = *param_2;\n  if (__s1 == (char *)0x0) {\n    local_58 = -1;\n    lVar5 = local_58;\n  }\n  else {\n    bVar1 = false;\n    lVar5 = 0;\n    local_58 = -1;\n    __s2 = param_3;\n    do {\n      iVar3 = strncmp(__s1,param_1,__n);\n      lVar2 = local_58;\n      if (iVar3 == 0) {\n        sVar4 = strlen(__s1);\n        if (sVar4 == __n) {\n          return lVar5;\n        }\n        lVar2 = lVar5;\n        if (local_58 != -1) {\n          if (param_3 == (void *)0x0) {\n            bVar1 = true;\n            lVar2 = local_58;\n          }\n          else {\n            iVar3 = memcmp((void *)(local_58 * param_4 + (long)param_3),__s2,param_4);\n            lVar2 = local_58;\n            if (iVar3 != 0) {\n              bVar1 = true;\n            }\n          }\n        }\n      }\n      local_58 = lVar2;\n      lVar5 = lVar5 + 1;\n      __s2 = (void *)((long)__s2 + param_4);\n      __s1 = param_2[lVar5];\n    } while (__s1 != (char *)0x0);\n    lVar5 = -2;\n    if (!bVar1) {\n      lVar5 = local_58;\n    }\n  }\n  local_58 = lVar5;\n  return local_58;\n}\n\n", 
    "001130f0": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint memcmp(void *__s1,void *__s2,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "001027b0": "\nvoid __strncat_chk(void)\n\n{\n  (*(code *)PTR___strncat_chk_00111fa8)();\n  return;\n}\n\n", 
    "00113050": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint wcswidth(wchar_t *__s,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "0010a080": "\nchar * FUN_0010a080(void)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = nl_langinfo(0xe);\n  if (pcVar1 != (char *)0x0) {\n    if (*pcVar1 == '\\0') {\n      pcVar1 = \"ASCII\";\n    }\n    return pcVar1;\n  }\n  return \"ASCII\";\n}\n\n", 
    "00113178": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid * realloc(void *__ptr,size_t __size)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "00102826": "\nvoid FUN_00102826(void)\n\n{\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n", 
    "00102821": "\nvoid FUN_00102821(void)\n\n{\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n", 
    "00102700": "\nvoid __printf_chk(void)\n\n{\n  (*(code *)PTR___printf_chk_00111f50)();\n  return;\n}\n\n", 
    "00106a70": "\nvoid * FUN_00106a70(undefined8 param_1,ulong *param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  ulong __size;\n  ulong uVar1;\n  void *__ptr;\n  ulong uVar2;\n  void *__ptr_00;\n  \n  uVar1 = *param_2;\n  uVar2 = uVar1;\n  __ptr_00 = (void *)0x0;\n  while( true ) {\n    __size = uVar2 + 1;\n    __ptr = realloc(__ptr_00,__size);\n    if (__ptr == (void *)0x0) {\n      free(__ptr_00);\n      return (void *)0x0;\n    }\n    *param_2 = uVar1;\n    uVar2 = FUN_00106770(param_1,__ptr,__size,param_2,param_3,param_4);\n    if (uVar2 == 0xffffffffffffffff) break;\n    __ptr_00 = __ptr;\n    if (uVar2 < __size) {\n      return __ptr;\n    }\n  }\n  free(__ptr);\n  return (void *)0x0;\n}\n\n", 
    "00113170": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid __freading(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "00103110": "\n/* WARNING: Removing unreachable block (ram,0x00103134) */\n/* WARNING: Removing unreachable block (ram,0x00103140) */\n\nvoid FUN_00103110(void)\n\n{\n  return;\n}\n\n", 
    "00108d90": "\nvoid FUN_00108d90(void)\n\n{\n  FUN_00108cf0();\n  return;\n}\n\n", 
    "00108b50": "\nvoid FUN_00108b50(undefined4 param_1,undefined8 param_2)\n\n{\n  FUN_00108a80(0,param_1,param_2);\n  return;\n}\n\n", 
    "00103590": "\nbool FUN_00103590(ulong param_1)\n\n{\n  ulong *puVar1;\n  \n  puVar1 = DAT_001122f8;\n  if (DAT_001122f8 == (ulong *)0x0) {\n    return param_1 == 1;\n  }\n  while( true ) {\n    if (*puVar1 == 0xffffffffffffffff) {\n      return false;\n    }\n    if ((*puVar1 <= param_1) && (param_1 <= puVar1[1])) break;\n    puVar1 = puVar1 + 2;\n  }\n  return true;\n}\n\n", 
    "00108a30": "\nvoid FUN_00108a30(undefined8 param_1,undefined8 param_2)\n\n{\n  FUN_00108550(param_1,param_2,0xffffffffffffffff,&DAT_001122c0);\n  return;\n}\n\n", 
    "00102020": "\nvoid FUN_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)PTR_00111dd8)();\n  return;\n}\n\n", 
    "0010280b": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid switchD_001040c0::caseD_0(void)\n\n{\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n", 
    "00113058": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nsize_t mbstowcs(wchar_t *__pwcs,char *__s,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "00106180": "\nvoid FUN_00106180(undefined8 param_1,undefined8 param_2,long param_3)\n\n{\n  undefined8 uVar1;\n  undefined8 uVar2;\n  undefined8 uVar3;\n  \n  if (param_3 == -1) {\n    uVar1 = dcgettext(0,\"invalid argument %s for %s\",5);\n  }\n  else {\n    uVar1 = dcgettext(0,\"ambiguous argument %s for %s\",5);\n  }\n  uVar2 = FUN_00108e00(1,param_1);\n  uVar3 = FUN_00108a80(0,8,param_2);\n  error(0,0,uVar1,uVar3,uVar2);\n  return;\n}\n\n", 
    "00106060": "\nvoid FUN_00106060(void)\n\n{\n  FUN_00105500(1);\n  return;\n}\n\n", 
    "00107390": "\nulong FUN_00107390(undefined *param_1,ulong param_2,char *param_3,ulong param_4,int param_5,\n                  uint param_6,long param_7,char *param_8,char *param_9)\n\n{\n  byte *__s1;\n  bool bVar1;\n  bool bVar2;\n  bool bVar3;\n  bool bVar4;\n  bool bVar5;\n  bool bVar6;\n  int iVar7;\n  size_t sVar8;\n  ushort **ppuVar9;\n  long lVar10;\n  char cVar11;\n  uint uVar12;\n  ulong uVar13;\n  byte bVar14;\n  ulong uVar15;\n  char *pcVar16;\n  ulong uVar17;\n  ulong uVar18;\n  ulong uVar19;\n  long in_FS_OFFSET;\n  bool bVar20;\n  bool bVar21;\n  bool bVar22;\n  bool bVar23;\n  bool bVar24;\n  size_t local_c8;\n  char *local_98;\n  ulong local_90;\n  char *local_78;\n  char *local_70;\n  bool local_64;\n  wint_t local_4c;\n  mbstate_t local_48;\n  long local_40;\n  \n  local_70 = param_8;\n  local_78 = param_9;\n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  sVar8 = __ctype_get_mb_cur_max();\n  uVar12 = param_6 & 2;\n  bVar20 = uVar12 != 0;\n  switch(param_5) {\n  case 0:\n    bVar6 = true;\n    bVar2 = false;\n    uVar18 = 0;\n    local_64 = false;\n    local_90 = 0;\n    bVar20 = false;\n    bVar1 = false;\n    local_c8 = 0;\n    local_98 = (char *)0x0;\n    break;\n  case 2:\n    if (uVar12 == 0) {\n      bVar1 = false;\nLAB_00107817:\n      if (param_2 == 0) {\n        local_90 = 0;\n        bVar2 = false;\n        bVar6 = true;\n        local_64 = false;\n        goto LAB_00107839;\n      }\n      bVar2 = false;\n      local_64 = false;\n      bVar6 = true;\n      uVar13 = 0;\n      local_90 = param_2;\n      goto LAB_00107dd6;\n    }\n    bVar2 = false;\n    uVar18 = 0;\n    bVar6 = true;\n    local_64 = false;\n    local_90 = 0;\n    bVar20 = true;\n    bVar1 = false;\n    local_c8 = 1;\n    local_98 = \"\\'\";\n    break;\n  case 3:\n    bVar1 = true;\n    goto LAB_0010778f;\n  case 4:\n    if (uVar12 == 0) {\n      bVar1 = true;\n      goto LAB_00107817;\n    }\n  case 1:\n    bVar1 = false;\nLAB_0010778f:\n    bVar6 = true;\n    local_64 = false;\n    bVar20 = true;\n    local_90 = 0;\n    bVar2 = false;\n    uVar18 = 0;\n    param_5 = 2;\n    local_c8 = 1;\n    local_98 = \"\\'\";\n    break;\n  case 5:\n    if (uVar12 == 0) {\n      if (param_2 != 0) {\n        *param_1 = 0x22;\n      }\n      bVar6 = true;\n      local_64 = false;\n      local_90 = 0;\n      bVar2 = false;\n      bVar20 = false;\n      uVar18 = 1;\n      bVar1 = true;\n      local_c8 = 1;\n      local_98 = \"\\\"\";\n    }\n    else {\n      bVar2 = false;\n      uVar18 = 0;\n      bVar6 = true;\n      local_64 = false;\n      local_90 = 0;\n      bVar20 = true;\n      bVar1 = true;\n      local_c8 = 1;\n      local_98 = \"\\\"\";\n    }\n    break;\n  case 6:\n    bVar2 = false;\n    uVar18 = 0;\n    bVar6 = true;\n    local_64 = false;\n    param_5 = 5;\n    local_90 = 0;\n    bVar20 = true;\n    bVar1 = true;\n    local_c8 = 1;\n    local_98 = \"\\\"\";\n    break;\n  case 7:\n    bVar6 = true;\n    bVar2 = false;\n    uVar18 = 0;\n    local_64 = false;\n    local_90 = 0;\n    bVar20 = false;\n    bVar1 = true;\n    local_c8 = 0;\n    local_98 = (char *)0x0;\n    break;\n  case 8:\n  case 9:\n  case 10:\n    if (param_5 != 10) {\n      local_70 = (char *)FUN_00107260(&DAT_0010cff9,param_5);\n      local_78 = (char *)FUN_00107260(&DAT_0010cfe9);\n    }\n    uVar18 = 0;\n    if (uVar12 == 0) {\n      cVar11 = *local_70;\n      while (cVar11 != '\\0') {\n        if (uVar18 < param_2) {\n          param_1[uVar18] = cVar11;\n        }\n        uVar18 = uVar18 + 1;\n        cVar11 = local_70[uVar18];\n      }\n    }\n    bVar2 = false;\n    local_c8 = strlen(local_78);\n    local_98 = local_78;\n    bVar6 = true;\n    local_64 = false;\n    local_90 = 0;\n    bVar1 = true;\n    break;\n  default:\n                    /* WARNING: Subroutine does not return */\n    abort();\n  }\n  do {\n    uVar13 = 0;\n    bVar4 = local_64;\nLAB_001074e0:\n    bVar21 = param_4 != uVar13;\n    if (param_4 == 0xffffffffffffffff) {\n      bVar21 = param_3[uVar13] != '\\0';\n    }\n    bVar24 = bVar1;\n    if (bVar21) {\n      bVar23 = (bool)(param_5 != 2 & bVar1);\n      __s1 = (byte *)(param_3 + uVar13);\n      uVar17 = uVar13;\n      bVar3 = bVar2;\n      bVar5 = bVar23;\n      if (!bVar23) {\n        uVar15 = (ulong)*__s1;\n        switch(uVar15) {\n        case 0:\n          if (bVar1) goto switchD_00107d40_caseD_0;\n          bVar5 = false;\n          uVar15 = 0;\n          if ((param_6 & 1) != 0) goto code_r0x00107cdb;\n          goto LAB_00107acb;\n        default:\nswitchD_00107bf0_caseD_1:\n          bVar22 = bVar1;\n          if (sVar8 != 1) {\n            local_48 = (mbstate_t)0x0;\n            if (param_4 == 0xffffffffffffffff) {\n              param_4 = strlen(param_3);\n            }\n            uVar17 = 0;\n            do {\n              uVar19 = uVar13 + uVar17;\n              lVar10 = FUN_00109ed0(&local_4c,param_3 + uVar19,param_4 - uVar19,&local_48);\n              if (lVar10 == 0) break;\n              if (lVar10 == -1) {\n                bVar21 = false;\n                goto LAB_00107fc8;\n              }\n              if (lVar10 == -2) goto joined_r0x001083da;\n              if (((param_5 == 2) && (bVar20)) && (lVar10 != 1)) {\n                pcVar16 = param_3 + uVar19 + 1;\n                do {\n                  if (((byte)(*pcVar16 + 0xa5U) < 0x22) &&\n                     ((1L << (*pcVar16 + 0xa5U & 0x3f) & 0x20000002bU) != 0)) {\n                    param_5 = 2;\n                    goto LAB_001079b0;\n                  }\n                  pcVar16 = pcVar16 + 1;\n                } while (param_3 + uVar19 + lVar10 != pcVar16);\n              }\n              iVar7 = iswprint(local_4c);\n              if (iVar7 == 0) {\n                bVar21 = false;\n              }\n              uVar17 = uVar17 + lVar10;\n              iVar7 = mbsinit(&local_48);\n            } while (iVar7 == 0);\n            bVar22 = (bool)((bVar21 ^ 1U) & bVar1);\n            goto LAB_00107fc8;\n          }\n          ppuVar9 = __ctype_b_loc();\n          uVar17 = 1;\n          bVar22 = ((*ppuVar9)[uVar15] & 0x4000) == 0;\n          bVar21 = !bVar22;\n          bVar22 = (bool)(bVar22 & bVar1);\n          goto LAB_00107751;\n        case 7:\n          uVar15 = 7;\n          bVar14 = 0x61;\n          break;\n        case 8:\n          uVar15 = 8;\n          bVar14 = 0x62;\n          break;\n        case 9:\n          uVar15 = 9;\n          bVar14 = 0x74;\n          goto LAB_00107c98;\n        case 10:\n          uVar15 = 10;\n          bVar14 = 0x6e;\n          goto LAB_00107c98;\n        case 0xb:\n          uVar15 = 0xb;\n          bVar14 = 0x76;\n          break;\n        case 0xc:\n          uVar15 = 0xc;\n          bVar14 = 0x66;\n          break;\n        case 0xd:\n          uVar15 = 0xd;\n          bVar14 = 0x72;\nLAB_00107c98:\n          bVar23 = (bool)(param_5 == 2 & bVar20);\n          if (bVar23) goto LAB_001079a7;\n          break;\n        case 0x20:\n          uVar15 = 0x20;\n          goto LAB_00107994;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2a:\n        case 0x3b:\n        case 0x3c:\n        case 0x3d:\n        case 0x3e:\n        case 0x5b:\n        case 0x5e:\n        case 0x60:\n        case 0x7c:\n          bVar21 = false;\nLAB_00107994:\n          bVar22 = param_5 == 2;\n          bVar23 = bVar21;\n          if ((!bVar20) || (!bVar22)) goto LAB_001076b8;\n          goto LAB_001079a7;\n        case 0x23:\n        case 0x7e:\nLAB_0010798b:\n          bVar22 = param_5 == 2;\n          if (uVar13 == 0) goto LAB_00107994;\n          goto LAB_001076b5;\n        case 0x25:\n        case 0x2b:\n        case 0x2c:\n        case 0x2d:\n        case 0x2e:\n        case 0x2f:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3a:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4a:\n        case 0x4b:\n        case 0x4c:\n        case 0x4d:\n        case 0x4e:\n        case 0x4f:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5a:\n        case 0x5d:\n        case 0x5f:\n        case 0x61:\n        case 0x62:\n        case 99:\n        case 100:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6a:\n        case 0x6b:\n        case 0x6c:\n        case 0x6d:\n        case 0x6e:\n        case 0x6f:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7a:\n          goto switchD_00107bf0_caseD_25;\n        case 0x27:\nswitchD_00107bf0_caseD_27:\n          bVar4 = bVar21;\n          if (param_5 != 2) {\n            bVar22 = false;\n            uVar15 = 0x27;\n            bVar23 = bVar21;\n            goto LAB_001076b8;\n          }\n          if (!bVar20) {\n            if ((param_2 == 0) || (uVar13 = 0, uVar15 = param_2, local_90 != 0)) {\n              if (uVar18 < param_2) {\n                param_1[uVar18] = 0x27;\n              }\n              if (uVar18 + 1 < param_2) {\n                param_1[uVar18 + 1] = 0x5c;\n              }\n              uVar13 = param_2;\n              uVar15 = local_90;\n              if (uVar18 + 2 < param_2) {\n                param_1[uVar18 + 2] = 0x27;\n              }\n            }\n            bVar14 = 0x27;\n            uVar18 = uVar18 + 3;\n            param_2 = uVar13;\n            local_90 = uVar15;\n            bVar3 = false;\n            bVar22 = false;\n            goto joined_r0x001076db;\n          }\n          goto LAB_001079b0;\n        case 0x3f:\nswitchD_00107bf0_caseD_3f:\n          if (param_5 != 2) {\n            if ((((param_5 == 5) && ((param_6 & 4) != 0)) && (uVar17 = uVar13 + 2, uVar17 < param_4)\n                ) && (param_3[uVar13 + 1] == '?')) {\n              uVar15 = (ulong)(byte)param_3[uVar17];\n              switch(param_3[uVar17]) {\n              case '!':\n              case '\\'':\n              case '(':\n              case ')':\n              case '-':\n              case '/':\n              case '<':\n              case '=':\n              case '>':\n                goto switchD_0010833e_caseD_21;\n              default:\n                break;\n              }\n            }\n            bVar22 = false;\n            uVar15 = 0x3f;\n            bVar23 = false;\n            goto LAB_001076b8;\n          }\n          if (!bVar20) {\n            bVar14 = 0x3f;\n            bVar22 = false;\n            bVar21 = false;\n            goto joined_r0x001076db;\n          }\n          goto LAB_001079b0;\n        case 0x5c:\n          if (param_5 != 2) goto switchD_001075e8_caseD_5c;\n          if (!bVar20) {\nLAB_00107c28:\n            uVar13 = uVar13 + 1;\n            bVar21 = false;\n            bVar14 = 0x5c;\n            goto LAB_00107c40;\n          }\n          goto LAB_001079b0;\n        case 0x7b:\n        case 0x7d:\nswitchD_00107bf0_caseD_7b:\n          bVar23 = param_4 != 1;\n          if (param_4 == 0xffffffffffffffff) {\n            bVar23 = param_3[1] != '\\0';\n          }\n          bVar22 = param_5 == 2;\n          if (!bVar23) goto LAB_0010798b;\nLAB_001076b5:\n          bVar23 = false;\n          goto LAB_001076b8;\n        }\nLAB_00107ac0:\n        bVar5 = bVar23;\n        if (!bVar1) {\nLAB_00107acb:\n          bVar14 = (byte)uVar15;\n          bVar23 = false;\n          bVar21 = false;\n          bVar22 = false;\n          if (!bVar20) goto LAB_001076d8;\n          goto LAB_00107600;\n        }\nLAB_00107b00:\n        bVar21 = false;\n        goto joined_r0x00107b11;\n      }\n      if (local_c8 != 0) {\n        if ((param_4 == 0xffffffffffffffff) && (1 < local_c8)) {\n          param_4 = strlen(param_3);\n        }\n        if ((param_4 < uVar13 + local_c8) || (iVar7 = memcmp(__s1,local_98,local_c8), iVar7 != 0))\n        goto LAB_00107d20;\n        if (!bVar20) {\n          uVar15 = (ulong)*__s1;\n          switch(uVar15) {\n          case 0:\n            goto switchD_001075e8_caseD_0;\n          default:\n            goto switchD_00107bf0_caseD_1;\n          case 7:\n            goto switchD_00107d40_caseD_7;\n          case 8:\n            goto switchD_00107d40_caseD_8;\n          case 9:\n            goto switchD_001075e8_caseD_9;\n          case 10:\n            goto switchD_00107d40_caseD_a;\n          case 0xb:\n            goto switchD_00107d40_caseD_b;\n          case 0xc:\n            goto switchD_00107d40_caseD_c;\n          case 0xd:\n            goto switchD_00107d40_caseD_d;\n          case 0x20:\n            goto LAB_00107d69;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2a:\n          case 0x3b:\n          case 0x3c:\n          case 0x3d:\n          case 0x3e:\n          case 0x5b:\n          case 0x5e:\n          case 0x60:\n          case 0x7c:\n            goto switchD_001075e8_caseD_21;\n          case 0x23:\n          case 0x7e:\n            goto LAB_00107d51;\n          case 0x25:\n          case 0x2b:\n          case 0x2c:\n          case 0x2d:\n          case 0x2e:\n          case 0x2f:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3a:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4a:\n          case 0x4b:\n          case 0x4c:\n          case 0x4d:\n          case 0x4e:\n          case 0x4f:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5a:\n          case 0x5d:\n          case 0x5f:\n          case 0x61:\n          case 0x62:\n          case 99:\n          case 100:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6a:\n          case 0x6b:\n          case 0x6c:\n          case 0x6d:\n          case 0x6e:\n          case 0x6f:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7a:\n            goto LAB_001075f8;\n          case 0x27:\n            goto switchD_00107bf0_caseD_27;\n          case 0x3f:\n            goto switchD_00107bf0_caseD_3f;\n          case 0x5c:\n            goto switchD_001075e8_caseD_5c;\n          case 0x7b:\n          case 0x7d:\n            goto switchD_00107bf0_caseD_7b;\n          }\n        }\n        goto LAB_001079be;\n      }\nLAB_00107d20:\n      uVar15 = (ulong)*__s1;\n      switch(uVar15) {\n      case 0:\nswitchD_00107d40_caseD_0:\n        if (!bVar20) {\n          bVar5 = false;\nswitchD_001075e8_caseD_0:\n          bVar24 = param_5 == 2;\n          bVar3 = (bool)((bVar2 ^ 1U) & bVar24);\n          if (bVar3) {\n            if (uVar18 < param_2) {\n              param_1[uVar18] = 0x27;\n            }\n            if (uVar18 + 1 < param_2) {\n              param_1[uVar18 + 1] = 0x24;\n            }\n            if (uVar18 + 2 < param_2) {\n              param_1[uVar18 + 2] = 0x27;\n            }\n            uVar15 = uVar18 + 3;\n            bVar2 = bVar3;\n            if (param_2 <= uVar18 + 3) {\n              bVar14 = 0x30;\n              uVar18 = uVar18 + 4;\n              bVar22 = bVar3;\n              bVar21 = false;\n              goto joined_r0x001076db;\n            }\nLAB_0010817b:\n            param_1[uVar15] = 0x5c;\n            uVar18 = uVar15;\n          }\n          else {\n            uVar15 = uVar18;\n            if (uVar18 < param_2) goto LAB_0010817b;\n          }\n          uVar19 = uVar18 + 1;\n          bVar22 = bVar21;\n          if (param_5 != 2) {\n            uVar15 = 0x30;\n            if ((uVar13 + 1 < param_4) && ((byte)(param_3[uVar13 + 1] - 0x30U) < 10)) {\n              if (uVar19 < param_2) {\n                param_1[uVar19] = 0x30;\n              }\n              if (uVar18 + 2 < param_2) {\n                param_1[uVar18 + 2] = 0x30;\n              }\n              uVar19 = uVar18 + 3;\n              uVar15 = 0x30;\n            }\n            goto LAB_001081b8;\n          }\n          bVar14 = 0x30;\n          uVar18 = uVar19;\n          bVar3 = bVar2;\n          bVar21 = false;\n          goto joined_r0x001076db;\n        }\n        bVar24 = param_5 == 2;\n        goto LAB_001079b0;\n      default:\n        bVar23 = false;\n        goto switchD_00107bf0_caseD_1;\n      case 7:\nswitchD_00107d40_caseD_7:\n        bVar14 = 0x61;\n        break;\n      case 8:\nswitchD_00107d40_caseD_8:\n        bVar14 = 0x62;\n        break;\n      case 9:\n        bVar23 = false;\nswitchD_001075e8_caseD_9:\n        uVar15 = 9;\n        bVar14 = 0x74;\n        goto LAB_00107ac0;\n      case 10:\nswitchD_00107d40_caseD_a:\n        bVar14 = 0x6e;\n        goto LAB_00107b00;\n      case 0xb:\nswitchD_00107d40_caseD_b:\n        bVar14 = 0x76;\n        goto LAB_00107b00;\n      case 0xc:\nswitchD_00107d40_caseD_c:\n        bVar14 = 0x66;\n        break;\n      case 0xd:\nswitchD_00107d40_caseD_d:\n        bVar14 = 0x72;\n        goto LAB_00107b00;\n      case 0x20:\n        bVar5 = false;\nLAB_00107d69:\n        uVar15 = 0x20;\n        goto LAB_001075f8;\n      case 0x21:\n      case 0x22:\n      case 0x24:\n      case 0x26:\n      case 0x28:\n      case 0x29:\n      case 0x2a:\n      case 0x3b:\n      case 0x3c:\n      case 0x3d:\n      case 0x3e:\n      case 0x5b:\n      case 0x5e:\n      case 0x60:\n      case 0x7c:\n        bVar5 = false;\nswitchD_001075e8_caseD_21:\n        bVar22 = false;\n        goto LAB_001076b5;\n      case 0x23:\n      case 0x7e:\n        bVar5 = false;\nLAB_00107d51:\n        if (uVar13 == 0) {\n          bVar22 = false;\n          goto LAB_001076b8;\n        }\n        bVar23 = false;\n        bVar22 = false;\n        goto LAB_00107600;\n      case 0x25:\n      case 0x2b:\n      case 0x2c:\n      case 0x2d:\n      case 0x2e:\n      case 0x2f:\n      case 0x30:\n      case 0x31:\n      case 0x32:\n      case 0x33:\n      case 0x34:\n      case 0x35:\n      case 0x36:\n      case 0x37:\n      case 0x38:\n      case 0x39:\n      case 0x3a:\n      case 0x41:\n      case 0x42:\n      case 0x43:\n      case 0x44:\n      case 0x45:\n      case 0x46:\n      case 0x47:\n      case 0x48:\n      case 0x49:\n      case 0x4a:\n      case 0x4b:\n      case 0x4c:\n      case 0x4d:\n      case 0x4e:\n      case 0x4f:\n      case 0x50:\n      case 0x51:\n      case 0x52:\n      case 0x53:\n      case 0x54:\n      case 0x55:\n      case 0x56:\n      case 0x57:\n      case 0x58:\n      case 0x59:\n      case 0x5a:\n      case 0x5d:\n      case 0x5f:\n      case 0x61:\n      case 0x62:\n      case 99:\n      case 100:\n      case 0x65:\n      case 0x66:\n      case 0x67:\n      case 0x68:\n      case 0x69:\n      case 0x6a:\n      case 0x6b:\n      case 0x6c:\n      case 0x6d:\n      case 0x6e:\n      case 0x6f:\n      case 0x70:\n      case 0x71:\n      case 0x72:\n      case 0x73:\n      case 0x74:\n      case 0x75:\n      case 0x76:\n      case 0x77:\n      case 0x78:\n      case 0x79:\n      case 0x7a:\n        bVar5 = false;\nLAB_001075f8:\n        bVar22 = false;\n        goto LAB_00107600;\n      case 0x27:\n        bVar5 = false;\n        goto switchD_00107bf0_caseD_27;\n      case 0x3f:\n        bVar5 = false;\n        goto switchD_00107bf0_caseD_3f;\n      case 0x5c:\n        bVar23 = false;\nswitchD_001075e8_caseD_5c:\n        if (((bool)(bVar1 & bVar20)) && (local_c8 != 0)) goto LAB_00107c28;\n        uVar15 = 0x5c;\n        bVar14 = 0x5c;\n        goto LAB_00107ac0;\n      case 0x7b:\n      case 0x7d:\n        bVar5 = false;\n        goto switchD_00107bf0_caseD_7b;\n      }\n      if (bVar20) goto LAB_00107b20;\n      bVar21 = false;\n      goto LAB_00107676;\n    }\n    if ((uVar18 == 0) && ((bool)(bVar20 & param_5 == 2))) {\nLAB_001079a7:\n      param_5 = 2;\nLAB_001079b0:\n      if (bVar24) {\n        param_5 = 4;\n      }\nLAB_001079be:\n      uVar13 = FUN_00107390(param_1,param_2,param_3,param_4,param_5,param_6 & 0xfffffffd,0,local_70,\n                            local_78);\n      goto LAB_001079f8;\n    }\n    bVar21 = (bool)(param_5 == 2 & (bVar20 ^ 1U));\n    bVar20 = (bool)(bVar20 ^ 1U);\n    if ((!bVar21) || (bVar20 = bVar21, !bVar4)) {\nLAB_00108445:\n      uVar13 = uVar18;\n      if (((local_98 != (char *)0x0) && (bVar20)) && (cVar11 = *local_98, cVar11 != '\\0')) {\n        do {\n          if (uVar13 < param_2) {\n            param_1[uVar13] = cVar11;\n          }\n          uVar13 = uVar13 + 1;\n          cVar11 = local_98[uVar13 - uVar18];\n        } while (cVar11 != '\\0');\n      }\n      if (uVar13 < param_2) {\n        param_1[uVar13] = 0;\n      }\nLAB_001079f8:\n      if (local_40 == *(long *)(in_FS_OFFSET + 0x28)) {\n        return uVar13;\n      }\n                    /* WARNING: Subroutine does not return */\n      __stack_chk_fail();\n    }\n    if (bVar6) {\n      uVar13 = FUN_00107390(param_1,local_90,param_3,param_4,5,param_6,param_7,local_70,local_78);\n      goto LAB_001079f8;\n    }\n    local_64 = param_2 == 0 && local_90 != 0;\n    uVar13 = local_90;\n    bVar20 = bVar4;\n    if (param_2 != 0 || local_90 == 0) goto LAB_00108445;\nLAB_00107dd6:\n    *param_1 = 0x27;\n    param_2 = local_90;\n    local_90 = uVar13;\nLAB_00107839:\n    bVar20 = false;\n    uVar18 = 1;\n    param_5 = 2;\n    local_c8 = 1;\n    local_98 = \"\\'\";\n  } while( true );\ncode_r0x00107cdb:\n  uVar13 = uVar13 + 1;\n  goto LAB_001074e0;\nswitchD_0010833e_caseD_21:\n  if (!bVar20) {\n    if (uVar18 < param_2) {\n      param_1[uVar18] = 0x3f;\n    }\n    if (uVar18 + 1 < param_2) {\n      param_1[uVar18 + 1] = 0x22;\n    }\n    if (uVar18 + 2 < param_2) {\n      param_1[uVar18 + 2] = 0x22;\n    }\n    if (uVar18 + 3 < param_2) {\n      param_1[uVar18 + 3] = 0x3f;\n    }\n    uVar19 = uVar18 + 4;\n    bVar24 = false;\n    bVar22 = false;\nLAB_001081b8:\n    bVar14 = (byte)uVar15;\n    bVar23 = false;\n    bVar21 = false;\n    uVar13 = uVar17;\n    uVar18 = uVar19;\n    bVar3 = bVar2;\n    if ((bool)(bVar1 ^ 1U | bVar24)) goto joined_r0x001076db;\n    goto LAB_00107600;\n  }\n  goto LAB_001079be;\njoined_r0x001083da:\n  while ((uVar19 < param_4 && (param_3[uVar19] != '\\0'))) {\n    uVar17 = uVar17 + 1;\n    uVar19 = uVar13 + uVar17;\n  }\n  bVar21 = false;\nLAB_00107fc8:\n  if (1 < uVar17) {\nLAB_00107fd2:\n    bVar24 = false;\n    uVar17 = uVar17 + uVar13;\n    uVar19 = uVar13;\n    do {\n      bVar14 = (byte)uVar15;\n      if (bVar22) {\n        bVar24 = param_5 == 2;\n        if (bVar20) goto LAB_001079b0;\n        bVar24 = (bool)(bVar24 & (bVar3 ^ 1U));\n        if (bVar24) {\n          if (uVar18 < param_2) {\n            param_1[uVar18] = 0x27;\n          }\n          if (uVar18 + 1 < param_2) {\n            param_1[uVar18 + 1] = 0x24;\n          }\n          if (uVar18 + 2 < param_2) {\n            param_1[uVar18 + 2] = 0x27;\n          }\n          uVar18 = uVar18 + 3;\n          bVar3 = bVar24;\n        }\n        if (uVar18 < param_2) {\n          param_1[uVar18] = 0x5c;\n        }\n        if (uVar18 + 1 < param_2) {\n          param_1[uVar18 + 1] = (char)(uVar15 >> 6) + '0';\n        }\n        if (uVar18 + 2 < param_2) {\n          param_1[uVar18 + 2] = ((byte)(uVar15 >> 3) & 7) + 0x30;\n        }\n        uVar13 = uVar19 + 1;\n        uVar18 = uVar18 + 3;\n        bVar14 = (bVar14 & 7) + 0x30;\n        bVar24 = bVar22;\n        if (uVar17 <= uVar13) goto LAB_00107688;\n      }\n      else {\n        bVar2 = (bool)((bVar24 ^ 1U) & bVar3);\n        if (bVar23) {\n          if (uVar18 < param_2) {\n            param_1[uVar18] = 0x5c;\n          }\n          uVar18 = uVar18 + 1;\n        }\n        uVar13 = uVar19 + 1;\n        if (uVar17 <= uVar13) goto LAB_00107c40;\n        if (bVar2) {\n          if (uVar18 < param_2) {\n            param_1[uVar18] = 0x27;\n          }\n          if (uVar18 + 1 < param_2) {\n            param_1[uVar18 + 1] = 0x27;\n          }\n          uVar18 = uVar18 + 2;\n          bVar23 = false;\n          bVar3 = false;\n        }\n        else {\n          bVar23 = false;\n        }\n      }\n      uVar19 = uVar19 + 1;\n      if (uVar18 < param_2) {\n        param_1[uVar18] = bVar14;\n      }\n      uVar15 = (ulong)(byte)param_3[uVar19];\n      uVar18 = uVar18 + 1;\n    } while( true );\n  }\nLAB_00107751:\n  bVar5 = bVar23;\n  if (bVar22) {\n    bVar21 = false;\n    bVar22 = bVar1;\n    goto LAB_00107fd2;\n  }\nswitchD_00107bf0_caseD_25:\n  bVar22 = param_5 == 2;\n  bVar23 = bVar21;\nLAB_001076b8:\n  bVar14 = (byte)uVar15;\n  bVar22 = (bool)(bVar22 | bVar1 ^ 1U);\n  if ((!bVar22) || (bVar22 = false, bVar21 = bVar23, bVar20)) {\nLAB_00107600:\n    bVar14 = (byte)uVar15;\n    uVar17 = uVar13;\n    bVar3 = bVar2;\n    bVar21 = bVar23;\n    if ((param_7 == 0) || ((*(uint *)(param_7 + (uVar15 >> 5) * 4) >> (bVar14 & 0x1f) & 1) == 0))\n    goto joined_r0x001076db;\n  }\n  else {\nLAB_001076d8:\n    uVar17 = uVar13;\n    bVar22 = false;\njoined_r0x001076db:\n    uVar13 = uVar17;\n    bVar2 = bVar3;\n    if (!bVar5) {\n      uVar13 = uVar17 + 1;\n      bVar2 = (bool)((bVar22 ^ 1U) & bVar3);\nLAB_00107c40:\n      if (bVar2) {\n        if (uVar18 < param_2) {\n          param_1[uVar18] = 0x27;\n        }\n        if (uVar18 + 1 < param_2) {\n          param_1[uVar18 + 1] = 0x27;\n        }\n        uVar18 = uVar18 + 2;\n        bVar3 = false;\n      }\n      goto LAB_00107688;\n    }\n  }\njoined_r0x00107b11:\n  if (bVar20) {\nLAB_00107b20:\n    bVar24 = (bool)(bVar1 & param_5 == 2);\n    goto LAB_001079b0;\n  }\n  bVar24 = (bool)((bVar2 ^ 1U) & param_5 == 2);\n  if (bVar24) {\n    if (uVar18 < param_2) {\n      param_1[uVar18] = 0x27;\n    }\n    if (uVar18 + 1 < param_2) {\n      param_1[uVar18 + 1] = 0x24;\n    }\n    if (uVar18 + 2 < param_2) {\n      param_1[uVar18 + 2] = 0x27;\n    }\n    uVar18 = uVar18 + 3;\n    bVar2 = bVar24;\n  }\nLAB_00107676:\n  if (uVar18 < param_2) {\n    param_1[uVar18] = 0x5c;\n  }\n  uVar18 = uVar18 + 1;\n  uVar13 = uVar13 + 1;\n  bVar3 = bVar2;\nLAB_00107688:\n  bVar2 = bVar3;\n  if (uVar18 < param_2) {\n    param_1[uVar18] = bVar14;\n  }\n  uVar18 = uVar18 + 1;\n  if (!bVar21) {\n    bVar6 = false;\n  }\n  goto LAB_001074e0;\n}\n\n", 
    "001027a0": "\nvoid __fprintf_chk(void)\n\n{\n  (*(code *)PTR___fprintf_chk_00111fa0)();\n  return;\n}\n\n", 
    "001066c0": "\nundefined8 FUN_001066c0(wint_t *param_1)\n\n{\n  wint_t *pwVar1;\n  wint_t __wc;\n  int iVar2;\n  undefined8 uVar3;\n  \n  uVar3 = 0;\n  __wc = *param_1;\n  while (__wc != 0) {\n    iVar2 = iswprint(__wc);\n    if (iVar2 == 0) {\n      *param_1 = 0xfffd;\n      uVar3 = 1;\n    }\n    pwVar1 = param_1 + 1;\n    param_1 = param_1 + 1;\n    __wc = *pwVar1;\n  }\n  return uVar3;\n}\n\n", 
    "00109480": "\nvoid FUN_00109480(ulong param_1,ulong param_2)\n\n{\n  if ((-1 < SUB168(ZEXT816(param_1) * ZEXT816(param_2),0)) &&\n     (SUB168(ZEXT816(param_1) * ZEXT816(param_2) >> 0x40,0) == 0)) {\n    FUN_00109460();\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  FUN_00109680();\n}\n\n", 
    "001065a0": "\nint FUN_001065a0(int param_1)\n\n{\n  if (param_1 - 0x61U < 0x1a) {\n    param_1 = param_1 + -0x20;\n  }\n  return param_1;\n}\n\n", 
    "00108ae0": "\nvoid FUN_00108ae0(undefined4 param_1,undefined8 param_2,undefined8 param_3,undefined8 param_4)\n\n{\n  long in_FS_OFFSET;\n  undefined auStack_68 [56];\n  long local_30;\n  \n  local_30 = *(long *)(in_FS_OFFSET + 0x28);\n  FUN_00106be0(auStack_68);\n  FUN_00108550(param_1,param_3,param_4,auStack_68);\n  if (local_30 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "001033f0": "\nlong FUN_001033f0(void)\n\n{\n  float10 param_7;\n  \n  return (long)ROUND(param_7);\n}\n\n", 
    "00113068": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint fclose(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "00113188": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid __printf_chk(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "001031b0": "\nint FUN_001031b0(int param_1)\n\n{\n  return (-(uint)(param_1 - 3U < 2) & 0x18) + 1000;\n}\n\n", 
    "00102817": "\nvoid FUN_00102817(void)\n\n{\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n", 
    "001032d0": "\nvoid FUN_001032d0(void)\n\n{\n  float10 param_7;\n  \n  if ((float10)0 <= param_7) {\n    return;\n  }\n  return;\n}\n\n", 
    "00113060": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid textdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "00113180": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nchar * setlocale(int __category,char *__locale)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "001130d0": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nchar * strncat(char *__dest,char *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "001131f0": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint mbsinit(mbstate_t *__ps)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "001093d0": "\nvoid FUN_001093d0(void)\n\n{\n  FILE *__stream;\n  undefined8 uVar1;\n  char *__s;\n  \n  uVar1 = dcgettext(0,\"\\nReport bugs to: %s\\n\",5);\n  __printf_chk(1,uVar1,\"bug-coreutils@gnu.org\");\n  uVar1 = dcgettext(0,\"%s home page: <%s>\\n\",5);\n  __printf_chk(1,uVar1,\"GNU coreutils\",\"https://www.gnu.org/software/coreutils/\");\n  __stream = stdout;\n  __s = (char *)dcgettext(0,\"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\",5);\n  fputs_unlocked(__s,__stream);\n  return;\n}\n\n", 
    "00108c40": "\nvoid FUN_00108c40(undefined8 param_1,undefined8 param_2)\n\n{\n  FUN_00108b80(param_1,param_2,0x3a);\n  return;\n}\n\n", 
    "00106770": "\nlong FUN_00106770(char *param_1,long param_2,long param_3,ulong *param_4,int param_5,uint param_6)\n\n{\n  char cVar1;\n  int iVar2;\n  ulong uVar3;\n  ulong uVar4;\n  size_t sVar5;\n  void *pvVar6;\n  size_t __n;\n  wchar_t *__pwcs;\n  size_t sVar7;\n  char *__s;\n  ulong uVar8;\n  ulong uVar9;\n  ulong uVar10;\n  long lVar11;\n  char *local_60;\n  \n  uVar3 = strlen(param_1);\n  uVar9 = uVar3;\n  if (((param_6 & 2) == 0) && (sVar5 = __ctype_get_mb_cur_max(), 1 < sVar5)) {\n    sVar5 = mbstowcs((wchar_t *)0x0,param_1,0);\n    if (sVar5 == 0xffffffffffffffff) {\n      if ((param_6 & 1) == 0) {\nLAB_0010688b:\n        __pwcs = (wchar_t *)0x0;\n        __s = (char *)0x0;\n        lVar11 = -1;\n        goto LAB_00106803;\n      }\n      goto LAB_001067a9;\n    }\n    __n = sVar5 + 1;\n    __pwcs = (wchar_t *)malloc(__n * 4);\n    local_60 = param_1;\n    if (__pwcs == (wchar_t *)0x0) {\n      if ((param_6 & 1) == 0) goto LAB_0010688b;\n      __s = (char *)0x0;\n      goto LAB_001067b2;\n    }\n    __s = (char *)0x0;\n    sVar7 = mbstowcs(__pwcs,param_1,__n);\n    if (sVar7 == 0) goto LAB_001067b2;\n    __pwcs[sVar5] = L'\\0';\n    cVar1 = FUN_001066c0(__pwcs);\n    iVar2 = wcswidth(__pwcs,__n);\n    uVar9 = (ulong)iVar2;\n    if (cVar1 != '\\0') {\n      sVar5 = wcstombs((char *)0x0,__pwcs,0);\nLAB_001069be:\n      __s = (char *)malloc(sVar5 + 1);\n      if (__s == (char *)0x0) {\n        if ((param_6 & 1) == 0) {\n          lVar11 = -1;\n          goto LAB_00106803;\n        }\n      }\n      else {\n        uVar9 = FUN_00106710(__pwcs,*param_4);\n        uVar3 = wcstombs(__s,__pwcs,sVar5 + 1);\n        local_60 = __s;\n      }\n      goto LAB_001067b2;\n    }\n    uVar4 = *param_4;\n    sVar5 = uVar3;\n    if (uVar4 < uVar9) goto LAB_001069be;\nLAB_00106828:\n    uVar10 = uVar9;\n    uVar8 = uVar3;\n    if (uVar4 <= uVar9) goto LAB_001067c0;\n    uVar4 = uVar4 - uVar9;\n    *param_4 = uVar9;\n    if (param_5 != 0) goto LAB_001067c9;\nLAB_00106843:\n    uVar9 = 0;\n    uVar10 = uVar4;\n  }\n  else {\nLAB_001067a9:\n    __pwcs = (wchar_t *)0x0;\n    __s = (char *)0x0;\n    local_60 = param_1;\nLAB_001067b2:\n    uVar4 = *param_4;\n    uVar10 = uVar4;\n    uVar8 = uVar4;\n    if (uVar9 <= uVar4) goto LAB_00106828;\nLAB_001067c0:\n    uVar4 = 0;\n    *param_4 = uVar10;\n    uVar3 = uVar8;\n    if (param_5 == 0) goto LAB_00106843;\nLAB_001067c9:\n    uVar9 = uVar4;\n    uVar10 = 0;\n    if (param_5 != 1) {\n      uVar9 = (ulong)((uint)uVar4 & 1) + (uVar4 >> 1);\n      uVar10 = uVar4 >> 1;\n    }\n  }\n  uVar4 = uVar9 + uVar3;\n  if ((param_6 & 4) != 0) {\n    uVar9 = 0;\n    uVar4 = uVar3;\n  }\n  if ((param_6 & 8) != 0) {\n    uVar10 = 0;\n  }\n  if (param_3 != 0) {\n    param_3 = param_2 + -1 + param_3;\n    pvVar6 = (void *)FUN_00106690(param_2,param_3,uVar9);\n    uVar9 = param_3 - (long)pvVar6;\n    if (uVar3 < (ulong)(param_3 - (long)pvVar6)) {\n      uVar9 = uVar3;\n    }\n    pvVar6 = mempcpy(pvVar6,local_60,uVar9);\n    FUN_00106690(pvVar6,param_3,uVar10);\n  }\n  lVar11 = uVar4 + uVar10;\nLAB_00106803:\n  free(__pwcs);\n  free(__s);\n  return lVar11;\n}\n\n", 
    "00113028": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid _ITM_deregisterTMCloneTable(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "00113148": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint wcwidth(wchar_t __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "001027d0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint iswprint(wint_t __wc)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_iswprint_00111fb8)();\n  return iVar1;\n}\n\n", 
    "001026b0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_fflush_00111f28)();\n  return iVar1;\n}\n\n", 
    "001037a0": "\nuint FUN_001037a0(undefined8 param_1,char **param_2,float10 *param_3,undefined8 *param_4)\n\n{\n  char *pcVar1;\n  uint uVar2;\n  int iVar3;\n  uint uVar4;\n  size_t __n;\n  long in_FS_OFFSET;\n  float10 in_ST0;\n  float10 fVar5;\n  undefined auVar6 [16];\n  char local_62;\n  char local_61;\n  long local_60;\n  float10 local_58 [2];\n  long local_40;\n  \n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  *param_4 = 0;\n  uVar2 = FUN_00103670();\n  uVar4 = uVar2;\n  if (uVar2 < 2) {\n    __n = (size_t)DAT_00112114;\n    pcVar1 = *param_2;\n    iVar3 = strncmp(pcVar1,DAT_00112118,__n);\n    if (iVar3 == 0) {\n      pcVar1 = pcVar1 + __n;\n      local_58[0] = (float10)0;\n      *param_2 = pcVar1;\n      uVar4 = FUN_00103670(pcVar1,&local_60,local_58,&local_61);\n      if (uVar4 < 2) {\n        if (uVar4 == 1) {\n          uVar2 = 1;\n        }\n        uVar4 = 3;\n        if (local_61 == '\\0') {\n          auVar6 = FUN_001032a0(local_60 - (long)*param_2 & 0xffffffff);\n          if (local_62 == '\\0') {\n            fVar5 = *param_3 + local_58[0] / in_ST0;\n          }\n          else {\n            fVar5 = *param_3 - local_58[0] / in_ST0;\n          }\n          *param_3 = fVar5;\n          *param_4 = SUB168(auVar6 >> 0x40,0);\n          *param_2 = SUB168(auVar6,0);\n          uVar4 = uVar2;\n        }\n      }\n    }\n  }\n  if (local_40 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return uVar4;\n}\n\n", 
    "00113030": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid _exit(int __status)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "00113150": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint putc_unlocked(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "00106f30": "\nundefined8\nFUN_00106f30(long param_1,undefined8 param_2,byte param_3,char param_4,char param_5,char param_6,\n            char param_7)\n\n{\n  char cVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  \n  cVar1 = FUN_00106540((int)(char)param_3);\n  bVar2 = *(byte *)(param_1 + 3);\n  if (cVar1 != '\\0') {\n    bVar2 = bVar2 & 0xdf;\n  }\n  if (param_3 != bVar2) {\n    return 0;\n  }\n  if (param_3 == 0) {\n    return 1;\n  }\n  uVar3 = FUN_00106e80(param_1,param_2,(int)param_4,(int)param_5,(int)param_6,(int)param_7);\n  return uVar3;\n}\n\n", 
    "001087b0": "\nundefined4 FUN_001087b0(undefined *param_1,undefined4 param_2)\n\n{\n  undefined4 uVar1;\n  \n  if (param_1 == (undefined *)0x0) {\n    param_1 = &DAT_001122c0;\n  }\n  uVar1 = *(undefined4 *)(param_1 + 4);\n  *(undefined4 *)(param_1 + 4) = param_2;\n  return uVar1;\n}\n\n", 
    "00103b40": "\nvoid FUN_00103b40(long param_1)\n\n{\n  char cVar1;\n  bool bVar2;\n  long lVar3;\n  size_t sVar4;\n  int *piVar5;\n  undefined8 uVar6;\n  undefined8 uVar7;\n  undefined8 uVar8;\n  ushort **ppuVar9;\n  char cVar10;\n  long lVar11;\n  undefined *puVar12;\n  char *pcVar13;\n  long lVar14;\n  char *pcVar15;\n  long in_FS_OFFSET;\n  char *local_48;\n  long local_40;\n  \n  lVar14 = 0;\n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  lVar3 = 0;\n  local_48 = (char *)0x0;\n  do {\n    if (*(char *)(param_1 + lVar3) == '%') {\n      lVar11 = lVar3 + 1;\n      if (*(char *)(param_1 + 1 + lVar3) != '%') break;\n      lVar11 = 2;\n    }\n    else {\n      if (*(char *)(param_1 + lVar3) == '\\0') {\n        uVar6 = FUN_00108e10(param_1);\n        uVar7 = dcgettext(0,\"format %s has no %% directive\",5);\n        error(1,0,uVar7,uVar6);\n        goto LAB_00103f2e;\n      }\n      lVar11 = 1;\n    }\n    lVar3 = lVar3 + lVar11;\n    lVar14 = lVar14 + 1;\n  } while( true );\n  bVar2 = false;\n  pcVar13 = (char *)(param_1 + lVar11);\n  do {\n    while( true ) {\n      while( true ) {\n        sVar4 = strspn(pcVar13,\" \");\n        lVar11 = lVar11 + sVar4;\n        pcVar13 = (char *)(param_1 + lVar11);\n        if (*pcVar13 != '\\'') break;\n        DAT_00112170 = 1;\n        lVar11 = lVar11 + 1;\n        pcVar13 = (char *)(param_1 + lVar11);\n      }\n      if (*pcVar13 != '0') break;\n      lVar11 = lVar11 + 1;\n      bVar2 = true;\n      pcVar13 = (char *)(param_1 + lVar11);\n    }\n  } while (sVar4 != 0);\n  piVar5 = __errno_location();\n  *piVar5 = 0;\n  lVar3 = strtol(pcVar13,&local_48,10);\n  if (*piVar5 == 0x22) {\nLAB_00103f60:\n    uVar6 = FUN_00108e10(param_1);\n    uVar7 = dcgettext(0,\"invalid format %s (width overflow)\",5);\n    error(1,0,uVar7,uVar6);\nLAB_00103f92:\n    uVar6 = FUN_00108e10(param_1);\n    uVar7 = dcgettext(0,\"format %s ends in %%\",5);\n    error(1,0,uVar7,uVar6);\n  }\n  else {\n    lVar11 = DAT_00112158;\n    if ((local_48 != pcVar13) && (lVar3 != 0)) {\n      if ((DAT_00112120 == '\\0') || (DAT_00112158 == 0)) {\nLAB_00103e25:\n        if (lVar3 < 0) {\n          DAT_00112018 = 0;\n          lVar11 = -lVar3;\n        }\n        else {\n          lVar11 = lVar3;\n          if (bVar2) goto LAB_00103c4e;\n        }\n      }\n      else {\n        if ((!bVar2) || (lVar3 < 1)) {\n          uVar6 = dcgettext(0,\"--format padding overriding --padding\",5);\n          error(0,0,uVar6);\n          goto LAB_00103e25;\n        }\nLAB_00103c4e:\n        DAT_00112150 = lVar3;\n        lVar11 = DAT_00112158;\n      }\n    }\n    DAT_00112158 = lVar11;\n    cVar10 = *local_48;\n    lVar3 = (long)local_48 - param_1;\n    if (cVar10 == '\\0') goto LAB_00103f92;\n    if (cVar10 != '.') {\nLAB_00103c77:\n      if (cVar10 != 'f') {\nLAB_00103f2e:\n        uVar6 = FUN_00108e10(param_1);\n        uVar7 = dcgettext(0,\"invalid format %s, directive must be %%[0][\\'][-][N][.][N]f\",5);\n        error(1,0,uVar7,uVar6);\n        goto LAB_00103f60;\n      }\n      pcVar13 = (char *)(param_1 + lVar3 + 1);\n      lVar3 = lVar3 + 1;\n      cVar10 = *pcVar13;\n      if (*pcVar13 == '\\0') {\n        if (lVar14 != 0) {\nLAB_00103cd6:\n          DAT_00112140 = (char *)FUN_001096c0(param_1,lVar14);\n          if (*pcVar13 != '\\0') goto LAB_00103e3f;\n        }\n      }\n      else {\n        do {\n          while( true ) {\n            cVar1 = *(char *)(param_1 + 1 + lVar3);\n            if (cVar10 != '%') break;\n            if (cVar1 != '%') goto LAB_00103ff6;\n            cVar10 = *(char *)(param_1 + lVar3 + 2);\n            lVar3 = lVar3 + 2;\n            if (cVar10 == '\\0') goto LAB_00103ccd;\n          }\n          lVar3 = lVar3 + 1;\n          cVar10 = cVar1;\n        } while (cVar1 != '\\0');\nLAB_00103ccd:\n        if (lVar14 != 0) goto LAB_00103cd6;\nLAB_00103e3f:\n        DAT_00112138 = (char *)FUN_00109660(pcVar13);\n      }\n      if (DAT_00112110 != '\\0') {\n        pcVar13 = DAT_00112138;\n        if (DAT_00112138 == (char *)0x0) {\n          pcVar13 = \"\";\n        }\n        uVar6 = FUN_00108e00(2,pcVar13);\n        pcVar13 = DAT_00112140;\n        if (DAT_00112140 == (char *)0x0) {\n          pcVar13 = \"\";\n        }\n        pcVar15 = \"Left\";\n        puVar12 = &DAT_0010b04e;\n        uVar7 = FUN_00108e00(1,pcVar13);\n        lVar3 = DAT_00112158;\n        if (DAT_00112018 != 0) {\n          pcVar15 = \"Right\";\n        }\n        if (DAT_00112170 == 0) {\n          puVar12 = &DAT_0010b052;\n        }\n        uVar8 = FUN_00108e00(0,param_1);\n        __fprintf_chk(stderr,1,\n                      \"format String:\\n  input: %s\\n  grouping: %s\\n  padding width: %ld\\n  alignment: %s\\n  prefix: %s\\n  suffix: %s\\n\"\n                      ,uVar8,puVar12,lVar3,pcVar15,uVar7,uVar6,uVar8);\n      }\n      if (local_40 == *(long *)(in_FS_OFFSET + 0x28)) {\n        return;\n      }\n      goto LAB_00104028;\n    }\n    *piVar5 = 0;\n    pcVar13 = (char *)(param_1 + 1 + lVar3);\n    DAT_00112020 = strtol(pcVar13,&local_48,10);\n    if ((*piVar5 != 0x22) && (-1 < DAT_00112020)) {\n      ppuVar9 = __ctype_b_loc();\n      cVar10 = *pcVar13;\n      if (((*(byte *)(*ppuVar9 + cVar10) & 1) == 0) && (cVar10 != '+')) {\n        cVar10 = *local_48;\n        lVar3 = (long)local_48 - param_1;\n        goto LAB_00103c77;\n      }\n    }\n  }\n  uVar6 = FUN_00108e10(param_1);\n  uVar7 = dcgettext(0,\"invalid precision in format %s\",5);\n  error(1,0,uVar7,uVar6);\nLAB_00103ff6:\n  uVar6 = FUN_00108e10(param_1);\n  uVar7 = dcgettext(0,\"format %s has too many %% directives\",5);\n  error(1,0,uVar7,uVar6);\nLAB_00104028:\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "001065d0": "\nvoid FUN_001065d0(undefined param_1)\n\n{\n  DAT_001121a0 = param_1;\n  return;\n}\n\n", 
    "00108cf0": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nvoid FUN_00108cf0(undefined4 param_1,undefined8 param_2,undefined8 param_3,undefined8 param_4,\n                 undefined8 param_5)\n\n{\n  long in_FS_OFFSET;\n  undefined8 local_68;\n  undefined8 uStack_60;\n  undefined8 local_58;\n  undefined8 uStack_50;\n  undefined8 local_48;\n  undefined8 uStack_40;\n  undefined8 local_38;\n  long local_30;\n  \n  local_30 = *(long *)(in_FS_OFFSET + 0x28);\n  local_68 = _DAT_001122c0;\n  uStack_60 = uRam00000000001122c8;\n  local_38 = DAT_001122f0;\n  local_58 = _DAT_001122d0;\n  uStack_50 = uRam00000000001122d8;\n  local_48 = _DAT_001122e0;\n  uStack_40 = uRam00000000001122e8;\n  FUN_001087d0(&local_68);\n  FUN_00108550(param_1,param_4,param_5,&local_68);\n  if (local_30 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "001064b0": "\nbool FUN_001064b0(int param_1)\n\n{\n  return param_1 - 0x61U < 0x1a;\n}\n\n", 
    "001130d8": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nsize_t strspn(char *__s,char *__accept)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "001131f8": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint iswprint(wint_t __wc)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "00102720": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = (void *)(*(code *)PTR_memmove_00111f60)();\n  return pvVar1;\n}\n\n", 
    "00102600": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint ferror_unlocked(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_ferror_unlocked_00111ed0)();\n  return iVar1;\n}\n\n", 
    "00106520": "\nbool FUN_00106520(int param_1)\n\n{\n  if (param_1 < 0xe) {\n    return 8 < param_1;\n  }\n  return param_1 == 0x20;\n}\n\n", 
    "001130e0": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nchar * strndup(char *__string,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "00103370": "\nlong FUN_00103370(void)\n\n{\n  float10 param_7;\n  \n  return (long)ROUND(param_7) + (ulong)((float10)(long)ROUND(param_7) < param_7);\n}\n\n", 
    "00105430": "\nundefined FUN_00105430(char *param_1,char param_2)\n\n{\n  char cVar1;\n  undefined8 uVar2;\n  undefined uVar3;\n  long lVar4;\n  int __c;\n  char *local_30;\n  \n  lVar4 = 0;\n  uVar3 = 1;\n  local_30 = param_1;\n  while( true ) {\n    lVar4 = lVar4 + 1;\n    uVar2 = FUN_00103a90(&local_30);\n    if (*local_30 == '\\0') break;\n    *local_30 = '\\0';\n    cVar1 = FUN_00105360(uVar2,lVar4);\n    if (cVar1 == '\\0') {\n      uVar3 = 0;\n    }\n    __c = DAT_00112014;\n    if (DAT_00112014 == 0x80) {\n      __c = 0x20;\n    }\n    fputc_unlocked(__c,stdout);\n    local_30 = local_30 + 1;\n  }\n  cVar1 = FUN_00105360(uVar2,lVar4);\n  if (cVar1 == '\\0') {\n    uVar3 = 0;\n  }\n  if (param_2 == '\\0') {\n    return uVar3;\n  }\n  putchar_unlocked((uint)DAT_00112010);\n  return uVar3;\n}\n\n", 
    "00108c50": "\nvoid FUN_00108c50(undefined4 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  undefined8 *puVar1;\n  long in_FS_OFFSET;\n  undefined8 local_98;\n  undefined8 uStack_90;\n  undefined8 local_88;\n  undefined8 uStack_80;\n  undefined8 local_78;\n  undefined8 uStack_70;\n  undefined8 local_68;\n  undefined8 local_58;\n  undefined8 uStack_50;\n  undefined8 local_48;\n  undefined8 uStack_40;\n  undefined8 local_38;\n  undefined8 uStack_30;\n  undefined8 local_28;\n  long local_20;\n  \n  local_20 = *(long *)(in_FS_OFFSET + 0x28);\n  FUN_00106be0(&local_98);\n  puVar1 = &local_58;\n  local_58 = local_98;\n  uStack_50 = uStack_90;\n  local_48 = local_88;\n  uStack_40 = uStack_80;\n  local_38 = local_78;\n  uStack_30 = uStack_70;\n  local_28 = local_68;\n  FUN_00108770(puVar1,0x3a,1);\n  FUN_00108550(param_1,param_3,0xffffffffffffffff,puVar1);\n  if (local_20 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "0010282b": "\nvoid switchD_00108ec8::caseD_0(void)\n\n{\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n", 
    "00113038": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nchar * strcpy(char *__dest,char *__src)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "00103490": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nvoid FUN_00103490(undefined4 param_1)\n\n{\n  switch(param_1) {\n  case 0:\n    FUN_00103370();\n    break;\n  case 1:\n    FUN_001033b0();\n    break;\n  case 2:\n    FUN_001033d0();\n    break;\n  case 3:\n    FUN_001033f0();\n    break;\n  case 4:\n    FUN_00103420();\n    break;\n  default:\n    FUN_0010350c();\n    return;\n  }\n  return;\n}\n\n", 
    "00113158": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid * malloc(size_t __size)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "001027c0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint mbsinit(mbstate_t *__ps)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_mbsinit_00111fb0)();\n  return iVar1;\n}\n\n", 
    "001026a0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = (void *)(*(code *)PTR_malloc_00111f20)();\n  return pvVar1;\n}\n\n", 
    "001064a0": "\nbool FUN_001064a0(int param_1)\n\n{\n  return param_1 - 0x21U < 0x5e;\n}\n\n", 
    "00113040": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid __fpending(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "00113160": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint fflush(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "001031d0": "\nundefined4 FUN_001031d0(char param_1)\n\n{\n  undefined4 uVar1;\n  \n  uVar1 = 0;\n  if ((byte)(param_1 + 0xbbU) < 0x16) {\n    uVar1 = *(undefined4 *)(&DAT_0010b4a0 + (ulong)(byte)(param_1 + 0xbbU) * 4);\n  }\n  return uVar1;\n}\n\n", 
    "00109460": "\nvoid FUN_00109460(size_t param_1)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(param_1);\n  if ((pvVar1 == (void *)0x0) && (param_1 != 0)) {\n                    /* WARNING: Subroutine does not return */\n    FUN_00109680();\n  }\n  return;\n}\n\n", 
    "001032f0": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nvoid FUN_001032f0(uint param_1,undefined4 *param_2)\n\n{\n  bool bVar1;\n  undefined4 uVar2;\n  float10 in_ST0;\n  float10 in_ST1;\n  float10 in_ST2;\n  float10 in_ST3;\n  float10 in_ST4;\n  float10 in_ST5;\n  float10 fVar3;\n  float10 param_7;\n  \n  if ((_DAT_0010cd50 <= param_7) && (param_7 <= _DAT_0010cd60)) {\n    do {\n      fVar3 = in_ST5;\n      uVar2 = FUN_001032d0();\n      bVar1 = (float10)(ulong)param_1 <= in_ST0;\n      in_ST0 = in_ST1;\n      in_ST1 = in_ST2;\n      in_ST2 = in_ST3;\n      in_ST3 = in_ST4;\n      in_ST4 = in_ST5;\n      in_ST5 = fVar3;\n    } while (bVar1);\n    *param_2 = uVar2;\n    return;\n  }\n  *param_2 = 0;\n  return;\n}\n\n", 
    "001065c0": "\nvoid FUN_001065c0(undefined8 param_1)\n\n{\n  DAT_001121a8 = param_1;\n  return;\n}\n\n", 
    "001030b0": "\nvoid FUN_001030b0(undefined8 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  undefined8 unaff_retaddr;\n  undefined auStack_8 [8];\n  \n  (*(code *)PTR___libc_start_main_00111fd8)\n            (FUN_00102830,unaff_retaddr,&stack0x00000008,FUN_0010a230,FUN_0010a2a0,param_3,auStack_8\n            );\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n", 
    "001130e8": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid __libc_start_main(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "00102830": "\nundefined8 FUN_00102830(uint param_1,undefined8 *param_2)\n\n{\n  char cVar1;\n  int iVar2;\n  uint uVar3;\n  int iVar4;\n  char *pcVar5;\n  size_t sVar6;\n  long lVar7;\n  ulong uVar8;\n  __ssize_t _Var9;\n  undefined8 uVar10;\n  int *piVar11;\n  undefined8 uVar12;\n  uint uVar13;\n  long in_FS_OFFSET;\n  bool bVar14;\n  undefined auVar15 [16];\n  undefined8 uStack_48;\n  char *local_40;\n  size_t local_38;\n  long local_30;\n  \n  uVar8 = (ulong)param_1;\n  local_30 = *(long *)(in_FS_OFFSET + 0x28);\n  FUN_00106b20(*param_2);\n  pcVar5 = setlocale(6,\"\");\n  bindtextdomain(\"coreutils\",\"/usr/local/share/locale\");\n  textdomain(\"coreutils\");\n  DAT_00112118 = nl_langinfo(0x10000);\n  if ((DAT_00112118 == (char *)0x0) || (*DAT_00112118 == '\\0')) {\n    DAT_00112118 = \".\";\n  }\n  sVar6 = strlen(DAT_00112118);\n  DAT_00112114 = (undefined4)sVar6;\n  FUN_0010a2b0(FUN_001065e0);\n  iVar4 = DAT_00112014;\nLAB_001028e0:\n  while( true ) {\n    DAT_00112014 = iVar4;\n    iVar4 = (int)uVar8;\n    iVar2 = getopt_long(uVar8 & 0xffffffff,param_2,&DAT_0010b21a,&PTR_s_from_00111820,0);\n    if (iVar2 == -1) break;\n    if (0x8d < iVar2) {\nswitchD_0010292c_caseD_65:\n      FUN_00105500(1);\n      goto LAB_00102eef;\n    }\n    if (iVar2 < 100) {\n      if (iVar2 == -0x83) {\n        FUN_00109320(stdout,\"numfmt\",\"GNU coreutils\",PTR_DAT_00112040,\"Assaf Gordon\",0);\n                    /* WARNING: Subroutine does not return */\n        exit(0);\n      }\n      if (iVar2 != -0x82) goto switchD_0010292c_caseD_65;\n      FUN_00105500(0);\nLAB_00102c42:\n      DAT_00112128 = 1;\n      iVar4 = DAT_00112014;\n    }\n    else {\n      iVar4 = DAT_00112014;\n      switch(iVar2) {\n      case 100:\n        goto switchD_0010292c_caseD_64;\n      default:\n        goto switchD_0010292c_caseD_65;\n      case 0x7a:\n        DAT_00112010 = 0;\n        break;\n      case 0x80:\n        lVar7 = FUN_00106310(\"--from\",optarg,&PTR_DAT_00111b40,&DAT_0010b540,4);\n        DAT_00112188 = *(uint *)(&DAT_0010b540 + lVar7 * 4);\n        iVar4 = DAT_00112014;\n        break;\n      case 0x81:\n        DAT_00112030 = FUN_001038d0(optarg);\n        iVar4 = DAT_00112014;\n        break;\n      case 0x82:\n        lVar7 = FUN_00106310(&DAT_0010b225,optarg,&PTR_DAT_00111b00,&DAT_0010b530,4);\n        DAT_00112184 = *(uint *)(&DAT_0010b530 + lVar7 * 4);\n        iVar4 = DAT_00112014;\n        break;\n      case 0x83:\n        DAT_00112028 = FUN_001038d0(optarg);\n        iVar4 = DAT_00112014;\n        break;\n      case 0x84:\n        lVar7 = FUN_00106310(\"--round\",optarg,&PTR_DAT_00111ac0,&DAT_0010b510,4);\n        DAT_00112038 = *(undefined4 *)(&DAT_0010b510 + lVar7 * 4);\n        iVar4 = DAT_00112014;\n        break;\n      case 0x85:\n        DAT_00112178 = optarg;\n        break;\n      case 0x86:\n        DAT_00112170 = 1;\n        break;\n      case 0x87:\n        iVar4 = FUN_00109760(optarg,0,10,&DAT_00112158);\n        if ((iVar4 != 0) || (DAT_00112158 == 0)) goto LAB_00103072;\n        iVar4 = DAT_00112014;\n        if (DAT_00112158 < 0) {\n          DAT_00112018 = 0;\n          DAT_00112158 = -DAT_00112158;\n        }\n        break;\n      case 0x88:\n        if (DAT_00112300 != 0) goto LAB_0010304e;\n        FUN_00105b20(optarg,1);\n        iVar4 = DAT_00112014;\n        break;\n      case 0x8a:\n        DAT_00112110 = 1;\n      case 0x89:\n        DAT_00112120 = '\\x01';\n        break;\n      case 0x8b:\n        if (optarg == (char *)0x0) goto LAB_00102c42;\n        iVar4 = FUN_00109b40(optarg,0,10,&DAT_00112128);\n        if ((iVar4 != 0) || (iVar4 = DAT_00112014, DAT_00112128 == 0)) {\n          uVar8 = FUN_00108e10(optarg);\n          uVar10 = dcgettext(0,\"invalid header value %s\",5);\n          error(1,0,uVar10,uVar8);\n          goto switchD_0010292c_caseD_8c;\n        }\n        break;\n      case 0x8c:\nswitchD_0010292c_caseD_8c:\n        DAT_00112148 = optarg;\n        iVar4 = DAT_00112014;\n        break;\n      case 0x8d:\n        lVar7 = FUN_00106310(\"--invalid\",optarg,&PTR_s_abort_00111a80,&DAT_0010b500,4);\n        DAT_00112180 = *(int *)(&DAT_0010b500 + lVar7 * 4);\n        iVar4 = DAT_00112014;\n      }\n    }\n  }\n  if ((DAT_00112148 == (char *)0x0) || (DAT_00112170 == 0)) {\n    if ((DAT_00112120 != '\\0') && (pcVar5 == (char *)0x0)) {\n      uVar10 = dcgettext(0,\"failed to set locale\",5);\n      error(0,0,uVar10);\n    }\n    if ((DAT_00112120 == '\\0') || ((DAT_00112188 | DAT_00112184) != 0)) {\nLAB_00102cd8:\n      if (DAT_00112148 != (char *)0x0) goto LAB_00102ce4;\nLAB_00102ce9:\n      if (DAT_00112170 != 0) {\n        if (DAT_00112184 == 0) goto LAB_00102cff;\n        uVar10 = dcgettext(0,\"grouping cannot be combined with --to\",5);\n        error(1,0,uVar10);\n        goto LAB_00103006;\n      }\n    }\n    else if (DAT_00112170 == 0) {\n      if (DAT_00112158 == 0) {\n        if (DAT_00112148 == (char *)0x0) {\n          uVar10 = dcgettext(0,\"no conversion option specified\",5);\n          error(0,0,uVar10);\n          goto LAB_00102cd8;\n        }\nLAB_00102ce4:\n        FUN_00103b40();\n        goto LAB_00102ce9;\n      }\n      if (DAT_00112148 != (char *)0x0) goto LAB_00102ce4;\n    }\n    else {\n      if (DAT_00112148 != (char *)0x0) goto LAB_00102ce4;\nLAB_00102cff:\n      if ((DAT_00112120 != '\\0') && (pcVar5 = nl_langinfo(0x10001), *pcVar5 == '\\0')) {\n        uVar10 = dcgettext(0,\"grouping has no effect in this locale\",5);\n        error(0,0,uVar10);\n      }\n    }\n    FUN_00104030(DAT_00112158);\n    DAT_00112130 = 0;\n    if (DAT_00112158 == 0) {\n      DAT_00112130 = (uint)(DAT_00112014 == 0x80);\n    }\n    if (DAT_00112180 != 0) {\n      DAT_0011201c = 0;\n    }\n    if (iVar4 <= optind) {\n      local_40 = (char *)0x0;\n      local_38 = 0;\n      lVar7 = DAT_00112128 + -1;\n      bVar14 = DAT_00112128 != 0;\n      DAT_00112128 = lVar7;\n      if (bVar14) goto LAB_00102dc8;\n      goto LAB_00102de6;\n    }\n    if ((DAT_00112120 != '\\0') && (DAT_00112128 != 0)) {\n      uVar10 = dcgettext(0,\"--header ignored with command-line input\",5);\n      error(0,0,uVar10);\n      if (iVar4 <= optind) goto LAB_00102e62;\n    }\n    uVar13 = 1;\n    do {\n      uVar3 = FUN_00105430(param_2[optind],1);\n      uVar13 = uVar13 & uVar3;\n      optind = optind + 1;\n    } while (optind < iVar4);\n    goto LAB_00102e51;\n  }\nLAB_00103006:\n  uVar10 = dcgettext(0,\"--grouping cannot be combined with --format\",5);\n  error(1,0,uVar10);\n  goto LAB_0010302a;\nswitchD_0010292c_caseD_64:\n  cVar1 = *optarg;\n  iVar4 = (int)cVar1;\n  if ((cVar1 != '\\0') && (optarg[1] != '\\0')) {\nLAB_0010302a:\n    uVar10 = dcgettext(0,\"the delimiter must be a single character\",5);\n    error(1,0,uVar10);\nLAB_0010304e:\n    uVar10 = dcgettext(0,\"multiple field specifications\",5);\n    error(1,0,uVar10);\nLAB_00103072:\n    uVar10 = FUN_00108e10(optarg);\n    uVar12 = dcgettext(0,\"invalid padding value %s\",5);\n    auVar15 = error(1,0,uVar12,uVar10);\n    uVar10 = uStack_48;\n    uStack_48 = SUB168(auVar15,0);\n    (*(code *)PTR___libc_start_main_00111fd8)\n              (FUN_00102830,uVar10,&local_40,FUN_0010a230,FUN_0010a2a0,SUB168(auVar15 >> 0x40,0),\n               &uStack_48);\n    do {\n                    /* WARNING: Do nothing block with infinite loop */\n    } while( true );\n  }\n  goto LAB_001028e0;\n  while( true ) {\n    fputs_unlocked(local_40,stdout);\n    lVar7 = DAT_00112128 + -1;\n    bVar14 = DAT_00112128 == 0;\n    DAT_00112128 = lVar7;\n    if (bVar14) break;\nLAB_00102dc8:\n    _Var9 = getdelim(&local_40,&local_38,(uint)DAT_00112010,stdin);\n    if (_Var9 < 1) break;\n  }\nLAB_00102de6:\n  uVar13 = 1;\n  while (_Var9 = getdelim(&local_40,&local_38,(uint)DAT_00112010,stdin), 0 < _Var9) {\n    bVar14 = (int)local_40[_Var9 + -1] == (uint)DAT_00112010;\n    if (bVar14) {\n      local_40[_Var9 + -1] = '\\0';\n    }\n    uVar3 = FUN_00105430(local_40,bVar14);\n    uVar13 = uVar13 & uVar3;\n  }\n  iVar4 = ferror_unlocked(stdin);\n  if (iVar4 != 0) {\n    uVar10 = dcgettext(0,\"error reading input\",5);\n    piVar11 = __errno_location();\n    error(0,*piVar11,uVar10);\n  }\nLAB_00102e51:\n  if (DAT_00112120 == '\\0') {\n    if (uVar13 == 0) goto LAB_00102ecd;\n  }\n  else if (uVar13 == 0) {\nLAB_00102eef:\n    uVar10 = dcgettext(0,\"failed to convert some of the input numbers\",5);\n    error(0,0,uVar10);\nLAB_00102ecd:\n    if (1 < DAT_00112180 - 2U) {\n      uVar10 = 2;\n      goto LAB_00102e64;\n    }\n  }\nLAB_00102e62:\n  uVar10 = 0;\nLAB_00102e64:\n  if (local_30 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return uVar10;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "00102710": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid * mempcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = (void *)(*(code *)PTR_mempcpy_00111f58)();\n  return pvVar1;\n}\n\n", 
    "001130b0": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nchar * strrchr(char *__s,int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "00106710": "\nulong FUN_00106710(wchar_t *param_1,ulong param_2)\n\n{\n  int iVar1;\n  ulong uVar2;\n  wchar_t __c;\n  ulong uVar3;\n  \n  __c = *param_1;\n  if (__c == L'\\0') {\n    uVar3 = 0;\n  }\n  else {\n    uVar3 = 0;\n    do {\n      iVar1 = wcwidth(__c);\n      if (iVar1 == -1) {\n        *param_1 = L'\ufffd';\n        uVar2 = uVar3 + 1;\n      }\n      else {\n        uVar2 = (long)iVar1 + uVar3;\n      }\n      if (param_2 < uVar2) break;\n      __c = param_1[1];\n      param_1 = param_1 + 1;\n      uVar3 = uVar2;\n    } while (__c != L'\\0');\n  }\n  *param_1 = L'\\0';\n  return uVar3;\n}\n\n", 
    "00105500": "\nvoid FUN_00105500(int param_1)\n\n{\n  FILE *pFVar1;\n  undefined8 uVar2;\n  undefined8 uVar3;\n  char *pcVar4;\n  \n  uVar2 = DAT_001121b0;\n  if (param_1 == 0) {\n    uVar3 = dcgettext(0,\"Usage: %s [OPTION]... [NUMBER]...\\n\",5);\n    __printf_chk(1,uVar3,uVar2);\n    pFVar1 = stdout;\n    pcVar4 = (char *)dcgettext(0,\n                               \"Reformat NUMBER(s), or the numbers from standard input if none are specified.\\n\"\n                               ,5);\n    fputs_unlocked(pcVar4,pFVar1);\n    FUN_001035e0();\n    pFVar1 = stdout;\n    pcVar4 = (char *)dcgettext(0,\"      --debug          print warnings about invalid input\\n\",5);\n    fputs_unlocked(pcVar4,pFVar1);\n    pFVar1 = stdout;\n    pcVar4 = (char *)dcgettext(0,\n                               \"  -d, --delimiter=X    use X instead of whitespace for field delimiter\\n\"\n                               ,5);\n    fputs_unlocked(pcVar4,pFVar1);\n    pFVar1 = stdout;\n    pcVar4 = (char *)dcgettext(0,\n                               \"      --field=FIELDS   replace the numbers in these input fields (default=1)\\n                         see FIELDS below\\n\"\n                               ,5);\n    fputs_unlocked(pcVar4,pFVar1);\n    pFVar1 = stdout;\n    pcVar4 = (char *)dcgettext(0,\n                               \"      --format=FORMAT  use printf style floating-point FORMAT;\\n                         see FORMAT below for details\\n\"\n                               ,5);\n    fputs_unlocked(pcVar4,pFVar1);\n    pFVar1 = stdout;\n    pcVar4 = (char *)dcgettext(0,\n                               \"      --from=UNIT      auto-scale input numbers to UNITs; default is \\'none\\';\\n                         see UNIT below\\n\"\n                               ,5);\n    fputs_unlocked(pcVar4,pFVar1);\n    pFVar1 = stdout;\n    pcVar4 = (char *)dcgettext(0,\n                               \"      --from-unit=N    specify the input unit size (instead of the default 1)\\n\"\n                               ,5);\n    fputs_unlocked(pcVar4,pFVar1);\n    pFVar1 = stdout;\n    pcVar4 = (char *)dcgettext(0,\n                               \"      --grouping       use locale-defined grouping of digits, e.g. 1,000,000\\n                         (which means it has no effect in the C/POSIX locale)\\n\"\n                               ,5);\n    fputs_unlocked(pcVar4,pFVar1);\n    pFVar1 = stdout;\n    pcVar4 = (char *)dcgettext(0,\n                               \"      --header[=N]     print (without converting) the first N header lines;\\n                         N defaults to 1 if not specified\\n\"\n                               ,5);\n    fputs_unlocked(pcVar4,pFVar1);\n    pFVar1 = stdout;\n    pcVar4 = (char *)dcgettext(0,\n                               \"      --invalid=MODE   failure mode for invalid numbers: MODE can be:\\n                         abort (default), fail, warn, ignore\\n\"\n                               ,5);\n    fputs_unlocked(pcVar4,pFVar1);\n    pFVar1 = stdout;\n    pcVar4 = (char *)dcgettext(0,\n                               \"      --padding=N      pad the output to N characters; positive N will\\n                         right-align; negative N will left-align;\\n                         padding is ignored if the output is wider than N;\\n                         the default is to automatically pad if a whitespace\\n                         is found\\n\"\n                               ,5);\n    fputs_unlocked(pcVar4,pFVar1);\n    pFVar1 = stdout;\n    pcVar4 = (char *)dcgettext(0,\n                               \"      --round=METHOD   use METHOD for rounding when scaling; METHOD can be:\\n                         up, down, from-zero (default), towards-zero, nearest\\n\"\n                               ,5);\n    fputs_unlocked(pcVar4,pFVar1);\n    pFVar1 = stdout;\n    pcVar4 = (char *)dcgettext(0,\n                               \"      --suffix=SUFFIX  add SUFFIX to output numbers, and accept optional\\n                         SUFFIX in input numbers\\n\"\n                               ,5);\n    fputs_unlocked(pcVar4,pFVar1);\n    pFVar1 = stdout;\n    pcVar4 = (char *)dcgettext(0,\n                               \"      --to=UNIT        auto-scale output numbers to UNITs; see UNIT below\\n\"\n                               ,5);\n    fputs_unlocked(pcVar4,pFVar1);\n    pFVar1 = stdout;\n    pcVar4 = (char *)dcgettext(0,\n                               \"      --to-unit=N      the output unit size (instead of the default 1)\\n\"\n                               ,5);\n    fputs_unlocked(pcVar4,pFVar1);\n    pFVar1 = stdout;\n    pcVar4 = (char *)dcgettext(0,\"  -z, --zero-terminated    line delimiter is NUL, not newline\\n\",5\n                              );\n    fputs_unlocked(pcVar4,pFVar1);\n    pFVar1 = stdout;\n    pcVar4 = (char *)dcgettext(0,\"      --help     display this help and exit\\n\",5);\n    fputs_unlocked(pcVar4,pFVar1);\n    pFVar1 = stdout;\n    pcVar4 = (char *)dcgettext(0,\"      --version  output version information and exit\\n\",5);\n    fputs_unlocked(pcVar4,pFVar1);\n    pFVar1 = stdout;\n    pcVar4 = (char *)dcgettext(0,\"\\nUNIT options:\\n\",5);\n    fputs_unlocked(pcVar4,pFVar1);\n    pFVar1 = stdout;\n    pcVar4 = (char *)dcgettext(0,\n                               \"  none       no auto-scaling is done; suffixes will trigger an error\\n\"\n                               ,5);\n    fputs_unlocked(pcVar4,pFVar1);\n    pFVar1 = stdout;\n    pcVar4 = (char *)dcgettext(0,\n                               \"  auto       accept optional single/two letter suffix:\\n               1K = 1000,\\n               1Ki = 1024,\\n               1M = 1000000,\\n               1Mi = 1048576,\\n\"\n                               ,5);\n    fputs_unlocked(pcVar4,pFVar1);\n    pFVar1 = stdout;\n    pcVar4 = (char *)dcgettext(0,\n                               \"  si         accept optional single letter suffix:\\n               1K = 1000,\\n               1M = 1000000,\\n               ...\\n\"\n                               ,5);\n    fputs_unlocked(pcVar4,pFVar1);\n    pFVar1 = stdout;\n    pcVar4 = (char *)dcgettext(0,\n                               \"  iec        accept optional single letter suffix:\\n               1K = 1024,\\n               1M = 1048576,\\n               ...\\n\"\n                               ,5);\n    fputs_unlocked(pcVar4,pFVar1);\n    pFVar1 = stdout;\n    pcVar4 = (char *)dcgettext(0,\n                               \"  iec-i      accept optional two-letter suffix:\\n               1Ki = 1024,\\n               1Mi = 1048576,\\n               ...\\n\"\n                               ,5);\n    fputs_unlocked(pcVar4,pFVar1);\n    pFVar1 = stdout;\n    pcVar4 = (char *)dcgettext(0,\n                               \"\\nFIELDS supports cut(1) style field ranges:\\n  N    N\\'th field, counted from 1\\n  N-   from N\\'th field, to end of line\\n  N-M  from N\\'th to M\\'th field (inclusive)\\n  -M   from first to M\\'th field (inclusive)\\n  -    all fields\\nMultiple fields/ranges can be separated with commas\\n\"\n                               ,5);\n    fputs_unlocked(pcVar4,pFVar1);\n    pFVar1 = stdout;\n    pcVar4 = (char *)dcgettext(0,\n                               \"\\nFORMAT must be suitable for printing one floating-point argument \\'%f\\'.\\nOptional quote (%\\'f) will enable --grouping (if supported by current locale).\\nOptional width value (%10f) will pad output. Optional zero (%010f) width\\nwill zero pad the number. Optional negative values (%-10f) will left align.\\nOptional precision (%.1f) will override the input determined precision.\\n\"\n                               ,5);\n    fputs_unlocked(pcVar4,pFVar1);\n    uVar2 = DAT_001121b0;\n    uVar3 = dcgettext(0,\n                      \"\\nExit status is 0 if all input numbers were successfully converted.\\nBy default, %s will stop at the first conversion error with exit status 2.\\nWith --invalid=\\'fail\\' a warning is printed for each conversion error\\nand the exit status is 2.  With --invalid=\\'warn\\' each conversion error is\\ndiagnosed, but the exit status is 0.  With --invalid=\\'ignore\\' conversion\\nerrors are not diagnosed and the exit status is 0.\\n\"\n                      ,5);\n    __printf_chk(1,uVar3,uVar2);\n    uVar2 = DAT_001121b0;\n    uVar3 = dcgettext(0,\n                      \"\\nExamples:\\n  $ %s --to=si 1000\\n            -> \\\"1.0K\\\"\\n  $ %s --to=iec 2048\\n           -> \\\"2.0K\\\"\\n  $ %s --to=iec-i 4096\\n           -> \\\"4.0Ki\\\"\\n  $ echo 1K | %s --from=si\\n           -> \\\"1000\\\"\\n  $ echo 1K | %s --from=iec\\n           -> \\\"1024\\\"\\n  $ df -B1 | %s --header --field 2-4 --to=si\\n  $ ls -l  | %s --header --field 5 --to=iec\\n  $ ls -lh | %s --header --field 5 --from=iec --padding=10\\n  $ ls -lh | %s --header --field 5 --from=iec --format %%10f\\n\"\n                      ,5);\n    __printf_chk(1,uVar3,uVar2,uVar2,uVar2,uVar2,uVar2,uVar2,uVar2,uVar2,uVar2,uVar3);\n    FUN_001047d0();\n  }\n  else {\n    uVar3 = dcgettext(0,\"Try \\'%s --help\\' for more information.\\n\",5);\n    __fprintf_chk(stderr,1,uVar3,uVar2);\n  }\n                    /* WARNING: Subroutine does not return */\n  exit(param_1);\n}\n\n", 
    "001131d0": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "00102590": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\n\n{\n  (*(code *)PTR___assert_fail_00111e98)();\n  return;\n}\n\n", 
    "001095f0": "\nvoid FUN_001095f0(size_t param_1,ulong param_2)\n\n{\n  void *pvVar1;\n  \n  if ((-1 < SUB168(ZEXT816(param_1) * ZEXT816(param_2),0)) &&\n     (SUB168(ZEXT816(param_1) * ZEXT816(param_2) >> 0x40,0) == 0)) {\n    pvVar1 = calloc(param_1,param_2);\n    if (pvVar1 != (void *)0x0) {\n      return;\n    }\n  }\n                    /* WARNING: Subroutine does not return */\n  FUN_00109680();\n}\n\n", 
    "00102470": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid _exit(int __status)\n\n{\n  (*(code *)PTR__exit_00111e08)();\n  return;\n}\n\n", 
    "00106390": "\nlong FUN_00106390(void *param_1,long *param_2,void *param_3,size_t param_4)\n\n{\n  int iVar1;\n  long lVar2;\n  \n  lVar2 = *param_2;\n  if (lVar2 != 0) {\n    param_2 = param_2 + 1;\n    do {\n      iVar1 = memcmp(param_1,param_3,param_4);\n      if (iVar1 == 0) {\n        return lVar2;\n      }\n      lVar2 = *param_2;\n      param_3 = (void *)((long)param_3 + param_4);\n      param_2 = param_2 + 1;\n    } while (lVar2 != 0);\n  }\n  return lVar2;\n}\n\n", 
    "00113008": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid free(void *__ptr)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "00113128": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "001032a0": "\nvoid FUN_001032a0(int param_1)\n\n{\n  if (param_1 == 0) {\n    return;\n  }\n  param_1 = param_1 + -1;\n  if (param_1 != 0) {\n    do {\n      param_1 = param_1 + -1;\n    } while (param_1 != 0);\n    return;\n  }\n  return;\n}\n\n", 
    "00113130": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "00108df0": "\nvoid FUN_00108df0(undefined8 param_1,undefined8 param_2)\n\n{\n  FUN_00108de0(0,param_1,param_2);\n  return;\n}\n\n", 
    "00113010": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid abort(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "001130b8": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "001131d8": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid __fprintf_chk(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "00105a60": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nvoid FUN_00105a60(void)\n\n{\n  ulong *__ptr;\n  ulong uVar1;\n  ulong *puVar2;\n  \n  uVar1 = DAT_00112300;\n  __ptr = DAT_001122f8;\n  DAT_001122f8 = (ulong *)0x0;\n  DAT_00112300 = 0;\n  _DAT_00112198 = 0;\n  if (1 < *__ptr) {\n    FUN_001059c0(1,*__ptr - 1);\n  }\n  if (1 < uVar1) {\n    puVar2 = __ptr + 2;\n    do {\n      if (puVar2[-1] + 1 != *puVar2) {\n        FUN_001059c0(puVar2[-1] + 1,*puVar2 - 1);\n      }\n      puVar2 = puVar2 + 2;\n    } while (__ptr + uVar1 * 2 != puVar2);\n  }\n  if (__ptr[uVar1 * 2 + -1] != 0xffffffffffffffff) {\n    FUN_001059c0(__ptr[uVar1 * 2 + -1] + 1,0xffffffffffffffff);\n  }\n  free(__ptr);\n  return;\n}\n\n", 
    "001130c0": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "001131e0": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid __strncat_chk(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "00104520": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nbool FUN_00104520(char *param_1,float10 *param_2,undefined8 param_3,long param_4)\n\n{\n  byte bVar1;\n  int iVar2;\n  uint uVar3;\n  size_t sVar4;\n  size_t sVar5;\n  undefined8 uVar6;\n  undefined8 uVar7;\n  long extraout_RDX;\n  char cVar8;\n  char *pcVar9;\n  long in_FS_OFFSET;\n  float10 fVar10;\n  float10 fVar11;\n  float10 local_58 [2];\n  long local_40;\n  \n  pcVar9 = DAT_00112178;\n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  if (DAT_00112178 != (char *)0x0) {\n    sVar4 = strlen(param_1);\n    sVar5 = strlen(pcVar9);\n    if (sVar5 < sVar4) {\n      iVar2 = strcmp(pcVar9,param_1 + (sVar4 - sVar5));\n      cVar8 = DAT_00112110;\n      if (iVar2 == 0) {\n        param_1[sVar4 - sVar5] = '\\0';\n        if (cVar8 != '\\0') {\n          uVar6 = FUN_00108e10(pcVar9);\n          __fprintf_chk(stderr,1,\"trimming suffix %s\\n\",uVar6);\n        }\n      }\n      else if (DAT_00112110 != '\\0') {\n        fwrite(\"no valid suffix found\\n\",1,0x16,stderr);\n      }\n    }\n  }\n  cVar8 = *param_1;\n  pcVar9 = param_1;\n  if (cVar8 == '\\0') {\n    iVar2 = 0;\n  }\n  else {\n    __ctype_b_loc();\n    do {\n      bVar1 = FUN_001031a0((int)cVar8);\n      if ((*(byte *)(extraout_RDX + (ulong)bVar1 * 2) & 1) == 0) break;\n      cVar8 = pcVar9[1];\n      pcVar9 = pcVar9 + 1;\n    } while (cVar8 != '\\0');\n    iVar2 = (int)param_1 - (int)pcVar9;\n  }\n  if (DAT_00112130 != 0) {\n    if ((iVar2 == 0) && (param_4 < 2)) {\n      DAT_00112158 = 0;\n    }\n    else {\n      DAT_00112158 = strlen(param_1);\n      FUN_00104030(DAT_00112158);\n    }\n    if (DAT_00112110 != '\\0') {\n      __fprintf_chk(stderr,1,\"setting Auto-Padding to %ld characters\\n\",DAT_00112158);\n    }\n  }\n  local_58[0] = (float10)0;\n  uVar3 = FUN_00104430(pcVar9,local_58,param_3);\n  if ((uVar3 == 1) && (DAT_00112120 != '\\0')) {\n    uVar6 = FUN_00108e10(pcVar9);\n    uVar7 = dcgettext(0,\"large input value %s: possible precision loss\",5);\n    error(0,0,uVar7,uVar6);\n  }\n  if ((DAT_00112030 != 1) || (fVar10 = local_58[0], DAT_00112028 != 1)) {\n    fVar10 = (float10)DAT_00112030;\n    if (DAT_00112030 < 0) {\n      fVar10 = fVar10 + (float10)_DAT_0010cd88;\n    }\n    fVar11 = (float10)DAT_00112028;\n    if (DAT_00112028 < 0) {\n      fVar11 = fVar11 + (float10)_DAT_0010cd88;\n    }\n    fVar10 = (fVar10 * local_58[0]) / fVar11;\n  }\n  *param_2 = fVar10;\n  if (local_40 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return uVar3 < 2;\n}\n\n", 
    "00103670": "\nundefined4 FUN_00103670(char *param_1,char **param_2,float10 *param_3,undefined8 param_4)\n\n{\n  char cVar1;\n  char cVar2;\n  int iVar3;\n  char cVar4;\n  uint uVar5;\n  bool bVar6;\n  float10 fVar7;\n  float10 fVar8;\n  undefined4 local_48;\n  \n  bVar6 = *param_1 == '-';\n  if (bVar6) {\n    param_1 = param_1 + 1;\n  }\n  fVar8 = (float10)0;\n  uVar5 = 0;\n  local_48 = 0;\n  *(bool *)param_4 = bVar6;\n  *param_2 = param_1;\n  cVar4 = '\\0';\n  do {\n    cVar1 = *param_1;\n    cVar2 = FUN_00106490((int)cVar1);\n    if (cVar2 == '\\0') {\n      if ((cVar4 == '\\0') && (iVar3 = strncmp(param_1,DAT_00112118,(long)DAT_00112114), iVar3 != 0))\n      {\n        local_48 = 3;\n      }\n      else {\n        if (bVar6) {\n          fVar8 = -fVar8;\n        }\n        *param_3 = fVar8;\n      }\n      return local_48;\n    }\n    iVar3 = cVar1 + -0x30;\n    if (((float10)0 != fVar8) || (iVar3 != 0)) {\n      uVar5 = uVar5 + 1;\n    }\n    if (0x12 < uVar5) {\n      if (0x1b < uVar5) {\n        return 2;\n      }\n      local_48 = 1;\n    }\n    fVar7 = (float10)DAT_0010cd84;\n    param_1 = param_1 + 1;\n    *param_2 = param_1;\n    fVar8 = (float10)iVar3 + fVar7 * fVar8;\n    cVar4 = cVar2;\n  } while( true );\n}\n\n", 
    "00102580": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = (*(code *)PTR_lseek_00111e90)();\n  return _Var1;\n}\n\n", 
    "00109f60": "\nint FUN_00109f60(undefined *param_1,undefined *param_2)\n\n{\n  byte bVar1;\n  byte bVar2;\n  int iVar3;\n  \n  iVar3 = 0;\n  if (param_1 != param_2) {\n    do {\n      bVar1 = FUN_00106580(*param_1);\n      bVar2 = FUN_00106580(*param_2);\n      if (bVar1 == 0) break;\n      param_1 = param_1 + 1;\n      param_2 = param_2 + 1;\n    } while (bVar1 == bVar2);\n    iVar3 = (uint)bVar1 - (uint)bVar2;\n  }\n  return iVar3;\n}\n\n", 
    "00102460": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint strncmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_strncmp_00111e00)();\n  return iVar1;\n}\n\n", 
    "00108c30": "\nvoid FUN_00108c30(undefined8 param_1)\n\n{\n  FUN_00108c10(param_1,0x3a);\n  return;\n}\n\n", 
    "00113138": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint putchar_unlocked(int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "00106020": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nvoid FUN_00106020(void)\n\n{\n  DAT_00112300 = 0;\n  _DAT_00112198 = 0;\n  free(DAT_001122f8);\n  DAT_001122f8 = (void *)0x0;\n  return;\n}\n\n", 
    "00113018": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint * __errno_location(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "001033b0": "\nlong FUN_001033b0(void)\n\n{\n  long lVar1;\n  \n  lVar1 = FUN_00103370();\n  return -lVar1;\n}\n\n", 
    "00113020": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint strncmp(char *__s1,char *__s2,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "00113140": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint fileno(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "00109680": "\nvoid FUN_00109680(void)\n\n{\n  undefined8 uVar1;\n  \n  uVar1 = dcgettext(0,\"memory exhausted\",5);\n  error(DAT_00112050,0,&DAT_0010cf7b,uVar1);\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n", 
    "00109320": "\nvoid FUN_00109320(void)\n\n{\n  long lVar1;\n  long in_FS_OFFSET;\n  \n  lVar1 = *(long *)(in_FS_OFFSET + 0x28);\n  FUN_00109290();\n  if (lVar1 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "001071b0": "\nundefined8\nFUN_001071b0(byte *param_1,undefined8 param_2,byte param_3,char param_4,char param_5,char param_6,\n            char param_7,char param_8,char param_9)\n\n{\n  char cVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  \n  cVar1 = FUN_00106540((int)(char)param_3);\n  bVar2 = *param_1;\n  if (cVar1 != '\\0') {\n    bVar2 = bVar2 & 0xdf;\n  }\n  uVar3 = 0;\n  if (bVar2 == param_3) {\n    uVar3 = FUN_001070c0(param_1,param_2,(int)param_4,(int)param_5,(int)param_6,(int)param_7,\n                         (int)param_8,(int)param_9,0,0);\n  }\n  return uVar3;\n}\n\n", 
    "001130c8": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid * memset(void *__s,int __c,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "0010a170": "\nvoid FUN_0010a170(FILE *param_1)\n\n{\n  int iVar1;\n  \n  if (param_1 != (FILE *)0x0) {\n    iVar1 = __freading();\n    if (iVar1 != 0) {\n      FUN_0010a150(param_1);\n      fflush(param_1);\n      return;\n    }\n  }\n  fflush(param_1);\n  return;\n}\n\n", 
    "001131e8": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid _ITM_registerTMCloneTable(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "00104430": "\nuint FUN_00104430(undefined8 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  uint uVar1;\n  undefined8 uVar2;\n  undefined8 uVar3;\n  undefined8 uVar4;\n  long in_FS_OFFSET;\n  char *local_38;\n  long local_30;\n  \n  local_30 = *(long *)(in_FS_OFFSET + 0x28);\n  local_38 = (char *)0x0;\n  uVar1 = FUN_00104160(param_1,&local_38,param_2,param_3,DAT_00112188);\n  if (uVar1 < 2) {\n    if (((local_38 != (char *)0x0) && (*local_38 != '\\0')) && (uVar1 = 5, DAT_00112180 != 3)) {\n      uVar2 = FUN_00108e00(1);\n      uVar3 = FUN_00108e00(0,param_1);\n      uVar4 = dcgettext(0,\"invalid suffix in input %s: %s\",5);\n      error(DAT_0011201c,0,uVar4,uVar3,uVar2);\n    }\n  }\n  else {\n    FUN_001040a0(uVar1,param_1);\n  }\n  if (local_30 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return uVar1;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "00102490": "\nvoid __fpending(void)\n\n{\n  (*(code *)PTR___fpending_00111e18)();\n  return;\n}\n\n", 
    "001095d0": "\nvoid FUN_001095d0(size_t param_1)\n\n{\n  void *__s;\n  \n  __s = (void *)FUN_00109460();\n  memset(__s,0,param_1);\n  return;\n}\n\n", 
    "001131b0": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nuintmax_t strtoumax(char *__nptr,char **__endptr,int __base)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "001094b0": "\nvoid thunk_FUN_00109460(void)\n\n{\n  FUN_00109460();\n  return;\n}\n\n", 
    "00107260": "\nchar * FUN_00107260(char *param_1,int param_2)\n\n{\n  int iVar1;\n  char *pcVar2;\n  undefined8 uVar3;\n  \n  pcVar2 = (char *)dcgettext(0,param_1,5);\n  if (param_1 == pcVar2) {\n    uVar3 = FUN_0010a080();\n    iVar1 = FUN_001071b0(uVar3,\"UTF-8\",0x55,0x54,0x46,0x2d,0x38,0,0);\n    if (iVar1 == 0) {\n      iVar1 = FUN_001071b0(uVar3,\"GB18030\",0x47,0x42,0x31,0x38,0x30,0x33,0x30);\n      if (iVar1 == 0) {\n        pcVar2 = \"\\\"\";\n        if (param_2 != 9) {\n          pcVar2 = \"\\'\";\n        }\n        return pcVar2;\n      }\n      if (*pcVar2 == '`') {\n        pcVar2 = &DAT_0010cfe1;\n      }\n      else {\n        pcVar2 = &DAT_0010cfde;\n      }\n    }\n    else if (*pcVar2 == '`') {\n      pcVar2 = &DAT_0010cfe5;\n    }\n    else {\n      pcVar2 = &DAT_0010cfda;\n    }\n  }\n  return pcVar2;\n}\n\n", 
    "00113108": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid * calloc(size_t __nmemb,size_t __size)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "001031a0": "\nundefined4 FUN_001031a0(undefined4 param_1)\n\n{\n  return param_1;\n}\n\n", 
    "00113110": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint strcmp(char *__s1,char *__s2)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "00109530": "\nvoid FUN_00109530(long param_1,ulong *param_2,ulong param_3)\n\n{\n  undefined auVar1 [16];\n  ulong uVar2;\n  ulong uVar3;\n  \n  uVar3 = *param_2;\n  if (param_1 == 0) {\n    if (uVar3 == 0) {\n      uVar3 = (ulong)(0x80 < param_3) +\n              SUB168((ZEXT816(0) << 0x40 | ZEXT816(0x80)) / ZEXT816(param_3),0);\n    }\n    uVar2 = (ulong)(SUB168(ZEXT816(uVar3) * ZEXT816(param_3) >> 0x40,0) != 0);\n    if ((SUB168(ZEXT816(uVar3) * ZEXT816(param_3),0) < 0) || (uVar2 != 0)) goto LAB_0010958b;\n  }\n  else {\n    auVar1 = ZEXT816(0) << 0x40 | ZEXT816(0x5555555555555554);\n    uVar2 = SUB168(auVar1 % ZEXT816(param_3),0);\n    if (SUB168(auVar1 / ZEXT816(param_3),0) <= uVar3) {\nLAB_0010958b:\n                    /* WARNING: Subroutine does not return */\n      FUN_00109680(param_1,uVar3,uVar2);\n    }\n    uVar3 = (uVar3 >> 1) + 1 + uVar3;\n  }\n  *param_2 = uVar3;\n  FUN_001094c0(param_1,uVar3 * param_3);\n  return;\n}\n\n", 
    "00102800": "\nvoid switchD_001034e3::caseD_5(void)\n\n{\n  FUN_0010350c();\n  return;\n}\n\n", 
    "001070c0": "\nundefined8\nFUN_001070c0(long param_1,undefined8 param_2,byte param_3,char param_4,char param_5,char param_6,\n            char param_7)\n\n{\n  char cVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  \n  cVar1 = FUN_00106540((int)(char)param_3);\n  bVar2 = *(byte *)(param_1 + 1);\n  if (cVar1 != '\\0') {\n    bVar2 = bVar2 & 0xdf;\n  }\n  if (param_3 != bVar2) {\n    return 0;\n  }\n  if (param_3 == 0) {\n    return 1;\n  }\n  uVar3 = FUN_00106ff0(param_1,param_2,(int)param_4,(int)param_5,(int)param_6,(int)param_7);\n  return uVar3;\n}\n\n", 
    "001131b8": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid __cxa_atexit(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "001131c0": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nsize_t wcstombs(char *__s,wchar_t *__pwcs,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "00102000": "\nvoid __DT_INIT(void)\n\n{\n  if (PTR___gmon_start___00111fe0 != (undefined *)0x0) {\n    (*(code *)PTR___gmon_start___00111fe0)();\n  }\n  return;\n}\n\n", 
    "00102480": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nchar * strcpy(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = (char *)(*(code *)PTR_strcpy_00111e10)();\n  return pcVar1;\n}\n\n", 
    "001094c0": "\nvoid * FUN_001094c0(void *param_1,size_t param_2)\n\n{\n  void *pvVar1;\n  \n  if ((param_2 == 0) && (param_1 != (void *)0x0)) {\n    free(param_1);\n    return (void *)0x0;\n  }\n  pvVar1 = realloc(param_1,param_2);\n  if ((pvVar1 == (void *)0x0) && (param_2 != 0)) {\n                    /* WARNING: Subroutine does not return */\n    FUN_00109680();\n  }\n  return pvVar1;\n}\n\n", 
    "001130a0": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nsize_t mbrtowc(wchar_t *__pwc,char *__s,size_t __n,mbstate_t *__p)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "00108c10": "\nvoid FUN_00108c10(undefined8 param_1,char param_2)\n\n{\n  FUN_00108b80(param_1,0xffffffffffffffff,(int)param_2);\n  return;\n}\n\n", 
    "00113118": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint fputc_unlocked(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "001033d0": "\nvoid FUN_001033d0(void)\n\n{\n  float10 param_7;\n  \n  if ((float10)0 <= param_7) {\n    FUN_00103370();\n    return;\n  }\n  FUN_001033b0();\n  return;\n}\n\n", 
    "00108de0": "\nvoid FUN_00108de0(void)\n\n{\n  FUN_00108550();\n  return;\n}\n\n", 
    "00109660": "\nvoid FUN_00109660(char *param_1)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(param_1);\n  FUN_00109630(param_1,sVar1 + 1);\n  return;\n}\n\n", 
    "00113000": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid __snprintf_chk(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "00109ed0": "\nsize_t FUN_00109ed0(wchar_t *param_1,byte *param_2,size_t param_3,mbstate_t *param_4)\n\n{\n  char cVar1;\n  size_t sVar2;\n  long in_FS_OFFSET;\n  wchar_t local_34;\n  long local_30;\n  \n  local_30 = *(long *)(in_FS_OFFSET + 0x28);\n  if (param_1 == (wchar_t *)0x0) {\n    param_1 = &local_34;\n  }\n  sVar2 = mbrtowc(param_1,(char *)param_2,param_3,param_4);\n  if ((0xfffffffffffffffd < sVar2) && (param_3 != 0)) {\n    cVar1 = FUN_0010a030(0);\n    if (cVar1 == '\\0') {\n      sVar2 = 1;\n      *param_1 = (uint)*param_2;\n    }\n  }\n  if (local_30 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return sVar2;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "00113120": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid __gmon_start__(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "0010a150": "\nvoid FUN_0010a150(uint *param_1)\n\n{\n  if ((*param_1 & 0x100) == 0) {\n    return;\n  }\n  FUN_0010a1b0(param_1,0,1);\n  return;\n}\n\n", 
    "001131c8": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid exit(int __status)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "0010a030": "\nbool FUN_0010a030(int param_1)\n\n{\n  byte *pbVar1;\n  long lVar2;\n  byte *pbVar3;\n  bool bVar4;\n  bool bVar5;\n  byte bVar6;\n  \n  bVar6 = 0;\n  pbVar1 = (byte *)setlocale(param_1,(char *)0x0);\n  bVar4 = true;\n  if (pbVar1 != (byte *)0x0) {\n    bVar4 = *pbVar1 < 0x43;\n    bVar5 = *pbVar1 == 0x43;\n    if (bVar5) {\n      bVar4 = false;\n      bVar5 = pbVar1[1] == 0;\n      if (bVar5) {\n        return false;\n      }\n    }\n    lVar2 = 6;\n    pbVar3 = (byte *)\"POSIX\";\n    do {\n      if (lVar2 == 0) break;\n      lVar2 = lVar2 + -1;\n      bVar4 = *pbVar1 < *pbVar3;\n      bVar5 = *pbVar1 == *pbVar3;\n      pbVar1 = pbVar1 + (ulong)bVar6 * -2 + 1;\n      pbVar3 = pbVar3 + (ulong)bVar6 * -2 + 1;\n    } while (bVar5);\n    bVar4 = (!bVar4 && !bVar5) != bVar4;\n  }\n  return bVar4;\n}\n\n", 
    "001130a8": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nchar * strchr(char *__s,int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "00102670": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint fileno(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_fileno_00111f08)();\n  return iVar1;\n}\n\n", 
    "00102550": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nsize_t mbrtowc(wchar_t *__pwc,char *__s,size_t __n,mbstate_t *__p)\n\n{\n  size_t sVar1;\n  \n  sVar1 = (*(code *)PTR_mbrtowc_00111e78)();\n  return sVar1;\n}\n\n", 
    "00102430": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid free(void *__ptr)\n\n{\n  (*(code *)PTR_free_00111de8)();\n  return;\n}\n\n", 
    "00102790": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = (*(code *)PTR_fwrite_00111f98)();\n  return sVar1;\n}\n\n", 
    "00106470": "\nulong FUN_00106470(uint param_1)\n\n{\n  ulong in_RAX;\n  \n  if ((int)param_1 < 0x20) {\n    return (ulong)(~param_1 >> 0x1f);\n  }\n  return in_RAX & 0xffffffffffffff00 | (ulong)(param_1 == 0x7f);\n}\n\n", 
    "00108770": "\nuint FUN_00108770(undefined *param_1,byte param_2,uint param_3)\n\n{\n  uint uVar1;\n  uint uVar2;\n  \n  if (param_1 == (undefined *)0x0) {\n    param_1 = &DAT_001122c0;\n  }\n  uVar1 = *(uint *)(param_1 + (ulong)(param_2 >> 5) * 4 + 8);\n  uVar2 = uVar1 >> (param_2 & 0x1f);\n  *(uint *)(param_1 + (ulong)(param_2 >> 5) * 4 + 8) =\n       ((param_3 ^ uVar2) & 1) << (param_2 & 0x1f) ^ uVar1;\n  return uVar2 & 1;\n}\n\n", 
    "0010350c": "\nvoid FUN_0010350c(void)\n\n{\n  return;\n}\n\n", 
    "00108890": "\nundefined8 FUN_00108890(undefined8 param_1,undefined8 param_2,long *param_3,undefined4 *param_4)\n\n{\n  int iVar1;\n  int *piVar2;\n  long lVar3;\n  undefined8 uVar4;\n  uint uVar5;\n  \n  if (param_4 == (undefined4 *)0x0) {\n    param_4 = (undefined4 *)&DAT_001122c0;\n  }\n  piVar2 = __errno_location();\n  iVar1 = *piVar2;\n  uVar5 = (uint)(param_3 == (long *)0x0) | param_4[1];\n  lVar3 = FUN_00107390(0,0,param_1,param_2,*param_4,uVar5,param_4 + 2,*(undefined8 *)(param_4 + 10),\n                       *(undefined8 *)(param_4 + 0xc));\n  uVar4 = thunk_FUN_00109460(lVar3 + 1);\n  FUN_00107390(uVar4,lVar3 + 1,param_1,param_2,*param_4,uVar5,param_4 + 2,\n               *(undefined8 *)(param_4 + 10),*(undefined8 *)(param_4 + 0xc));\n  *piVar2 = iVar1;\n  if (param_3 != (long *)0x0) {\n    *param_3 = lVar3;\n  }\n  return uVar4;\n}\n\n", 
    "00108e20": "\nundefined8\nFUN_00108e20(FILE *param_1,long param_2,undefined8 param_3,undefined8 param_4,undefined8 *param_5,\n            undefined8 param_6)\n\n{\n  undefined8 uVar1;\n  char *pcVar2;\n  undefined8 uVar3;\n  undefined8 uVar4;\n  undefined8 uVar5;\n  undefined8 uVar6;\n  undefined8 local_60;\n  undefined8 local_58;\n  undefined8 local_50;\n  undefined8 local_48;\n  \n  if (param_2 == 0) {\n    __fprintf_chk(param_1,1,\"%s %s\\n\",param_3,param_4);\n  }\n  else {\n    __fprintf_chk(param_1,1,\"%s (%s) %s\\n\",param_2,param_3,param_4);\n  }\n  uVar1 = dcgettext(0,&DAT_0010d73b,5);\n  __fprintf_chk(param_1,1,\"Copyright %s %d Free Software Foundation, Inc.\",uVar1,0x7e2);\n  pcVar2 = (char *)dcgettext(0,\n                             \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\"\n                             ,5);\n  fputs_unlocked(pcVar2,param_1);\n  switch(param_6) {\n  case 0:\n                    /* WARNING: Subroutine does not return */\n    abort();\n  case 1:\n    uVar1 = *param_5;\n    uVar4 = dcgettext(0,\"Written by %s.\\n\",5);\n    uVar1 = __fprintf_chk(param_1,1,uVar4,uVar1);\n    return uVar1;\n  case 2:\n    uVar1 = param_5[1];\n    uVar4 = *param_5;\n    uVar5 = dcgettext(0,\"Written by %s and %s.\\n\",5);\n    uVar1 = __fprintf_chk(param_1,1,uVar5,uVar4,uVar1);\n    return uVar1;\n  case 3:\n    uVar1 = param_5[2];\n    uVar4 = param_5[1];\n    uVar5 = *param_5;\n    uVar6 = dcgettext(0,\"Written by %s, %s, and %s.\\n\",5);\n    uVar1 = __fprintf_chk(param_1,1,uVar6,uVar5,uVar4,uVar1);\n    return uVar1;\n  case 4:\n    uVar1 = param_5[3];\n    uVar4 = param_5[2];\n    uVar5 = param_5[1];\n    uVar6 = *param_5;\n    uVar3 = dcgettext(0,\"Written by %s, %s, %s,\\nand %s.\\n\",5);\n    goto LAB_001090e9;\n  case 5:\n    uVar1 = param_5[3];\n    uVar4 = param_5[2];\n    uVar5 = param_5[1];\n    uVar6 = *param_5;\n    uVar3 = dcgettext(0,\"Written by %s, %s, %s,\\n%s, and %s.\\n\",5);\nLAB_001090e9:\n    __fprintf_chk(param_1,1,uVar3,uVar6,uVar5,uVar4);\n    return uVar1;\n  case 6:\n    local_58 = param_5[5];\n    local_60 = param_5[4];\n    uVar1 = param_5[3];\n    uVar4 = param_5[2];\n    uVar5 = param_5[1];\n    uVar6 = *param_5;\n    uVar3 = dcgettext(0,\"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\",5);\n    goto LAB_0010918b;\n  case 7:\n    local_58 = param_5[5];\n    local_60 = param_5[4];\n    uVar1 = param_5[3];\n    uVar4 = param_5[2];\n    uVar5 = param_5[1];\n    uVar6 = *param_5;\n    uVar3 = dcgettext(0,\"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\",5);\nLAB_0010918b:\n    uVar1 = __fprintf_chk(param_1,1,uVar3,uVar6,uVar5,uVar4,uVar1,local_60,local_58);\n    return uVar1;\n  case 8:\n    local_48 = param_5[7];\n    local_50 = param_5[6];\n    local_58 = param_5[5];\n    local_60 = param_5[4];\n    uVar1 = param_5[3];\n    uVar4 = param_5[2];\n    uVar5 = param_5[1];\n    uVar6 = *param_5;\n    uVar3 = dcgettext(0,\"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\",5);\n    goto LAB_00108f3d;\n  case 9:\n    local_48 = param_5[7];\n    pcVar2 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n    local_50 = param_5[6];\n    local_58 = param_5[5];\n    local_60 = param_5[4];\n    uVar1 = param_5[3];\n    uVar4 = param_5[2];\n    uVar5 = param_5[1];\n    uVar6 = *param_5;\n    break;\n  default:\n    local_48 = param_5[7];\n    pcVar2 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n    local_50 = param_5[6];\n    local_58 = param_5[5];\n    local_60 = param_5[4];\n    uVar1 = param_5[3];\n    uVar4 = param_5[2];\n    uVar5 = param_5[1];\n    uVar6 = *param_5;\n  }\n  uVar3 = dcgettext(0,pcVar2,5);\nLAB_00108f3d:\n  uVar1 = __fprintf_chk(param_1,1,uVar3,uVar6,uVar5,uVar4,uVar1,local_60,local_58,local_50,local_48)\n  ;\n  return uVar1;\n}\n\n", 
    "00113208": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nushort ** __ctype_b_loc(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "001025f0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint fputs_unlocked(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_fputs_unlocked_00111ec8)();\n  return iVar1;\n}\n\n", 
    "001024d0": "\nvoid textdomain(void)\n\n{\n  (*(code *)PTR_textdomain_00111e38)();\n  return;\n}\n\n", 
    "001047d0": "\nvoid FUN_001047d0(void)\n\n{\n  int iVar1;\n  undefined8 uVar2;\n  char *pcVar3;\n  char *pcVar4;\n  long lVar5;\n  undefined **ppuVar6;\n  byte *pbVar7;\n  byte *pbVar8;\n  long in_FS_OFFSET;\n  bool bVar9;\n  bool bVar10;\n  undefined *local_98;\n  char *local_90;\n  char *local_88;\n  char *local_80 [5];\n  char *local_58;\n  char *local_50;\n  char *local_48;\n  char *local_40;\n  undefined8 local_38;\n  undefined8 local_30;\n  long local_20;\n  \n  pbVar8 = (byte *)0x10b19f;\n  local_20 = *(long *)(in_FS_OFFSET + 0x28);\n  local_80[3] = \"sha256sum\";\n  local_98 = &DAT_0010b125;\n  local_90 = \"test invocation\";\n  local_80[0] = \"Multi-call invocation\";\n  local_80[1] = \"sha224sum\";\n  local_58 = \"sha384sum\";\n  local_48 = \"sha512sum\";\n  local_88 = \"coreutils\";\n  local_80[2] = \"sha2 utilities\";\n  local_80[4] = \"sha2 utilities\";\n  local_50 = \"sha2 utilities\";\n  local_40 = \"sha2 utilities\";\n  local_38 = 0;\n  local_30 = 0;\n  ppuVar6 = &local_98;\n  while( true ) {\n    bVar9 = false;\n    bVar10 = pbVar8 == (byte *)0x0;\n    if (bVar10) break;\n    lVar5 = 7;\n    pbVar7 = (byte *)\"numfmt\";\n    do {\n      if (lVar5 == 0) break;\n      lVar5 = lVar5 + -1;\n      bVar9 = *pbVar7 < *pbVar8;\n      bVar10 = *pbVar7 == *pbVar8;\n      pbVar7 = pbVar7 + 1;\n      pbVar8 = pbVar8 + 1;\n    } while (bVar10);\n    if ((!bVar9 && !bVar10) == bVar9) break;\n    pbVar8 = *(byte **)((long)ppuVar6 + 0x20);\n    ppuVar6 = (undefined **)((long)ppuVar6 + 0x10);\n  }\n  pcVar4 = *(char **)((long)ppuVar6 + 0x18);\n  if (pcVar4 == (char *)0x0) {\n    uVar2 = dcgettext(0,\"\\n%s online help: <%s>\\n\",5);\n    __printf_chk(1,uVar2,\"GNU coreutils\",\"https://www.gnu.org/software/coreutils/\");\n    pcVar4 = setlocale(5,(char *)0x0);\n    if (pcVar4 != (char *)0x0) {\n      iVar1 = strncmp(pcVar4,\"en_\",3);\n      if (iVar1 != 0) {\n        pcVar4 = \"numfmt\";\n        goto LAB_001049ee;\n      }\n    }\n    uVar2 = dcgettext(0,\"Full documentation at: <%s%s>\\n\",5);\n    pcVar4 = \"numfmt\";\n    __printf_chk(1,uVar2,\"https://www.gnu.org/software/coreutils/\",\"numfmt\");\n    pcVar3 = \" invocation\";\n  }\n  else {\n    uVar2 = dcgettext(0,\"\\n%s online help: <%s>\\n\",5);\n    __printf_chk(1,uVar2,\"GNU coreutils\",\"https://www.gnu.org/software/coreutils/\");\n    pcVar3 = setlocale(5,(char *)0x0);\n    if (pcVar3 != (char *)0x0) {\n      iVar1 = strncmp(pcVar3,\"en_\",3);\n      if (iVar1 != 0) {\nLAB_001049ee:\n        uVar2 = dcgettext(0,\"Report %s translation bugs to <https://translationproject.org/team/>\\n\"\n                          ,5);\n        __printf_chk(1,uVar2,\"numfmt\");\n      }\n    }\n    uVar2 = dcgettext(0,\"Full documentation at: <%s%s>\\n\",5);\n    pcVar3 = \" invocation\";\n    __printf_chk(1,uVar2,\"https://www.gnu.org/software/coreutils/\",\"numfmt\");\n    if (pcVar4 != \"numfmt\") {\n      pcVar3 = \"\";\n    }\n  }\n  uVar2 = dcgettext(0,\"or available locally via: info \\'(coreutils) %s%s\\'\\n\",5);\n  if (local_20 == *(long *)(in_FS_OFFSET + 0x28)) {\n    __printf_chk(1,uVar2,pcVar4,pcVar3);\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "00113210": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid __cxa_finalize(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "00106c30": "\nbool FUN_00106c30(long param_1,long param_2)\n\n{\n  int iVar1;\n  \n  iVar1 = FUN_00109f60(param_1 + 9,param_2 + 9);\n  return iVar1 == 0;\n}\n\n", 
    "001063f0": "\nulong FUN_001063f0(int param_1)\n\n{\n  ulong in_RAX;\n  ulong uVar1;\n  \n  if (param_1 < 0x5b) {\n    uVar1 = 1;\n    if (param_1 < 0x41) {\n      return (ulong)(param_1 - 0x30U < 10);\n    }\n  }\n  else {\n    uVar1 = in_RAX & 0xffffffffffffff00 | (ulong)(param_1 - 0x61U < 0x1a);\n  }\n  return uVar1;\n}\n\n", 
    "001086f0": "\nvoid FUN_001086f0(undefined *param_1)\n\n{\n  int iVar1;\n  int *piVar2;\n  \n  piVar2 = __errno_location();\n  iVar1 = *piVar2;\n  if (param_1 == (undefined *)0x0) {\n    param_1 = &DAT_001122c0;\n  }\n  FUN_00109630(param_1,0x38);\n  *piVar2 = iVar1;\n  return;\n}\n\n", 
    "00109630": "\nvoid FUN_00109630(void *param_1,size_t param_2)\n\n{\n  void *__dest;\n  \n  __dest = (void *)FUN_00109460(param_2);\n  memcpy(__dest,param_1,param_2);\n  return;\n}\n\n", 
    "00109fc0": "\nulong FUN_00109fc0(FILE *param_1)\n\n{\n  int iVar1;\n  long lVar2;\n  ulong uVar3;\n  int *piVar4;\n  \n  lVar2 = __fpending();\n  iVar1 = ferror_unlocked(param_1);\n  uVar3 = FUN_0010a0c0(param_1);\n  if (iVar1 == 0) {\n    if ((int)uVar3 == 0) {\n      return uVar3;\n    }\n    if (lVar2 == 0) {\n      piVar4 = __errno_location();\n      return (ulong)-(uint)(*piVar4 != 9);\n    }\n  }\n  else if ((int)uVar3 == 0) {\n    piVar4 = __errno_location();\n    *piVar4 = 0;\n    return 0xffffffff;\n  }\n  return 0xffffffff;\n}\n\n", 
    "00102780": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid exit(int __status)\n\n{\n  (*(code *)PTR_exit_00111f90)();\n  return;\n}\n\n", 
    "00102660": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint putchar_unlocked(int __c)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_putchar_unlocked_00111f00)();\n  return iVar1;\n}\n\n", 
    "00102540": "\nvoid getopt_long(void)\n\n{\n  (*(code *)PTR_getopt_long_00111e70)();\n  return;\n}\n\n", 
    "00102420": "\nvoid __snprintf_chk(void)\n\n{\n  (*(code *)PTR___snprintf_chk_00111de0)();\n  return;\n}\n\n", 
    "001131a0": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid error(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "00105010": "\nundefined8 FUN_00105010(ulong param_1)\n\n{\n  undefined4 uVar1;\n  uint uVar2;\n  uint uVar3;\n  undefined8 uVar4;\n  undefined8 uVar5;\n  uint *puVar6;\n  uint *puVar7;\n  char *pcVar8;\n  long in_FS_OFFSET;\n  bool bVar9;\n  uint local_b4;\n  char *local_b0;\n  uint local_a8 [31];\n  undefined auStack_29 [9];\n  long local_20;\n  \n  local_20 = *(long *)(in_FS_OFFSET + 0x28);\n  if (DAT_00112020 != 0xffffffffffffffff) {\n    param_1 = DAT_00112020;\n  }\n  FUN_001032f0(10,&local_b4);\n  uVar1 = DAT_0011201c;\n  if ((DAT_00112184 == 0) && (0x12 < local_b4 + param_1)) {\n    uVar5 = 0;\n    if (DAT_00112180 != 3) {\n      if (param_1 == 0) {\n        uVar5 = dcgettext(0,\"value too large to be printed: \\'%Lg\\' (consider using --to)\",5);\n        error(uVar1,0,uVar5);\n        uVar5 = 0;\n      }\n      else {\n        uVar4 = dcgettext(0,\n                          \"value/precision too large to be printed: \\'%Lg/%lu\\' (consider using --to)\"\n                          ,5);\n        error(uVar1,0,uVar4,param_1);\n      }\n    }\n  }\n  else if (local_b4 < 0x1b) {\n    FUN_00104a70(param_1 & 0xffffffff,local_a8,DAT_00112184,DAT_00112170,DAT_00112038);\n    puVar7 = local_a8;\n    if (DAT_00112178 != 0) {\n      do {\n        puVar6 = puVar7;\n        uVar2 = *puVar6 + 0xfefefeff & ~*puVar6;\n        uVar3 = uVar2 & 0x80808080;\n        puVar7 = puVar6 + 1;\n      } while (uVar3 == 0);\n      bVar9 = (uVar2 & 0x8080) == 0;\n      if (bVar9) {\n        uVar3 = uVar3 >> 0x10;\n      }\n      if (bVar9) {\n        puVar7 = (uint *)((long)puVar6 + 6);\n      }\n      __strncat_chk(local_a8,DAT_00112178,\n                    auStack_29 +\n                    -(long)((long)puVar7 + (-3 - (ulong)CARRY1((byte)uVar3,(byte)uVar3))),0x80);\n    }\n    puVar7 = local_a8;\n    if (DAT_00112110 != '\\0') {\n      uVar5 = FUN_00108e10(local_a8);\n      __fprintf_chk(stderr,1,\"formatting output:\\n  value: %Lf\\n  humanized: %s\\n\",uVar5);\n    }\n    do {\n      puVar6 = puVar7;\n      uVar2 = *puVar6 + 0xfefefeff & ~*puVar6;\n      uVar3 = uVar2 & 0x80808080;\n      puVar7 = puVar6 + 1;\n    } while (uVar3 == 0);\n    bVar9 = (uVar2 & 0x8080) == 0;\n    if (bVar9) {\n      uVar3 = uVar3 >> 0x10;\n    }\n    if (bVar9) {\n      puVar7 = (uint *)((long)puVar6 + 6);\n    }\n    pcVar8 = (char *)((long)puVar7 +\n                     ((-3 - (ulong)CARRY1((byte)uVar3,(byte)uVar3)) - (long)local_a8));\n    if ((DAT_00112158 == (char *)0x0) || (DAT_00112158 <= pcVar8)) {\n      FUN_00104030(pcVar8 + 1,uVar3 & 0xffffff00);\n      strcpy(DAT_00112168,(char *)local_a8);\n    }\n    else {\n      local_b0 = DAT_00112158;\n      FUN_00106770(local_a8,DAT_00112168,DAT_00112160,&local_b0,DAT_00112018,2);\n      if (DAT_00112110 != '\\0') {\n        uVar5 = FUN_00108e10(DAT_00112168);\n        __fprintf_chk(stderr,1,\"  After padding: %s\\n\",uVar5);\n      }\n    }\n    uVar5 = 1;\n  }\n  else {\n    uVar5 = 0;\n    if (DAT_00112180 != 3) {\n      uVar4 = dcgettext(0,\"value too large to be printed: \\'%Lg\\' (cannot handle values > 999Y)\",5);\n      error(DAT_0011201c,0,uVar4);\n    }\n  }\n  if (local_20 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return uVar5;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "001096e0": "\nundefined8 FUN_001096e0(long *param_1,int param_2)\n\n{\n  long lVar1;\n  long lVar2;\n  long lVar3;\n  \n  lVar3 = -0x8000000000000000;\n  lVar2 = (long)param_2;\n  lVar1 = *param_1;\n  if ((SUB168((SEXT816(-0x8000000000000000) & (undefined  [16])0xffffffffffffffff |\n              ZEXT816(0x8000000000000000)) / SEXT816(lVar2),0) <= lVar1) &&\n     (lVar3 = 0x7fffffffffffffff,\n     lVar1 <= SUB168((SEXT816(0x7fffffffffffffff) & (undefined  [16])0xffffffffffffffff |\n                     ZEXT816(0x7fffffffffffffff)) / SEXT816(lVar2),0))) {\n    *param_1 = lVar2 * lVar1;\n    return 0;\n  }\n  *param_1 = lVar3;\n  return 1;\n}\n\n", 
    "00106580": "\nint FUN_00106580(int param_1)\n\n{\n  if (param_1 - 0x41U < 0x1a) {\n    param_1 = param_1 + 0x20;\n  }\n  return param_1;\n}\n\n", 
    "001095c0": "\nvoid FUN_001095c0(undefined8 param_1,undefined8 param_2)\n\n{\n  FUN_00109530(param_1,param_2,1);\n  return;\n}\n\n", 
    "00103190": "\nvoid thunk_FUN_00103110(void)\n\n{\n  FUN_00103110();\n  return;\n}\n\n", 
    "0010a0c0": "\nint FUN_0010a0c0(FILE *param_1)\n\n{\n  int iVar1;\n  int iVar2;\n  int *piVar3;\n  __off_t _Var4;\n  \n  iVar1 = fileno(param_1);\n  if (-1 < iVar1) {\n    iVar1 = __freading();\n    if (iVar1 != 0) {\n      iVar1 = fileno(param_1);\n      _Var4 = lseek(iVar1,0,1);\n      if (_Var4 == -1) goto LAB_0010a12f;\n    }\n    iVar1 = FUN_0010a170(param_1);\n    if (iVar1 != 0) {\n      piVar3 = __errno_location();\n      iVar1 = *piVar3;\n      iVar2 = fclose(param_1);\n      if (iVar1 != 0) {\n        *piVar3 = iVar1;\n        iVar2 = -1;\n      }\n      return iVar2;\n    }\n  }\nLAB_0010a12f:\n  iVar1 = fclose(param_1);\n  return iVar1;\n}\n\n", 
    "00104160": "\nuint FUN_00104160(undefined8 param_1,char **param_2,float10 *param_3,undefined8 *param_4,int param_5\n                 )\n\n{\n  char cVar1;\n  byte bVar2;\n  uint uVar3;\n  int iVar4;\n  undefined4 uVar5;\n  ushort **ppuVar6;\n  undefined8 uVar7;\n  undefined8 uVar8;\n  ushort *puVar9;\n  char *pcVar10;\n  long extraout_RDX;\n  char *pcVar11;\n  bool bVar12;\n  float10 in_ST0;\n  undefined4 local_3c;\n  \n  if (DAT_00112110 != '\\0') {\n    uVar7 = FUN_00108e00(1,DAT_00112118);\n    uVar8 = FUN_00108e00(0,param_1);\n    __fprintf_chk(stderr,1,\n                  \"simple_strtod_human:\\n  input string: %s\\n  locale decimal-point: %s\\n  MAX_UNSCALED_DIGITS: %d\\n\"\n                  ,uVar8,uVar7,0x12);\n  }\n  uVar3 = FUN_001037a0(param_1,param_2,param_3,param_4);\n  if (1 < uVar3) {\n    return uVar3;\n  }\n  if (DAT_00112110 != '\\0') {\n    __fprintf_chk(stderr,1,\"  parsed numeric value: %Lf\\n  input precision = %d\\n\",\n                  *(undefined4 *)param_4);\n  }\n  local_3c = FUN_001031b0(param_5);\n  pcVar10 = *param_2;\n  cVar1 = *pcVar10;\n  if (cVar1 == '\\0') {\n    if (param_5 == 4) {\n      return 6;\n    }\n    uVar5 = 0;\n  }\n  else {\n    ppuVar6 = __ctype_b_loc();\n    puVar9 = *ppuVar6;\n    while( true ) {\n      bVar2 = FUN_001031a0((int)cVar1);\n      pcVar11 = (char *)(extraout_RDX + 1);\n      if ((*(byte *)(puVar9 + bVar2) & 1) == 0) break;\n      *param_2 = pcVar11;\n      cVar1 = *pcVar11;\n      pcVar10 = pcVar11;\n    }\n    iVar4 = FUN_00104070();\n    if (iVar4 == 0) {\n      return 5;\n    }\n    if (param_5 == 0) {\n      return 4;\n    }\n    iVar4 = param_5;\n    uVar5 = FUN_001031d0((int)cVar1);\n    *param_2 = pcVar10 + 1;\n    if (iVar4 == 1) {\n      if (pcVar10[1] == 'i') {\n        bVar12 = DAT_00112110 != '\\0';\n        local_3c = 0x400;\n        *param_2 = pcVar10 + 2;\n        if (bVar12) {\n          __fprintf_chk(stderr);\n        }\n      }\n      *param_4 = 0;\n    }\n    else {\n      *param_4 = 0;\n      if (param_5 == 4) {\n        if (**param_2 != 'i') {\n          return 6;\n        }\n        *param_2 = *param_2 + 1;\n      }\n    }\n  }\n  FUN_001032a0(uVar5);\n  if (DAT_00112110 == '\\0') {\n    *param_3 = *param_3 * in_ST0;\n  }\n  else {\n    __fprintf_chk(stderr,1,\"  suffix power=%d^%d = %Lf\\n\",local_3c,uVar5);\n    bVar12 = DAT_00112110 != '\\0';\n    *param_3 = in_ST0 * *param_3;\n    if (bVar12) {\n      __fprintf_chk(stderr,1,\"  returning value: %Lf (%LG)\\n\");\n    }\n  }\n  return uVar3;\n}\n\n", 
    "001025e0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint memcmp(void *__s1,void *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_memcmp_00111ec0)();\n  return iVar1;\n}\n\n", 
    "001024c0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nsize_t mbstowcs(wchar_t *__pwcs,char *__s,size_t __n)\n\n{\n  size_t sVar1;\n  \n  sVar1 = (*(code *)PTR_mbstowcs_00111e30)();\n  return sVar1;\n}\n\n", 
    "00113100": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint ferror_unlocked(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "00106d40": "\nundefined8 FUN_00106d40(long param_1,undefined8 param_2,byte param_3,char param_4,char param_5)\n\n{\n  char cVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  \n  cVar1 = FUN_00106540((int)(char)param_3);\n  bVar2 = *(byte *)(param_1 + 6);\n  if (cVar1 != '\\0') {\n    bVar2 = bVar2 & 0xdf;\n  }\n  if (param_3 != bVar2) {\n    return 0;\n  }\n  if (param_3 == 0) {\n    return 1;\n  }\n  uVar3 = FUN_00106cb0(param_1,param_2,(int)param_4,(int)param_5);\n  return uVar3;\n}\n\n", 
    "00109760": "\nuint FUN_00109760(char *param_1,char **param_2,uint param_3,long *param_4,char *param_5)\n\n{\n  char cVar1;\n  char cVar2;\n  uint uVar3;\n  int *piVar4;\n  long lVar5;\n  char *pcVar6;\n  char *pcVar7;\n  undefined8 uVar8;\n  uint uVar9;\n  int iVar10;\n  long in_FS_OFFSET;\n  char *local_50;\n  long local_48;\n  long local_40;\n  \n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  if (0x24 < param_3) {\n                    /* WARNING: Subroutine does not return */\n    __assert_fail(\"0 <= strtol_base && strtol_base <= 36\",\"lib/xstrtol.c\",0x60,\"xstrtol\");\n  }\n  if (param_2 == (char **)0x0) {\n    param_2 = &local_50;\n  }\n  piVar4 = __errno_location();\n  *piVar4 = 0;\n  lVar5 = strtol(param_1,param_2,param_3);\n  pcVar7 = *param_2;\n  local_48 = lVar5;\n  if (pcVar7 == param_1) {\n    if (param_5 == (char *)0x0) {\n      uVar9 = 4;\n      goto LAB_001097ef;\n    }\n    cVar1 = *pcVar7;\n    uVar9 = 4;\n    if (cVar1 == '\\0') goto LAB_001097ef;\n    iVar10 = (int)cVar1;\n    pcVar6 = strchr(param_5,iVar10);\n    if (pcVar6 == (char *)0x0) goto LAB_001097ef;\n    local_48 = 1;\n    uVar9 = 0;\nLAB_00109872:\n    pcVar6 = strchr(param_5,iVar10);\n    if (pcVar6 == (char *)0x0) {\nswitchD_001098d3_caseD_43:\n      uVar9 = uVar9 | 2;\n      *param_4 = local_48;\n      goto LAB_001097ef;\n    }\n    switch(cVar1) {\n    case 'E':\n    case 'G':\n    case 'K':\n    case 'M':\n    case 'P':\n    case 'T':\n    case 'Y':\n    case 'Z':\n    case 'g':\n    case 'k':\n    case 'm':\n    case 't':\n      pcVar6 = strchr(param_5,0x30);\n      if (pcVar6 == (char *)0x0) goto switchD_001098aa_caseD_46;\n      cVar2 = pcVar7[1];\n      if (cVar2 == 'D') {\n        iVar10 = 2;\n        uVar8 = 1000;\n      }\n      else if (cVar2 == 'i') {\n        uVar8 = 0x400;\n        iVar10 = (pcVar7[2] == 'B') + 1 + (uint)(pcVar7[2] == 'B');\n      }\n      else {\n        iVar10 = (cVar2 == 'B') + 1;\n        uVar8 = 1000;\n        if (cVar2 != 'B') {\n          uVar8 = 0x400;\n        }\n      }\n      break;\n    default:\nswitchD_001098aa_caseD_46:\n      iVar10 = 1;\n      uVar8 = 0x400;\n    }\n    switch(cVar1) {\n    case 'B':\n      uVar3 = FUN_001096e0(&local_48,0x400);\n      pcVar7 = *param_2;\n      uVar9 = uVar9 | uVar3;\n      break;\n    default:\n      goto switchD_001098d3_caseD_43;\n    case 'E':\n      uVar3 = FUN_00109730(&local_48,uVar8,6);\n      pcVar7 = *param_2;\n      uVar9 = uVar9 | uVar3;\n      break;\n    case 'G':\n    case 'g':\n      uVar3 = FUN_00109730(&local_48,uVar8,3);\n      pcVar7 = *param_2;\n      uVar9 = uVar9 | uVar3;\n      break;\n    case 'K':\n    case 'k':\n      uVar3 = FUN_00109730(&local_48,uVar8,1);\n      pcVar7 = *param_2;\n      uVar9 = uVar9 | uVar3;\n      break;\n    case 'M':\n    case 'm':\n      uVar3 = FUN_00109730(&local_48,uVar8,2);\n      pcVar7 = *param_2;\n      uVar9 = uVar9 | uVar3;\n      break;\n    case 'P':\n      uVar3 = FUN_00109730(&local_48,uVar8,5);\n      pcVar7 = *param_2;\n      uVar9 = uVar9 | uVar3;\n      break;\n    case 'T':\n    case 't':\n      uVar3 = FUN_00109730(&local_48,uVar8,4);\n      pcVar7 = *param_2;\n      uVar9 = uVar9 | uVar3;\n      break;\n    case 'Y':\n      uVar3 = FUN_00109730(&local_48,uVar8,8);\n      pcVar7 = *param_2;\n      uVar9 = uVar9 | uVar3;\n      break;\n    case 'Z':\n      uVar3 = FUN_00109730(&local_48,uVar8,7);\n      pcVar7 = *param_2;\n      uVar9 = uVar9 | uVar3;\n      break;\n    case 'b':\n      uVar3 = FUN_001096e0(&local_48,0x200);\n      pcVar7 = *param_2;\n      uVar9 = uVar9 | uVar3;\n      break;\n    case 'c':\n      break;\n    case 'w':\n      uVar3 = FUN_001096e0(&local_48,2);\n      pcVar7 = *param_2;\n      uVar9 = uVar9 | uVar3;\n    }\n    lVar5 = local_48;\n    *param_2 = pcVar7 + iVar10;\n    if (pcVar7[iVar10] != '\\0') {\n      uVar9 = uVar9 | 2;\n    }\n  }\n  else {\n    if (*piVar4 == 0) {\n      uVar9 = 0;\n    }\n    else {\n      uVar9 = 4;\n      if (*piVar4 != 0x22) goto LAB_001097ef;\n      uVar9 = 1;\n    }\n    if ((param_5 != (char *)0x0) && (cVar1 = *pcVar7, cVar1 != '\\0')) {\n      iVar10 = (int)cVar1;\n      goto LAB_00109872;\n    }\n  }\n  *param_4 = lVar5;\nLAB_001097ef:\n  if (local_40 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return uVar9;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "00108dc0": "\nvoid FUN_00108dc0(undefined8 param_1,undefined8 param_2,undefined8 param_3,undefined8 param_4)\n\n{\n  FUN_00108cf0(0,param_1,param_2,param_3,param_4);\n  return;\n}\n\n", 
    "00102410": "\nvoid __cxa_finalize(void)\n\n{\n  (*(code *)PTR___cxa_finalize_00111ff0)();\n  return;\n}\n\n", 
    "001131a8": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint fseeko(FILE *__stream,__off_t __off,int __whence)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "00102450": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = (int *)(*(code *)PTR___errno_location_00111df8)();\n  return piVar1;\n}\n\n", 
    "00108a80": "\nvoid FUN_00108a80(undefined4 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  long in_FS_OFFSET;\n  undefined auStack_58 [56];\n  long local_20;\n  \n  local_20 = *(long *)(in_FS_OFFSET + 0x28);\n  FUN_00106be0(auStack_58);\n  FUN_00108550(param_1,param_3,0xffffffffffffffff,auStack_58);\n  if (local_20 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "00103420": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nlong FUN_00103420(void)\n\n{\n  float10 param_7;\n  \n  if ((float10)0 <= param_7) {\n    return (long)ROUND(param_7 + (float10)_DAT_0010cd80);\n  }\n  return (long)ROUND(param_7 - (float10)_DAT_0010cd80);\n}\n\n", 
    "00102690": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint putc_unlocked(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_putc_unlocked_00111f18)();\n  return iVar1;\n}\n\n", 
    "00102570": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = (char *)(*(code *)PTR_strrchr_00111e88)();\n  return pcVar1;\n}\n\n", 
    "00108550": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nundefined * FUN_00108550(int param_1,undefined8 param_2,undefined8 param_3,undefined4 *param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  undefined4 uVar3;\n  ulong uVar4;\n  undefined4 uVar5;\n  undefined4 uVar6;\n  int *piVar7;\n  undefined4 *puVar8;\n  ulong uVar9;\n  undefined *__ptr;\n  ulong *puVar10;\n  \n  piVar7 = __errno_location();\n  iVar1 = *piVar7;\n  if (param_1 < 0) {\n                    /* WARNING: Subroutine does not return */\n    abort();\n  }\n  puVar8 = (undefined4 *)PTR_DAT_001120a0;\n  if (DAT_00112098 <= param_1) {\n    if (param_1 == 0x7fffffff) {\n                    /* WARNING: Subroutine does not return */\n      FUN_00109680();\n    }\n    if (PTR_DAT_001120a0 == &DAT_001120b0) {\n      puVar8 = (undefined4 *)FUN_001094c0(0);\n      uVar6 = PTR_DAT_001120b8._4_4_;\n      uVar5 = PTR_DAT_001120b8._0_4_;\n      uVar3 = _UNK_001120b4;\n      PTR_DAT_001120a0 = (undefined *)puVar8;\n      *puVar8 = _DAT_001120b0;\n      puVar8[1] = uVar3;\n      puVar8[2] = uVar5;\n      puVar8[3] = uVar6;\n    }\n    else {\n      puVar8 = (undefined4 *)FUN_001094c0(PTR_DAT_001120a0);\n      PTR_DAT_001120a0 = (undefined *)puVar8;\n    }\n    memset(puVar8 + (long)DAT_00112098 * 4,0,(long)((param_1 + 1) - DAT_00112098) << 4);\n    DAT_00112098 = param_1 + 1;\n  }\n  uVar2 = param_4[1];\n  puVar10 = (ulong *)(puVar8 + (long)param_1 * 4);\n  uVar4 = *puVar10;\n  __ptr = (undefined *)puVar10[1];\n  uVar9 = FUN_00107390(__ptr,uVar4,param_2,param_3,*param_4,uVar2 | 1,param_4 + 2,\n                       *(undefined8 *)(param_4 + 10),*(undefined8 *)(param_4 + 0xc));\n  if (uVar4 <= uVar9) {\n    uVar9 = uVar9 + 1;\n    *puVar10 = uVar9;\n    if (__ptr != &DAT_001121c0) {\n      free(__ptr);\n    }\n    __ptr = (undefined *)thunk_FUN_00109460(uVar9);\n    uVar3 = *param_4;\n    puVar10[1] = (ulong)__ptr;\n    FUN_00107390(__ptr,uVar9,param_2,param_3,uVar3,uVar2 | 1,param_4 + 2,\n                 *(undefined8 *)(param_4 + 10),*(undefined8 *)(param_4 + 0xc));\n  }\n  *piVar7 = iVar1;\n  return __ptr;\n}\n\n", 
    "00104070": "\nbool FUN_00104070(char param_1)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(\"KMGTPEZY\",(int)param_1);\n  return pcVar1 != (char *)0x0;\n}\n\n", 
    "00106be0": "\nint * FUN_00106be0(int *param_1,int param_2)\n\n{\n  if (param_2 != 10) {\n    *param_1 = param_2;\n    param_1[1] = 0;\n    *(undefined8 *)(param_1 + 2) = 0;\n    *(undefined8 *)(param_1 + 4) = 0;\n    *(undefined8 *)(param_1 + 6) = 0;\n    *(undefined8 *)(param_1 + 8) = 0;\n    *(undefined8 *)(param_1 + 10) = 0;\n    *(undefined8 *)(param_1 + 0xc) = 0;\n    return param_1;\n  }\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n", 
    "00106490": "\nbool FUN_00106490(int param_1)\n\n{\n  return param_1 - 0x30U < 10;\n}\n\n", 
    "00108e00": "\nvoid FUN_00108e00(undefined8 param_1,undefined8 param_2)\n\n{\n  FUN_00108de0(param_1,param_2,0xffffffffffffffff);\n  return;\n}\n\n", 
    "00109290": "\nvoid FUN_00109290(void)\n\n{\n  uint uVar1;\n  long *plVar2;\n  long lVar3;\n  uint *in_R8;\n  long lVar4;\n  long in_FS_OFFSET;\n  long local_68 [11];\n  long local_10;\n  \n  lVar4 = 0;\n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  do {\n    uVar1 = *in_R8;\n    if (uVar1 < 0x30) {\n      *in_R8 = uVar1 + 8;\n      lVar3 = *(long *)((ulong)uVar1 + *(long *)(in_R8 + 4));\n      local_68[lVar4] = lVar3;\n    }\n    else {\n      plVar2 = *(long **)(in_R8 + 2);\n      *(long **)(in_R8 + 2) = plVar2 + 1;\n      lVar3 = *plVar2;\n      local_68[lVar4] = lVar3;\n    }\n  } while ((lVar3 != 0) && (lVar4 = lVar4 + 1, lVar4 != 10));\n  FUN_00108e20();\n  if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "0010a1b0": "\nint FUN_0010a1b0(FILE *param_1,__off_t param_2,int param_3)\n\n{\n  int iVar1;\n  __off_t _Var2;\n  \n  if (((param_1->_IO_read_end == param_1->_IO_read_ptr) &&\n      (param_1->_IO_write_ptr == param_1->_IO_write_base)) &&\n     (param_1->_IO_save_base == (char *)0x0)) {\n    iVar1 = fileno(param_1);\n    _Var2 = lseek(iVar1,param_2,param_3);\n    if (_Var2 == -1) {\n      iVar1 = -1;\n    }\n    else {\n      param_1->_flags = param_1->_flags & 0xffffffef;\n      param_1->_offset = _Var2;\n      iVar1 = 0;\n    }\n    return iVar1;\n  }\n  iVar1 = fseeko(param_1,param_2,param_3);\n  return iVar1;\n}\n\n", 
    "001035e0": "\nvoid FUN_001035e0(void)\n\n{\n  char *__s;\n  FILE *__stream;\n  \n  __stream = stdout;\n  __s = (char *)dcgettext(0,\n                          \"\\nMandatory arguments to long options are mandatory for short options too.\\n\"\n                          ,5);\n  fputs_unlocked(__s,__stream);\n  return;\n}\n\n", 
    "0010a2c4": "\nvoid __DT_FINI(void)\n\n{\n  return;\n}\n\n", 
    "001024f0": "\nvoid bindtextdomain(void)\n\n{\n  (*(code *)PTR_bindtextdomain_00111e48)();\n  return;\n}\n\n", 
    "00106c50": "\nundefined8 FUN_00106c50(long param_1,undefined8 param_2,byte param_3)\n\n{\n  char cVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  \n  cVar1 = FUN_00106540((int)(char)param_3);\n  bVar2 = *(byte *)(param_1 + 8);\n  if (cVar1 != '\\0') {\n    bVar2 = bVar2 & 0xdf;\n  }\n  if (param_3 != bVar2) {\n    return 0;\n  }\n  if (param_3 == 0) {\n    return 1;\n  }\n  uVar3 = FUN_00106c30(param_1,param_2);\n  return uVar3;\n}\n\n", 
    "00105a40": "\nulong FUN_00105a40(int *param_1,int *param_2)\n\n{\n  int iVar1;\n  ulong uVar2;\n  \n  iVar1 = *param_2;\n  uVar2 = 0xffffffff;\n  if (iVar1 <= *param_1) {\n    uVar2 = (ulong)(*param_1 != iVar1 && iVar1 <= *param_1);\n  }\n  return uVar2;\n}\n\n", 
    "00109730": "\nuint FUN_00109730(undefined8 param_1,uint param_2,int param_3)\n\n{\n  uint uVar1;\n  uint uVar2;\n  ulong uVar3;\n  \n  uVar3 = (ulong)param_2;\n  param_3 = param_3 + -1;\n  uVar2 = 0;\n  do {\n    uVar1 = FUN_001096e0(param_1,uVar3 & 0xffffffff);\n    param_3 = param_3 + -1;\n    uVar2 = uVar2 | uVar1;\n  } while (param_3 != -1);\n  return uVar2;\n}\n\n", 
    "00104a70": "\nundefined8\nFUN_00104a70(undefined4 param_1,char *param_2,uint param_3,int param_4,undefined4 param_5,\n            undefined8 param_6,undefined8 param_7,undefined2 param_8)\n\n{\n  undefined4 uVar1;\n  undefined uVar2;\n  undefined uVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  undefined8 uVar7;\n  undefined8 uVar8;\n  char cVar9;\n  uint *puVar10;\n  uint *puVar11;\n  undefined4 *puVar12;\n  undefined8 *puVar13;\n  ulong uVar14;\n  ulong uVar15;\n  char *pcVar16;\n  ulong uVar17;\n  ulong uVar18;\n  long in_FS_OFFSET;\n  bool bVar19;\n  float10 in_ST0;\n  float10 fVar20;\n  float10 in_ST1;\n  float10 in_ST2;\n  float10 in_ST3;\n  float10 in_ST4;\n  float10 in_ST5;\n  uint uStack_18c;\n  char *pcStack_188;\n  uint auStack_180 [31];\n  undefined auStack_101 [9];\n  long lStack_f8;\n  ulong uStack_f0;\n  ulong uStack_e8;\n  ulong uStack_e0;\n  undefined8 local_d8;\n  undefined uStack_d0;\n  undefined uStack_cf;\n  uint6 uStack_ce;\n  char local_c8;\n  undefined7 uStack_c7;\n  undefined2 uStack_c0;\n  ushort uStack_be;\n  undefined4 uStack_bc;\n  char local_b8;\n  undefined7 uStack_b7;\n  undefined2 uStack_b0;\n  double local_a8;\n  char local_9d;\n  float local_9c;\n  uint local_8c;\n  undefined local_88;\n  undefined local_87;\n  undefined4 local_86 [17];\n  long local_40;\n  \n  uVar17 = (ulong)param_3;\n  puVar13 = (undefined8 *)&local_c8;\n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  puVar12 = (undefined4 *)&local_87;\n  local_88 = 0x25;\n  if (param_4 != 0) {\n    local_87 = 0x27;\n    puVar12 = local_86;\n  }\n  if (DAT_00112150 != 0) {\n    uStack_d0 = 0x10;\n    uStack_cf = 0x4e;\n    uStack_ce = 0x10;\n    iVar5 = __snprintf_chk(puVar12,0x3e,1,0x3f,&DAT_0010b1ad);\n    puVar12 = (undefined4 *)((long)puVar12 + (long)iVar5);\n  }\n  uStack_d0 = (undefined)param_8;\n  uVar2 = uStack_d0;\n  uStack_cf = (undefined)((ushort)param_8 >> 8);\n  uVar3 = uStack_cf;\n  if (DAT_00112110 == '\\0') {\n    local_c8 = DAT_00112110;\n    if (param_3 != 0) {\n      uStack_d0 = 0xa8;\n      uStack_cf = 0x4b;\n      uStack_ce = 0x10;\n      iVar5 = FUN_001031b0(uVar17);\n      local_8c = 0;\n      local_a8 = (double)iVar5;\n      local_d8 = param_7;\n      uStack_e0 = 0x104bd8;\n      uStack_d0 = uVar2;\n      uStack_cf = uVar3;\n      FUN_001032f0(iVar5,&local_8c);\n      local_b8 = SUB101(in_ST0,0);\n      uStack_b7 = (undefined7)((unkuint10)in_ST0 >> 8);\n      uStack_b0 = (undefined2)((unkuint10)in_ST0 >> 0x40);\n      goto LAB_00104bf0;\n    }\n    fVar20 = (float10)DAT_0010cd84;\n    local_c8 = SUB101(fVar20,0);\n    uStack_c7 = (undefined7)((unkuint10)fVar20 >> 8);\n    uStack_c0 = (undefined2)((unkuint10)fVar20 >> 0x40);\n    local_d8 = SUB108(fVar20,0);\n    uStack_d0 = (undefined)((unkuint10)fVar20 >> 0x40);\n    uStack_cf = (undefined)((unkuint10)fVar20 >> 0x48);\n    uStack_ce = (uint6)uStack_be;\n    uStack_e0 = 0x104aff;\n    FUN_001032a0(param_1);\n    fVar20 = (float10)CONCAT28(param_8,param_7) * in_ST0;\n    local_c8 = SUB101(in_ST0,0);\n    uStack_c7 = (undefined7)((unkuint10)in_ST0 >> 8);\n    uStack_c0 = (undefined2)((unkuint10)in_ST0 >> 0x40);\n    local_d8 = SUB108(fVar20,0);\n    uStack_d0 = (undefined)((unkuint10)fVar20 >> 0x40);\n    uStack_cf = (undefined)((unkuint10)fVar20 >> 0x48);\n    uStack_e0 = 0x104b19;\n    FUN_00103490(param_5);\n    in_ST1 = in_ST1 / (float10)CONCAT28(uStack_c0,CONCAT71(uStack_c7,local_c8));\n    local_c8 = SUB101(in_ST1,0);\n    uStack_c7 = (undefined7)((unkuint10)in_ST1 >> 8);\n    uStack_c0 = (undefined2)((unkuint10)in_ST1 >> 0x40);\nLAB_00104b30:\n    *puVar12 = 0x664c2a2e;\n    *(undefined *)(puVar12 + 1) = 0;\n    uStack_d0 = (undefined)uStack_c0;\n    uStack_cf = (undefined)((ushort)uStack_c0 >> 8);\n    uStack_ce = (uint6)(CONCAT44(uStack_bc,CONCAT22(uStack_be,uStack_c0)) >> 0x10);\n    local_d8 = CONCAT71(uStack_c7,local_c8);\n    uStack_e0 = 0x104b65;\n    uVar4 = __snprintf_chk(param_2,0x80,1,0xffffffffffffffff,&local_88,param_1);\n    if (0x7f < uVar4) {\n      uStack_d0 = 0xc4;\n      uStack_cf = 0x4f;\n      uStack_ce = 0x10;\n      uVar7 = dcgettext(0,\"failed to prepare value \\'%Lf\\' for printing\",5);\n      uStack_d0 = (undefined)uStack_c0;\n      uStack_cf = (undefined)((ushort)uStack_c0 >> 8);\n      uStack_ce = (uint6)(CONCAT44(uStack_bc,CONCAT22(uStack_be,uStack_c0)) >> 0x10);\n      local_d8 = CONCAT71(uStack_c7,local_c8);\n      puVar13 = &local_d8;\n      uStack_e0 = 0x104fdd;\n      error(1,0,uVar7);\n      goto LAB_00104fdd;\n    }\n  }\n  else {\n    uStack_d0 = 0x5d;\n    uStack_cf = 0x4d;\n    uStack_ce = 0x10;\n    fwrite(\"double_to_human:\\n\",1,0x11,stderr);\n    if (param_3 == 0) {\n      fVar20 = (float10)DAT_0010cd84;\n      local_c8 = SUB101(fVar20,0);\n      uStack_c7 = (undefined7)((unkuint10)fVar20 >> 8);\n      uStack_c0 = (undefined2)((unkuint10)fVar20 >> 0x40);\n      local_d8 = SUB108(fVar20,0);\n      uStack_d0 = (undefined)((unkuint10)fVar20 >> 0x40);\n      uStack_cf = (undefined)((unkuint10)fVar20 >> 0x48);\n      uStack_ce = (uint6)uStack_be;\n      uStack_e0 = 0x104d80;\n      FUN_001032a0(param_1);\n      fVar20 = (float10)CONCAT28(param_8,param_7) * in_ST0;\n      local_c8 = SUB101(in_ST0,0);\n      uStack_c7 = (undefined7)((unkuint10)in_ST0 >> 8);\n      uStack_c0 = (undefined2)((unkuint10)in_ST0 >> 0x40);\n      local_d8 = SUB108(fVar20,0);\n      uStack_d0 = (undefined)((unkuint10)fVar20 >> 0x40);\n      uStack_cf = (undefined)((unkuint10)fVar20 >> 0x48);\n      uStack_e0 = 0x104d9a;\n      FUN_00103490(param_5);\n      in_ST1 = in_ST1 / (float10)CONCAT28(uStack_c0,CONCAT71(uStack_c7,local_c8));\n      local_c8 = SUB101(in_ST1,0);\n      uStack_c7 = (undefined7)((unkuint10)in_ST1 >> 8);\n      uStack_c0 = (undefined2)((unkuint10)in_ST1 >> 0x40);\n      if (DAT_00112110 != '\\0') {\n        pcVar16 = \"  no scaling, returning (grouped) value: %\\'.*Lf\\n\";\n        if (param_4 == 0) {\n          pcVar16 = \"  no scaling, returning value: %.*Lf\\n\";\n        }\n        local_d8 = SUB108(in_ST1,0);\n        uStack_d0 = (undefined)((unkuint10)in_ST1 >> 0x40);\n        uStack_cf = (undefined)((unkuint10)in_ST1 >> 0x48);\n        uStack_e0 = 0x104de5;\n        __fprintf_chk(stderr,1,pcVar16,param_1);\n      }\n      goto LAB_00104b30;\n    }\n    local_c8 = DAT_00112110;\n    uStack_d0 = 0xec;\n    uStack_cf = 0x4e;\n    uStack_ce = 0x10;\n    iVar5 = FUN_001031b0(uVar17);\n    local_8c = 0;\n    local_a8 = (double)iVar5;\n    local_d8 = param_7;\n    uStack_e0 = 0x104f1c;\n    uStack_d0 = uVar2;\n    uStack_cf = uVar3;\n    FUN_001032f0(iVar5,&local_8c);\n    local_b8 = SUB101(in_ST0,0);\n    uStack_b7 = (undefined7)((unkuint10)in_ST0 >> 8);\n    uStack_b0 = (undefined2)((unkuint10)in_ST0 >> 0x40);\n    if (local_c8 != '\\0') {\n      local_d8 = SUB108(in_ST0,0);\n      uStack_d0 = (undefined)((unkuint10)in_ST0 >> 0x40);\n      uStack_cf = (undefined)((unkuint10)in_ST0 >> 0x48);\n      uStack_e0 = 0x104f5a;\n      __fprintf_chk(stderr,1,\"  scaled value to %Lf * %0.f ^ %u\\n\",local_8c);\n      local_c8 = DAT_00112110;\n    }\nLAB_00104bf0:\n    uVar4 = local_8c;\n    uVar18 = DAT_00112020;\n    if (DAT_00112020 == 0xffffffffffffffff) {\n      uStack_d0 = (undefined)uStack_b0;\n      uStack_cf = (undefined)((ushort)uStack_b0 >> 8);\n      local_d8 = CONCAT71(uStack_b7,local_b8);\n      uStack_e0 = 0x104e80;\n      FUN_001032d0();\n      uVar14 = (ulong)(in_ST1 < (float10)DAT_0010cd84);\n      in_ST1 = in_ST2;\n      in_ST2 = in_ST3;\n      in_ST3 = in_ST4;\n      in_ST4 = in_ST5;\n      local_9d = local_c8;\n    }\n    else {\n      uVar14 = (ulong)(local_8c * 3);\n      local_9d = local_c8;\n      if ((long)DAT_00112020 < (long)(ulong)(local_8c * 3)) {\n        uVar14 = DAT_00112020;\n      }\n    }\n    fVar20 = (float10)DAT_0010cd84;\n    local_c8 = SUB101(fVar20,0);\n    uStack_c7 = (undefined7)((unkuint10)fVar20 >> 8);\n    uStack_c0 = (undefined2)((unkuint10)fVar20 >> 0x40);\n    local_d8 = SUB108(fVar20,0);\n    uStack_d0 = (undefined)((unkuint10)fVar20 >> 0x40);\n    uStack_cf = (undefined)((unkuint10)fVar20 >> 0x48);\n    uStack_ce = (uint6)uStack_be;\n    uStack_e0 = 0x104c3a;\n    local_9c = DAT_0010cd84;\n    FUN_001032a0(uVar14);\n    fVar20 = (float10)CONCAT28(uStack_b0,CONCAT71(uStack_b7,local_b8)) * in_ST1;\n    local_c8 = SUB101(in_ST1,0);\n    uStack_c7 = (undefined7)((unkuint10)in_ST1 >> 8);\n    uStack_c0 = (undefined2)((unkuint10)in_ST1 >> 0x40);\n    local_d8 = SUB108(fVar20,0);\n    uStack_d0 = (undefined)((unkuint10)fVar20 >> 0x40);\n    uStack_cf = (undefined)((unkuint10)fVar20 >> 0x48);\n    uStack_e0 = 0x104c51;\n    FUN_00103490(param_5);\n    in_ST2 = in_ST2 / (float10)CONCAT28(uStack_c0,CONCAT71(uStack_c7,local_c8));\n    local_c8 = SUB101(in_ST2,0);\n    uStack_c7 = (undefined7)((unkuint10)in_ST2 >> 8);\n    uStack_c0 = (undefined2)((unkuint10)in_ST2 >> 0x40);\n    local_d8 = SUB108(in_ST2,0);\n    uStack_d0 = (undefined)((unkuint10)in_ST2 >> 0x40);\n    uStack_cf = (undefined)((unkuint10)in_ST2 >> 0x48);\n    uStack_e0 = 0x104c65;\n    FUN_001032d0();\n    if ((float10)local_a8 <= in_ST3) {\n      uVar4 = uVar4 + 1;\n      fVar20 = (float10)CONCAT28(uStack_c0,CONCAT71(uStack_c7,local_c8)) / (float10)local_a8;\n      local_c8 = SUB101(fVar20,0);\n      uStack_c7 = (undefined7)((unkuint10)fVar20 >> 8);\n      uStack_c0 = (undefined2)((unkuint10)fVar20 >> 0x40);\n      local_8c = uVar4;\n    }\n    uVar14 = (ulong)uVar4;\n    cVar9 = local_9d;\n    if ((float10)CONCAT28(uStack_c0,CONCAT71(uStack_c7,local_c8)) == (float10)0) {\nLAB_00104c91:\n      uVar15 = 0;\n    }\n    else {\n      local_b8 = local_9d;\n      uStack_d0 = (undefined)uStack_c0;\n      uStack_cf = (undefined)((ushort)uStack_c0 >> 8);\n      uStack_ce = (uint6)(CONCAT44(uStack_bc,CONCAT22(uStack_be,uStack_c0)) >> 0x10);\n      local_d8 = CONCAT71(uStack_c7,local_c8);\n      uStack_e0 = 0x104e49;\n      FUN_001032d0();\n      cVar9 = local_b8;\n      if ((float10)local_9c <= in_ST4) goto LAB_00104c91;\n      uVar15 = (ulong)(uVar4 != 0);\n    }\n    if (cVar9 != '\\0') {\n      uStack_d0 = (undefined)uStack_c0;\n      uStack_cf = (undefined)((ushort)uStack_c0 >> 8);\n      uStack_ce = (uint6)(CONCAT44(uStack_bc,CONCAT22(uStack_be,uStack_c0)) >> 0x10);\n      local_d8 = CONCAT71(uStack_c7,local_c8);\n      uStack_e0 = 0x104f9d;\n      __fprintf_chk(local_a8,stderr,1,\"  after rounding, value=%Lf * %0.f ^ %u\\n\",uVar14);\n      uVar14 = (ulong)local_8c;\n      uVar18 = DAT_00112020;\n    }\n    *(undefined *)((long)puVar12 + 6) = 0;\n    *(undefined2 *)(puVar12 + 1) = 0x7325;\n    if (uVar18 != 0xffffffffffffffff) {\n      uVar15 = uVar18 & 0xffffffff;\n    }\n    *puVar12 = 0x664c2a2e;\n    uStack_d0 = 0xc0;\n    uStack_cf = 0x4c;\n    uStack_ce = 0x10;\n    local_d8 = FUN_001031f0(uVar14);\n    uStack_e0 = CONCAT44(uStack_bc,CONCAT22(uStack_be,uStack_c0));\n    uStack_e8 = CONCAT71(uStack_c7,local_c8);\n    uStack_f0 = 0x104cf0;\n    uVar4 = __snprintf_chk(param_2,0x7f,1,0xffffffffffffffff,&local_88,uVar15);\n    if (0x7e < uVar4) {\n      uStack_d0 = 0xf5;\n      uStack_cf = 0x4f;\n      uStack_ce = 0x10;\n      uVar7 = dcgettext(0,\"failed to prepare value \\'%Lf\\' for printing\",5);\n      uStack_d0 = (undefined)uStack_c0;\n      uStack_cf = (undefined)((ushort)uStack_c0 >> 8);\n      uStack_ce = (uint6)(CONCAT44(uStack_bc,CONCAT22(uStack_be,uStack_c0)) >> 0x10);\n      uVar15 = 1;\n      local_d8 = CONCAT71(uStack_c7,local_c8);\n      uStack_e0 = 0x10500e;\n      error(1,0,uVar7);\n      lStack_f8 = *(long *)(in_FS_OFFSET + 0x28);\n      if (DAT_00112020 != 0xffffffffffffffff) {\n        uVar15 = DAT_00112020;\n      }\n      uStack_f0 = uVar14;\n      uStack_e8 = uVar17;\n      uStack_e0 = uVar18;\n      FUN_001032f0(10,&uStack_18c);\n      uVar1 = DAT_0011201c;\n      if ((DAT_00112184 == 0) && (0x12 < uStack_18c + uVar15)) {\n        uVar7 = 0;\n        if (DAT_00112180 != 3) {\n          if (uVar15 == 0) {\n            uVar7 = dcgettext(0,\"value too large to be printed: \\'%Lg\\' (consider using --to)\",5);\n            error(uVar1,0,uVar7);\n            uVar7 = 0;\n          }\n          else {\n            uVar8 = dcgettext(0,\n                              \"value/precision too large to be printed: \\'%Lg/%lu\\' (consider using --to)\"\n                              ,5);\n            error(uVar1,0,uVar8,uVar15);\n          }\n        }\n      }\n      else if (uStack_18c < 0x1b) {\n        FUN_00104a70(uVar15 & 0xffffffff,auStack_180,DAT_00112184,DAT_00112170,DAT_00112038);\n        puVar11 = auStack_180;\n        if (DAT_00112178 != 0) {\n          do {\n            puVar10 = puVar11;\n            uVar6 = *puVar10 + 0xfefefeff & ~*puVar10;\n            uVar4 = uVar6 & 0x80808080;\n            puVar11 = puVar10 + 1;\n          } while (uVar4 == 0);\n          bVar19 = (uVar6 & 0x8080) == 0;\n          if (bVar19) {\n            uVar4 = uVar4 >> 0x10;\n          }\n          if (bVar19) {\n            puVar11 = (uint *)((long)puVar10 + 6);\n          }\n          __strncat_chk(auStack_180,DAT_00112178,\n                        auStack_101 +\n                        -(long)((long)puVar11 + (-3 - (ulong)CARRY1((byte)uVar4,(byte)uVar4))),0x80)\n          ;\n        }\n        puVar11 = auStack_180;\n        if (DAT_00112110 != '\\0') {\n          uVar7 = FUN_00108e10(auStack_180);\n          __fprintf_chk(stderr,1,\"formatting output:\\n  value: %Lf\\n  humanized: %s\\n\",uVar7);\n        }\n        do {\n          puVar10 = puVar11;\n          uVar6 = *puVar10 + 0xfefefeff & ~*puVar10;\n          uVar4 = uVar6 & 0x80808080;\n          puVar11 = puVar10 + 1;\n        } while (uVar4 == 0);\n        bVar19 = (uVar6 & 0x8080) == 0;\n        if (bVar19) {\n          uVar4 = uVar4 >> 0x10;\n        }\n        if (bVar19) {\n          puVar11 = (uint *)((long)puVar10 + 6);\n        }\n        pcVar16 = (char *)((long)puVar11 +\n                          ((-3 - (ulong)CARRY1((byte)uVar4,(byte)uVar4)) - (long)auStack_180));\n        if ((DAT_00112158 == (char *)0x0) || (DAT_00112158 <= pcVar16)) {\n          FUN_00104030(pcVar16 + 1,uVar4 & 0xffffff00);\n          strcpy(DAT_00112168,(char *)auStack_180);\n        }\n        else {\n          pcStack_188 = DAT_00112158;\n          FUN_00106770(auStack_180,DAT_00112168,DAT_00112160,&pcStack_188,DAT_00112018,2);\n          if (DAT_00112110 != '\\0') {\n            uVar7 = FUN_00108e10(DAT_00112168);\n            __fprintf_chk(stderr,1,\"  After padding: %s\\n\",uVar7);\n          }\n        }\n        uVar7 = 1;\n      }\n      else {\n        uVar7 = 0;\n        if (DAT_00112180 != 3) {\n          uVar8 = dcgettext(0,\"value too large to be printed: \\'%Lg\\' (cannot handle values > 999Y)\"\n                            ,5);\n          error(DAT_0011201c,0,uVar8);\n        }\n      }\n      if (lStack_f8 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n        __stack_chk_fail();\n      }\n      return uVar7;\n    }\n    if ((param_3 == 4) && (local_8c != 0)) {\n      uStack_d0 = 0xd5;\n      uStack_cf = 0x4e;\n      uStack_ce = 0x10;\n      strncat(param_2,\"i\",0x7f - (long)(int)uVar4);\n    }\n    if (DAT_00112110 != '\\0') {\n      uStack_d0 = 0x1c;\n      uStack_cf = 0x4d;\n      uStack_ce = 0x10;\n      uVar7 = FUN_00108e10(param_2);\n      uStack_d0 = 0x39;\n      uStack_cf = 0x4d;\n      uStack_ce = 0x10;\n      __fprintf_chk(stderr,1,\"  returning value: %s\\n\",uVar7);\n    }\n  }\n  if (local_40 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return 0;\n  }\nLAB_00104fdd:\n                    /* WARNING: Subroutine does not return */\n  *(undefined8 *)((long)puVar13 + -8) = 0x104fe2;\n  __stack_chk_fail();\n}\n\n", 
    "00102560": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = (char *)(*(code *)PTR_strchr_00111e80)();\n  return pcVar1;\n}\n\n", 
    "00102440": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid abort(void)\n\n{\n  (*(code *)PTR_abort_00111df0)();\n  return;\n}\n\n", 
    "00103530": "\nvoid switchD_001034e3::caseD_0(void)\n\n{\n  FUN_00103370();\n  return;\n}\n\n", 
    "00102680": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint wcwidth(wchar_t __c)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_wcwidth_00111f10)();\n  return iVar1;\n}\n\n", 
    "001096c0": "\nvoid FUN_001096c0(char *param_1,size_t param_2)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strndup(param_1,param_2);\n  if (pcVar1 != (char *)0x0) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  FUN_00109680();\n}\n\n", 
    "00108e10": "\nvoid FUN_00108e10(undefined8 param_1)\n\n{\n  FUN_00108e00(0,param_1);\n  return;\n}\n\n", 
    "001024e0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_fclose_00111e40)();\n  return iVar1;\n}\n\n", 
    "00113200": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\n__ssize_t getdelim(char **__lineptr,size_t *__n,int __delimiter,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "00106b20": "\nvoid FUN_00106b20(char *param_1)\n\n{\n  char *pcVar1;\n  long lVar2;\n  ulong uVar3;\n  byte *pbVar4;\n  byte *pbVar5;\n  bool bVar6;\n  bool bVar7;\n  byte bVar8;\n  \n  bVar8 = 0;\n  if (param_1 == (char *)0x0) {\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\",1,0x37,stderr);\n                    /* WARNING: Subroutine does not return */\n    abort();\n  }\n  pcVar1 = strrchr(param_1,0x2f);\n  if (pcVar1 != (char *)0x0) {\n    DAT_001121b0 = pcVar1 + 1;\n    uVar3 = (long)DAT_001121b0 - (long)param_1;\n    bVar6 = uVar3 < 6;\n    bVar7 = uVar3 == 6;\n    if (6 < (long)uVar3) {\n      lVar2 = 7;\n      pbVar4 = (byte *)(pcVar1 + -6);\n      pbVar5 = (byte *)\"/.libs/\";\n      do {\n        if (lVar2 == 0) break;\n        lVar2 = lVar2 + -1;\n        bVar6 = *pbVar4 < *pbVar5;\n        bVar7 = *pbVar4 == *pbVar5;\n        pbVar4 = pbVar4 + (ulong)bVar8 * -2 + 1;\n        pbVar5 = pbVar5 + (ulong)bVar8 * -2 + 1;\n      } while (bVar7);\n      if ((!bVar6 && !bVar7) == bVar6) {\n        if (((pcVar1[1] != 'l') || (pcVar1[2] != 't')) || (pcVar1[3] != '-')) {\n          program_invocation_name = DAT_001121b0;\n          return;\n        }\n        param_1 = pcVar1 + 4;\n        program_invocation_short_name = param_1;\n      }\n    }\n  }\n  DAT_001121b0 = param_1;\n  program_invocation_name = param_1;\n  return;\n}\n\n", 
    "00106e80": "\nundefined8\nFUN_00106e80(long param_1,undefined8 param_2,byte param_3,char param_4,char param_5,char param_6,\n            char param_7)\n\n{\n  char cVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  \n  cVar1 = FUN_00106540((int)(char)param_3);\n  bVar2 = *(byte *)(param_1 + 4);\n  if (cVar1 != '\\0') {\n    bVar2 = bVar2 & 0xdf;\n  }\n  if (param_3 != bVar2) {\n    return 0;\n  }\n  if (param_3 == 0) {\n    return 1;\n  }\n  uVar3 = FUN_00106dd0(param_1,param_2,(int)param_4,(int)param_5,(int)param_6,(int)param_7);\n  return uVar3;\n}\n\n", 
    "00103a90": "\nchar * FUN_00103a90(char **param_1)\n\n{\n  char *pcVar1;\n  char *pcVar2;\n  char cVar3;\n  char *pcVar4;\n  \n  pcVar2 = *param_1;\n  cVar3 = *pcVar2;\n  pcVar4 = pcVar2;\n  if (DAT_00112014 == 0x80) {\n    while (cVar3 != '\\0') {\n      cVar3 = FUN_00103a60(cVar3);\n      if (cVar3 == '\\0') goto LAB_00103b14;\n      cVar3 = pcVar4[1];\n      pcVar4 = pcVar4 + 1;\n    }\n  }\n  else if ((DAT_00112014 != cVar3) && (cVar3 != '\\0')) {\n    do {\n      pcVar1 = pcVar4 + 1;\n      pcVar4 = pcVar4 + 1;\n      if (*pcVar1 == '\\0') break;\n    } while (DAT_00112014 != *pcVar1);\n  }\nLAB_00103ad0:\n  *param_1 = pcVar4;\n  return pcVar2;\nLAB_00103b14:\n  for (; *pcVar4 != '\\0'; pcVar4 = pcVar4 + 1) {\n    cVar3 = FUN_00103a60();\n    if (cVar3 != '\\0') {\n      *param_1 = pcVar4;\n      return pcVar2;\n    }\n  }\n  goto LAB_00103ad0;\n}\n\n", 
    "00108da0": "\nvoid FUN_00108da0(undefined8 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  FUN_00108d90(0,param_1,param_2,param_3);\n  return;\n}\n\n", 
    "00109500": "\nvoid FUN_00109500(undefined8 param_1,ulong param_2,ulong param_3)\n\n{\n  if ((-1 < SUB168(ZEXT816(param_2) * ZEXT816(param_3),0)) &&\n     (SUB168(ZEXT816(param_2) * ZEXT816(param_3) >> 0x40,0) == 0)) {\n    FUN_001094c0();\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  FUN_00109680();\n}\n\n", 
    "0010a230": "\nvoid FUN_0010a230(undefined4 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  long lVar1;\n  \n  __DT_INIT();\n  lVar1 = 0;\n  do {\n    (*(code *)(&__DT_INIT_ARRAY)[lVar1])(param_1,param_2,param_3);\n    lVar1 = lVar1 + 1;\n  } while (lVar1 != 1);\n  return;\n}\n\n", 
    "00108b80": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nvoid FUN_00108b80(undefined8 param_1,undefined8 param_2,char param_3,undefined8 param_4)\n\n{\n  undefined8 *puVar1;\n  long in_FS_OFFSET;\n  undefined8 local_48;\n  undefined8 uStack_40;\n  undefined8 local_38;\n  undefined8 uStack_30;\n  undefined8 local_28;\n  undefined8 uStack_20;\n  undefined8 local_18;\n  long local_10;\n  \n  puVar1 = &local_48;\n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  local_48 = _DAT_001122c0;\n  uStack_40 = uRam00000000001122c8;\n  local_38 = _DAT_001122d0;\n  uStack_30 = uRam00000000001122d8;\n  local_28 = _DAT_001122e0;\n  uStack_20 = uRam00000000001122e8;\n  local_18 = DAT_001122f0;\n  FUN_00108770(&local_48,(int)param_3,1,param_4,param_1,param_2);\n  FUN_00108550(0,param_1,param_2,puVar1);\n  if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "00108a60": "\nvoid FUN_00108a60(undefined8 param_1)\n\n{\n  FUN_00108a30(0,param_1);\n  return;\n}\n\n", 
    "00102750": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nuintmax_t strtoumax(char *__nptr,char **__endptr,int __base)\n\n{\n  uintmax_t uVar1;\n  \n  uVar1 = (*(code *)PTR_strtoumax_00111f78)();\n  return uVar1;\n}\n\n", 
    "00108730": "\nundefined4 FUN_00108730(undefined4 *param_1)\n\n{\n  if (param_1 == (undefined4 *)0x0) {\n    param_1 = (undefined4 *)&DAT_001122c0;\n  }\n  return *param_1;\n}\n\n", 
    "00106310": "\nlong FUN_00106310(undefined8 param_1,undefined8 param_2,undefined8 param_3,undefined8 param_4,\n                 undefined8 param_5,code *param_6)\n\n{\n  long lVar1;\n  \n  lVar1 = FUN_00106070(param_2,param_3,param_4,param_5);\n  if (lVar1 < 0) {\n    FUN_00106180(param_1,param_2,lVar1);\n    FUN_00106210(param_3,param_4,param_5);\n    (*param_6)();\n    lVar1 = -1;\n  }\n  return lVar1;\n}\n\n", 
    "00106550": "\nulong FUN_00106550(int param_1)\n\n{\n  ulong uVar1;\n  \n  if (param_1 - 0x30U < 0x37) {\n    uVar1 = 1L << ((byte)(param_1 - 0x30U) & 0x3f);\n    return uVar1 & 0xffffffffffffff00 | (ulong)((uVar1 & 0x7e0000007e03ff) != 0);\n  }\n  return 0;\n}\n\n", 
    "001025b0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nchar * strncat(char *__dest,char *__src,size_t __n)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = (char *)(*(code *)PTR_strncat_00111ea8)();\n  return pcVar1;\n}\n\n", 
    "0010a2b0": "\nvoid FUN_0010a2b0(undefined8 param_1)\n\n{\n  __cxa_atexit(param_1,0,PTR_LOOP_00112008);\n  return;\n}\n\n", 
    "00109270": "\nvoid FUN_00109270(void)\n\n{\n  long lVar1;\n  long *in_R8;\n  long lVar2;\n  \n  lVar2 = 0;\n  lVar1 = *in_R8;\n  while (lVar1 != 0) {\n    lVar2 = lVar2 + 1;\n    lVar1 = in_R8[lVar2];\n  }\n  FUN_00108e20();\n  return;\n}\n\n", 
    "001027f0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nushort ** __ctype_b_loc(void)\n\n{\n  ushort **ppuVar1;\n  \n  ppuVar1 = (ushort **)(*(code *)PTR___ctype_b_loc_00111fc8)();\n  return ppuVar1;\n}\n\n", 
    "00109ae0": "\nbool FUN_00109ae0(ulong *param_1,int param_2)\n\n{\n  ulong uVar1;\n  bool bVar2;\n  \n  uVar1 = SUB168(ZEXT816((ulong)(long)param_2) * ZEXT816(*param_1),0);\n  bVar2 = SUB168(ZEXT816((ulong)(long)param_2) * ZEXT816(*param_1) >> 0x40,0) != 0;\n  if (bVar2) {\n    uVar1 = 0xffffffffffffffff;\n  }\n  *param_1 = uVar1;\n  return bVar2;\n}\n\n", 
    "001026d0": "\nvoid __freading(void)\n\n{\n  (*(code *)PTR___freading_00111f38)();\n  return;\n}\n\n", 
    "001087d0": "\nvoid FUN_001087d0(undefined4 *param_1,long param_2,long param_3)\n\n{\n  if (param_1 == (undefined4 *)0x0) {\n    param_1 = (undefined4 *)&DAT_001122c0;\n  }\n  *param_1 = 10;\n  if ((param_2 != 0) && (param_3 != 0)) {\n    *(long *)(param_1 + 10) = param_2;\n    *(long *)(param_1 + 0xc) = param_3;\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n", 
    "001064d0": "\nulong FUN_001064d0(int param_1)\n\n{\n  ulong in_RAX;\n  \n  if (0x60 < param_1) {\n    return in_RAX & 0xffffffffffffff00 | (ulong)(param_1 - 0x7bU < 4);\n  }\n  if (param_1 < 0x5b) {\n    if (param_1 < 0x30) {\n      return in_RAX & 0xffffffffffffff00 | (ulong)(0x20 < param_1);\n    }\n    return in_RAX & 0xffffffffffffff00 | (ulong)(param_1 - 0x3aU < 7);\n  }\n  return 1;\n}\n\n", 
    "00113098": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid getopt_long(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "001030e0": "\n/* WARNING: Removing unreachable block (ram,0x001030f3) */\n/* WARNING: Removing unreachable block (ram,0x001030ff) */\n\nvoid FUN_001030e0(void)\n\n{\n  return;\n}\n\n", 
    "00102740": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint fseeko(FILE *__stream,__off_t __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_fseeko_00111f70)();\n  return iVar1;\n}\n\n", 
    "00102620": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_strcmp_00111ee0)();\n  return iVar1;\n}\n\n", 
    "00102500": "\nvoid dcgettext(void)\n\n{\n  (*(code *)PTR_dcgettext_00111e50)();\n  return;\n}\n\n", 
    "00113090": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid __stack_chk_fail(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "00108a70": "\nvoid FUN_00108a70(undefined8 param_1,undefined8 param_2)\n\n{\n  FUN_00108a50(0,param_1,param_2);\n  return;\n}\n\n", 
    "00106540": "\nbool FUN_00106540(int param_1)\n\n{\n  return param_1 - 0x41U < 0x1a;\n}\n\n", 
    "00103150": "\nvoid FUN_00103150(void)\n\n{\n  if (DAT_00112108 == '\\0') {\n    if (PTR___cxa_finalize_00111ff0 != (undefined *)0x0) {\n      __cxa_finalize(PTR_LOOP_00112008);\n    }\n    FUN_001030e0();\n    DAT_00112108 = 1;\n    return;\n  }\n  return;\n}\n\n", 
    "00106420": "\nbool FUN_00106420(int param_1)\n\n{\n  if (param_1 < 0x5b) {\n    return 0x40 < param_1;\n  }\n  return param_1 - 0x61U < 0x1a;\n}\n\n", 
    "00106ff0": "\nundefined8\nFUN_00106ff0(long param_1,undefined8 param_2,byte param_3,char param_4,char param_5,char param_6,\n            char param_7)\n\n{\n  char cVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  \n  cVar1 = FUN_00106540((int)(char)param_3);\n  bVar2 = *(byte *)(param_1 + 2);\n  if (cVar1 != '\\0') {\n    bVar2 = bVar2 & 0xdf;\n  }\n  if (param_3 != bVar2) {\n    return 0;\n  }\n  if (param_3 == 0) {\n    return 1;\n  }\n  uVar3 = FUN_00106f30(param_1,param_2,(int)param_4,(int)param_5,(int)param_6,(int)param_7);\n  return uVar3;\n}\n\n", 
    "001026c0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nchar * nl_langinfo(nl_item __item)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = (char *)(*(code *)PTR_nl_langinfo_00111f30)();\n  return pcVar1;\n}\n\n", 
    "001025a0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid * memset(void *__s,int __c,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = (void *)(*(code *)PTR_memset_00111ea0)();\n  return pvVar1;\n}\n\n", 
    "001038d0": "\nlong FUN_001038d0(char *param_1)\n\n{\n  char cVar1;\n  int iVar2;\n  size_t __n;\n  char *__dest;\n  undefined8 uVar3;\n  undefined8 uVar4;\n  char *pcVar5;\n  char *pcVar6;\n  long in_FS_OFFSET;\n  char *local_50;\n  char *local_40;\n  long local_38;\n  long local_30;\n  \n  local_30 = *(long *)(in_FS_OFFSET + 0x28);\n  __n = strlen(param_1);\n  local_40 = (char *)0x0;\n  pcVar5 = param_1;\n  if (__n == 0) {\n    local_50 = \"KMGTPEZY\";\n    __dest = (char *)0x0;\n  }\n  else {\n    __dest = (char *)0x0;\n    cVar1 = FUN_00106490((int)param_1[__n - 1]);\n    local_50 = \"KMGTPEZY\";\n    if (cVar1 == '\\0') {\n      local_50 = \"KMGTPEZY\";\n      __dest = (char *)FUN_00109460(__n + 2);\n      pcVar6 = __dest + (__n - 1);\n      local_40 = pcVar6;\n      memcpy(__dest,param_1,__n);\n      pcVar5 = __dest;\n      if ((*pcVar6 == 'i') && (__n != 1)) {\n        cVar1 = FUN_00106490((int)pcVar6[-1]);\n        if (cVar1 == '\\0') {\n          *pcVar6 = '\\0';\n          goto LAB_00103928;\n        }\n      }\n      local_40 = pcVar6 + 2;\n      local_50 = \"KMGTPEZY0\";\n      *(undefined2 *)(pcVar6 + 1) = 0x42;\n    }\n  }\nLAB_00103928:\n  iVar2 = FUN_00109b40(pcVar5,&local_40,10,&local_38,local_50);\n  if (((iVar2 == 0) && (*local_40 == '\\0')) && (local_38 != 0)) {\n    free(__dest);\n    if (local_30 == *(long *)(in_FS_OFFSET + 0x28)) {\n      return local_38;\n    }\n  }\n  else {\n    free(__dest);\n    uVar3 = FUN_00108e10(param_1);\n    uVar4 = dcgettext(0,\"invalid unit size: %s\",5);\n    error(1,0,uVar4,uVar3);\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "001027e0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\n__ssize_t getdelim(char **__lineptr,size_t *__n,int __delimiter,FILE *__stream)\n\n{\n  __ssize_t _Var1;\n  \n  _Var1 = (*(code *)PTR_getdelim_00111fc0)();\n  return _Var1;\n}\n\n", 
    "001064c0": "\nbool FUN_001064c0(int param_1)\n\n{\n  return param_1 - 0x20U < 0x5f;\n}\n\n", 
    "001040a0": "\nvoid FUN_001040a0(undefined4 param_1,undefined8 param_2)\n\n{\n  undefined8 uVar1;\n  undefined8 uVar2;\n  char *pcVar3;\n  \n  switch(param_1) {\n  case 0:\n  case 1:\n                    /* WARNING: Subroutine does not return */\n    abort();\n  case 2:\n    pcVar3 = \"value too large to be converted: %s\";\n    break;\n  case 3:\n    pcVar3 = \"invalid number: %s\";\n    break;\n  case 4:\n    pcVar3 = \"rejecting suffix in input: %s (consider using --from)\";\n    break;\n  case 5:\n    pcVar3 = \"invalid suffix in input: %s\";\n    break;\n  case 6:\n    pcVar3 = \"missing \\'i\\' suffix in input: %s (e.g Ki/Mi/Gi)\";\n    break;\n  default:\n    FUN_001040cf();\n    return;\n  }\n  if (DAT_00112180 != 3) {\n    uVar1 = FUN_00108e10(param_2);\n    uVar2 = dcgettext(0,pcVar3,5);\n    error(DAT_0011201c,0,uVar2,uVar1);\n    return;\n  }\n  return;\n}\n\n", 
    "001065e0": "\nvoid FUN_001065e0(void)\n\n{\n  int iVar1;\n  int *piVar2;\n  undefined8 uVar3;\n  undefined8 uVar4;\n  \n  iVar1 = FUN_00109fc0(stdout);\n  if (iVar1 != 0) {\n    piVar2 = __errno_location();\n    if ((DAT_001121a0 == '\\0') || (*piVar2 != 0x20)) {\n      uVar3 = dcgettext(0,\"write error\",5);\n      if (DAT_001121a8 == 0) {\n        error(0,*piVar2,&DAT_0010cf7b,uVar3);\n      }\n      else {\n        uVar4 = FUN_00108c30();\n        error(0,*piVar2,\"%s: %s\",uVar4,uVar3);\n      }\n      goto LAB_00106668;\n    }\n  }\n  iVar1 = FUN_00109fc0(stderr);\n  if (iVar1 == 0) {\n    return;\n  }\nLAB_00106668:\n                    /* WARNING: Subroutine does not return */\n  _exit(DAT_00112050);\n}\n\n", 
    "001031f0": "\nchar * FUN_001031f0(undefined4 param_1)\n\n{\n  switch(param_1) {\n  case 0:\n    return \"\";\n  case 1:\n    return \"K\";\n  case 2:\n    return \"M\";\n  case 3:\n    return \"G\";\n  case 4:\n    return \"T\";\n  case 5:\n    return \"P\";\n  case 6:\n    return \"E\";\n  case 7:\n    return \"Z\";\n  case 8:\n    return \"Y\";\n  default:\n    return \"(error)\";\n  }\n}\n\n", 
    "00102730": "\nvoid error(void)\n\n{\n  (*(code *)PTR_error_00111f68)();\n  return;\n}\n\n", 
    "00102610": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid * calloc(size_t __nmemb,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = (void *)(*(code *)PTR_calloc_00111ed8)();\n  return pvVar1;\n}\n\n", 
    "00102770": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nsize_t wcstombs(char *__s,wchar_t *__pwcs,size_t __n)\n\n{\n  size_t sVar1;\n  \n  sVar1 = (*(code *)PTR_wcstombs_00111f88)();\n  return sVar1;\n}\n\n", 
    "00102650": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = (void *)(*(code *)PTR_memcpy_00111ef8)();\n  return pvVar1;\n}\n\n", 
    "00102530": "\nvoid __stack_chk_fail(void)\n\n{\n  (*(code *)PTR___stack_chk_fail_00111e68)();\n  return;\n}\n\n", 
    "001040cf": "\nvoid FUN_001040cf(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined8 uVar1;\n  undefined8 uVar2;\n  \n  if (DAT_00112180 != 3) {\n    uVar1 = FUN_00108e10(param_2);\n    uVar2 = dcgettext(0);\n    error(DAT_0011201c,0,uVar2,uVar1);\n    return;\n  }\n  return;\n}\n\n", 
    "00108b60": "\nvoid FUN_00108b60(undefined4 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  FUN_00108ae0(0,param_1,param_2,param_3);\n  return;\n}\n\n", 
    "00106210": "\nvoid FUN_00106210(long *param_1,void *param_2,size_t param_3)\n\n{\n  long lVar1;\n  FILE *__stream;\n  int iVar2;\n  char *__s;\n  undefined8 uVar3;\n  long lVar4;\n  void *__s1;\n  \n  __stream = stderr;\n  __s1 = (void *)0x0;\n  __s = (char *)dcgettext(0,\"Valid arguments are:\",5);\n  fputs_unlocked(__s,__stream);\n  lVar4 = 0;\n  lVar1 = *param_1;\n  while (lVar1 != 0) {\n    if ((lVar4 == 0) || (iVar2 = memcmp(__s1,param_2,param_3), iVar2 != 0)) {\n      uVar3 = FUN_00108e10(lVar1);\n      __fprintf_chk(stderr,1,\"\\n  - %s\",uVar3);\n      __s1 = param_2;\n    }\n    else {\n      uVar3 = FUN_00108e10(lVar1);\n      __fprintf_chk(stderr,1,&DAT_0010cf79,uVar3);\n    }\n    lVar4 = lVar4 + 1;\n    param_2 = (void *)((long)param_2 + param_3);\n    lVar1 = param_1[lVar4];\n  }\n  putc_unlocked(10,stderr);\n  return;\n}\n\n", 
    "00104030": "\nvoid FUN_00104030(ulong param_1)\n\n{\n  if (param_1 < DAT_00112160) {\n    return;\n  }\n  DAT_00112160 = param_1 + 1;\n  DAT_00112168 = FUN_001094c0(DAT_00112168);\n  return;\n}\n\n", 
    "00106450": "\nuint FUN_00106450(int param_1,undefined8 param_2,uint param_3)\n\n{\n  uint in_EAX;\n  \n  return in_EAX & 0xffffff00 | (uint)(param_1 == 0x20) | param_3 & 0xffffff00 | (uint)(param_1 == 9)\n  ;\n}\n\n", 
    "00108750": "\nvoid FUN_00108750(undefined4 *param_1,undefined4 param_2)\n\n{\n  if (param_1 == (undefined4 *)0x0) {\n    param_1 = (undefined4 *)&DAT_001122c0;\n  }\n  *param_1 = param_2;\n  return;\n}\n\n", 
    "00106690": "\nvoid FUN_00106690(undefined *param_1,undefined *param_2,long param_3)\n\n{\n  undefined *puVar1;\n  undefined *puVar2;\n  \n  puVar1 = param_1;\n  if ((param_1 < param_2) && (puVar2 = param_1, param_3 != 0)) {\n    do {\n      puVar1 = puVar2 + 1;\n      *puVar2 = 0x20;\n      if (param_1 + (param_3 - (long)puVar1) == (undefined *)0x0) break;\n      puVar2 = puVar1;\n    } while (puVar1 < param_2);\n  }\n  *puVar1 = 0;\n  return;\n}\n\n", 
    "00108990": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nvoid FUN_00108990(void)\n\n{\n  void **ppvVar1;\n  void *__ptr;\n  undefined *__ptr_00;\n  void **ppvVar2;\n  \n  __ptr_00 = PTR_DAT_001120a0;\n  if (1 < DAT_00112098) {\n    ppvVar2 = (void **)(PTR_DAT_001120a0 + 0x18);\n    ppvVar1 = (void **)(PTR_DAT_001120a0 + (ulong)(DAT_00112098 - 2) * 0x10 + 0x28);\n    do {\n      __ptr = *ppvVar2;\n      ppvVar2 = ppvVar2 + 2;\n      free(__ptr);\n    } while (ppvVar2 != ppvVar1);\n  }\n  if (*(undefined **)(__ptr_00 + 8) != &DAT_001121c0) {\n    free(*(undefined **)(__ptr_00 + 8));\n    PTR_DAT_001120b8 = &DAT_001121c0;\n    _DAT_001120b0 = 0x100;\n  }\n  if (__ptr_00 != &DAT_001120b0) {\n    free(__ptr_00);\n    PTR_DAT_001120a0 = &DAT_001120b0;\n  }\n  DAT_00112098 = 1;\n  return;\n}\n\n", 
    "00105360": "\nundefined4 FUN_00105360(char *param_1,undefined8 param_2)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  long in_FS_OFFSET;\n  undefined8 local_40;\n  undefined8 local_38;\n  undefined2 uStack_30;\n  long local_20;\n  \n  local_20 = *(long *)(in_FS_OFFSET + 0x28);\n  local_38 = SUB108((float10)0,0);\n  uStack_30 = (undefined2)((unkuint10)(float10)0 >> 0x40);\n  local_40 = 0;\n  uVar1 = FUN_00103590(param_2);\n  if ((char)uVar1 == '\\0') {\n    uVar1 = 1;\n    fputs_unlocked(param_1,stdout);\n  }\n  else {\n    iVar2 = FUN_00104520(param_1,&local_38,&local_40,param_2);\n    if (iVar2 != 0) {\n      iVar2 = FUN_00105010(local_40);\n      if (iVar2 != 0) {\n        FUN_00103610();\n        goto LAB_001053dd;\n      }\n    }\n    uVar1 = 0;\n    fputs_unlocked(param_1,stdout);\n  }\nLAB_001053dd:\n  if (local_20 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return uVar1;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "001059c0": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nvoid FUN_001059c0(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined8 *puVar1;\n  \n  if (DAT_00112300 == _DAT_00112198) {\n    DAT_001122f8 = FUN_00109530(DAT_001122f8,&DAT_00112198,0x10);\n  }\n  puVar1 = (undefined8 *)(DAT_001122f8 + DAT_00112300 * 0x10);\n  *puVar1 = param_1;\n  puVar1[1] = param_2;\n  DAT_00112300 = DAT_00112300 + 1;\n  return;\n}\n\n", 
    "001026f0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = (char *)(*(code *)PTR_setlocale_00111f48)();\n  return pcVar1;\n}\n\n", 
    "001025d0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nchar * strndup(char *__string,size_t __n)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = (char *)(*(code *)PTR_strndup_00111eb8)();\n  return pcVar1;\n}\n\n", 
    "001024b0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint wcswidth(wchar_t *__s,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_wcswidth_00111e28)();\n  return iVar1;\n}\n\n", 
    "00105b20": "\nvoid FUN_00105b20(char *param_1,uint param_2)\n\n{\n  ulong *__dest;\n  undefined8 *puVar1;\n  char cVar2;\n  bool bVar3;\n  bool bVar4;\n  bool bVar5;\n  bool bVar6;\n  bool bVar7;\n  byte bVar8;\n  ushort **ppuVar9;\n  undefined8 uVar10;\n  size_t sVar11;\n  void *pvVar12;\n  undefined8 uVar13;\n  long lVar14;\n  ulong uVar15;\n  long lVar16;\n  char *pcVar17;\n  int iVar18;\n  ulong uVar19;\n  ulong uVar20;\n  long lVar21;\n  \n  if ((((param_2 & 1) == 0) || (*param_1 != '-')) || (param_1[1] != '\\0')) {\n    uVar15 = 0;\n    bVar3 = false;\n  }\n  else {\n    param_1 = param_1 + 1;\n    uVar15 = 1;\n    bVar3 = true;\n  }\n  bVar7 = false;\n  uVar20 = 1;\n  bVar5 = false;\n  bVar6 = bVar3;\n  do {\n    cVar2 = *param_1;\n    bVar4 = bVar5;\n    if (cVar2 == '-') {\n      if (bVar3) goto LAB_00105f0c;\n      bVar7 = (bool)(uVar15 == 0 & bVar6);\n      if (bVar7) {\nLAB_00105e6a:\n        if ((param_2 & 4) == 0) {\n          uVar10 = dcgettext(0,\"fields are numbered from 1\",5);\n        }\n        else {\n          uVar10 = dcgettext(0,\"byte/character positions are numbered from 1\",5);\n        }\n        goto LAB_00105e8b;\n      }\n      if (bVar6) {\n        uVar19 = 0;\n        uVar20 = uVar15;\n        bVar3 = bVar6;\n      }\n      else {\n        uVar19 = 0;\n        bVar3 = true;\n        uVar20 = 1;\n        bVar7 = bVar6;\n      }\n    }\n    else {\n      if (cVar2 != ',') {\n        ppuVar9 = __ctype_b_loc();\n        iVar18 = (int)cVar2;\n        bVar8 = FUN_001059b0();\n        if (((*(byte *)(*ppuVar9 + bVar8) & 1) == 0) && (cVar2 != '\\0')) {\n          if (iVar18 - 0x30U < 10) {\n            if ((!bVar7) || (DAT_00112190 == (char *)0x0)) {\n              DAT_00112190 = param_1;\n            }\n            bVar4 = bVar3;\n            if (!bVar3) {\n              bVar6 = true;\n              bVar4 = bVar5;\n            }\n            if (0x1999999999999999 < uVar15) goto LAB_00105ea0;\n            uVar19 = (long)(int)(iVar18 - 0x30U) + uVar15 * 10;\n            if (uVar19 < uVar15) goto LAB_00105ea0;\n            if (uVar19 == 0xffffffffffffffff) goto LAB_00105ea0;\n            bVar7 = true;\n            goto LAB_00105bfc;\n          }\n          uVar10 = FUN_00108e10(param_1);\n          if ((param_2 & 4) == 0) {\n            uVar13 = dcgettext(0,\"invalid field value %s\",5);\n          }\n          else {\n            uVar13 = dcgettext(0,\"invalid byte/character position %s\",5);\n          }\n          error(0,0,uVar13,uVar10);\n          FUN_00105500(1);\n          goto LAB_00105fd6;\n        }\n      }\n      if (bVar3) {\n        if (bVar6) {\n          if (!bVar5) goto LAB_00105bd9;\nLAB_00105d91:\n          if (uVar15 < uVar20) {\n            pcVar17 = \"invalid decreasing range\";\n            goto LAB_00105f3a;\n          }\n          FUN_001059c0(uVar20,uVar15);\n        }\n        else {\n          if (bVar5) goto LAB_00105d91;\n          if ((param_2 & 1) == 0) {\n            pcVar17 = \"invalid range with no endpoint: -\";\n            goto LAB_00105f3a;\n          }\n          uVar20 = 1;\nLAB_00105bd9:\n          FUN_001059c0(uVar20,0xffffffffffffffff);\n        }\n        cVar2 = *param_1;\n      }\n      else {\n        if (uVar15 == 0) goto LAB_00105e6a;\n        FUN_001059c0(uVar15,uVar15);\n        cVar2 = *param_1;\n      }\n      if (cVar2 == '\\0') break;\n      uVar19 = 0;\n      bVar7 = false;\n      bVar3 = false;\n      bVar4 = false;\n      bVar6 = false;\n    }\nLAB_00105bfc:\n    param_1 = param_1 + 1;\n    uVar15 = uVar19;\n    bVar5 = bVar4;\n  } while( true );\n  if (DAT_00112300 == 0) {\nLAB_00105fd6:\n    if ((param_2 & 4) == 0) {\n      pcVar17 = \"missing list of fields\";\nLAB_00105f3a:\n      uVar10 = dcgettext(0,pcVar17,5);\n    }\n    else {\n      uVar10 = dcgettext(0,\"missing list of byte/character positions\",5);\n    }\nLAB_00105e8b:\n    do {\n      error(0,0,uVar10);\n      FUN_00105500(1);\nLAB_00105ea0:\n      pcVar17 = DAT_00112190;\n      sVar11 = strspn(DAT_00112190,\"0123456789\");\n      pvVar12 = (void *)FUN_001096c0(pcVar17,sVar11);\n      uVar10 = FUN_00108e10(pvVar12);\n      if ((param_2 & 4) == 0) {\n        uVar13 = dcgettext(0,\"field number %s is too large\",5);\n      }\n      else {\n        uVar13 = dcgettext(0,\"byte/character offset %s is too large\",5);\n      }\n      error(0,0,uVar13,uVar10);\n      free(pvVar12);\n      FUN_00105500();\nLAB_00105f0c:\n      if ((param_2 & 4) == 0) {\n        uVar10 = dcgettext(0,\"invalid field range\",5);\n      }\n      else {\n        uVar10 = dcgettext(0,\"invalid byte or character range\",5);\n      }\n    } while( true );\n  }\n  uVar15 = 0;\n  lVar21 = -2;\n  qsort(DAT_001122f8,DAT_00112300,0x10,FUN_00105a40);\n  lVar16 = 0x10;\n  if (DAT_00112300 != 0) {\n    while (uVar15 = uVar15 + 1, uVar15 < DAT_00112300) {\n      while( true ) {\n        __dest = (ulong *)((long)DAT_001122f8 + lVar16);\n        uVar20 = *(ulong *)((long)DAT_001122f8 + lVar16 + -8);\n        if (uVar20 <= *__dest && *__dest != uVar20) break;\n        if (uVar20 <= __dest[1]) {\n          uVar20 = __dest[1];\n        }\n        lVar14 = DAT_00112300 + lVar21;\n        pvVar12 = (void *)((long)DAT_001122f8 + lVar16 + 0x10);\n        *(ulong *)((long)DAT_001122f8 + lVar16 + -8) = uVar20;\n        memmove(__dest,pvVar12,lVar14 * 0x10);\n        DAT_00112300 = DAT_00112300 - 1;\n        if (DAT_00112300 <= uVar15) goto LAB_00105d20;\n      }\n      lVar21 = lVar21 + -1;\n      lVar16 = lVar16 + 0x10;\n      if (DAT_00112300 <= uVar15) break;\n    }\n  }\nLAB_00105d20:\n  if ((param_2 & 2) != 0) {\n    FUN_00105a60();\n  }\n  DAT_00112300 = DAT_00112300 + 1;\n  DAT_001122f8 = (void *)FUN_001094c0(DAT_001122f8,DAT_00112300 * 0x10);\n  puVar1 = (undefined8 *)((long)DAT_001122f8 + -0x10 + DAT_00112300 * 0x10);\n  puVar1[1] = 0xffffffffffffffff;\n  *puVar1 = 0xffffffffffffffff;\n  return;\n}\n\n", 
    "00113078": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid dcgettext(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "00113198": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "00103a60": "\nuint FUN_00103a60(byte param_1)\n\n{\n  ushort **ppuVar1;\n  uint extraout_EDX;\n  \n  ppuVar1 = __ctype_b_loc();\n  return (*ppuVar1)[param_1] & 1 | extraout_EDX & 0xffffff00 | (uint)(param_1 == 10);\n}\n\n", 
    "00102520": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = (*(code *)PTR_strlen_00111e60)();\n  return sVar1;\n}\n\n", 
    "00103610": "\nvoid FUN_00103610(void)\n\n{\n  if (DAT_00112140 != (char *)0x0) {\n    fputs_unlocked(DAT_00112140,stdout);\n  }\n  fputs_unlocked(DAT_00112168,stdout);\n  if (DAT_00112138 != (char *)0x0) {\n    fputs_unlocked(DAT_00112138,stdout);\n    return;\n  }\n  return;\n}\n\n", 
    "00113070": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid bindtextdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "00113190": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid * mempcpy(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "00102760": "\nvoid __cxa_atexit(void)\n\n{\n  (*(code *)PTR___cxa_atexit_00111f80)();\n  return;\n}\n\n", 
    "00102640": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = (*(code *)PTR_strtol_00111ef0)();\n  return lVar1;\n}\n\n", 
    "00108a50": "\nvoid FUN_00108a50(void)\n\n{\n  FUN_00108550();\n  return;\n}\n\n", 
    "00109b40": "\nuint FUN_00109b40(byte *param_1,byte **param_2,uint param_3,uintmax_t *param_4,char *param_5)\n\n{\n  byte bVar1;\n  uint uVar2;\n  int *piVar3;\n  ushort **ppuVar4;\n  byte *pbVar5;\n  uintmax_t uVar6;\n  char *pcVar7;\n  int iVar8;\n  undefined8 uVar9;\n  uint uVar10;\n  byte bVar11;\n  long in_FS_OFFSET;\n  byte *local_50;\n  uintmax_t local_48;\n  long local_40;\n  \n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  if (0x24 < param_3) {\n                    /* WARNING: Subroutine does not return */\n    __assert_fail(\"0 <= strtol_base && strtol_base <= 36\",\"lib/xstrtol.c\",0x60,\"xstrtoumax\");\n  }\n  if (param_2 == (byte **)0x0) {\n    param_2 = &local_50;\n  }\n  piVar3 = __errno_location();\n  *piVar3 = 0;\n  bVar11 = *param_1;\n  ppuVar4 = __ctype_b_loc();\n  pbVar5 = param_1;\n  while ((*(byte *)((long)*ppuVar4 + (ulong)bVar11 * 2 + 1) & 0x20) != 0) {\n    bVar11 = pbVar5[1];\n    pbVar5 = pbVar5 + 1;\n  }\n  if (bVar11 != 0x2d) {\n    uVar6 = strtoumax((char *)param_1,(char **)param_2,param_3);\n    pbVar5 = *param_2;\n    local_48 = uVar6;\n    if (pbVar5 != param_1) {\n      if (*piVar3 == 0) {\n        uVar10 = 0;\n      }\n      else {\n        uVar10 = 1;\n        if (*piVar3 != 0x22) goto LAB_00109c3b;\n      }\n      if ((param_5 != (char *)0x0) && (bVar11 = *pbVar5, bVar11 != 0)) {\n        iVar8 = (int)(char)bVar11;\nLAB_00109c7c:\n        pcVar7 = strchr(param_5,iVar8);\n        if (pcVar7 == (char *)0x0) {\nswitchD_00109cd0_caseD_43:\n          uVar10 = uVar10 | 2;\n          *param_4 = local_48;\n          goto LAB_00109c02;\n        }\n        switch(bVar11) {\n        case 0x45:\n        case 0x47:\n        case 0x4b:\n        case 0x4d:\n        case 0x50:\n        case 0x54:\n        case 0x59:\n        case 0x5a:\n        case 0x67:\n        case 0x6b:\n        case 0x6d:\n        case 0x74:\n          pcVar7 = strchr(param_5,0x30);\n          if (pcVar7 == (char *)0x0) goto switchD_00109ca6_caseD_46;\n          bVar1 = pbVar5[1];\n          if (bVar1 == 0x44) {\n            iVar8 = 2;\n            uVar9 = 1000;\n          }\n          else if (bVar1 == 0x69) {\n            uVar9 = 0x400;\n            iVar8 = (pbVar5[2] == 0x42) + 1 + (uint)(pbVar5[2] == 0x42);\n          }\n          else {\n            iVar8 = (bVar1 == 0x42) + 1;\n            uVar9 = 0x400;\n            if (bVar1 == 0x42) {\n              uVar9 = 1000;\n            }\n          }\n          break;\n        default:\nswitchD_00109ca6_caseD_46:\n          iVar8 = 1;\n          uVar9 = 0x400;\n        }\n        switch(bVar11) {\n        case 0x42:\n          uVar2 = FUN_00109ae0(&local_48,0x400);\n          pbVar5 = *param_2;\n          uVar10 = uVar10 | uVar2;\n          break;\n        default:\n          goto switchD_00109cd0_caseD_43;\n        case 0x45:\n          uVar2 = FUN_00109b10(&local_48,uVar9,6);\n          pbVar5 = *param_2;\n          uVar10 = uVar10 | uVar2;\n          break;\n        case 0x47:\n        case 0x67:\n          uVar2 = FUN_00109b10(&local_48,uVar9,3);\n          pbVar5 = *param_2;\n          uVar10 = uVar10 | uVar2;\n          break;\n        case 0x4b:\n        case 0x6b:\n          uVar2 = FUN_00109b10(&local_48,uVar9,1);\n          pbVar5 = *param_2;\n          uVar10 = uVar10 | uVar2;\n          break;\n        case 0x4d:\n        case 0x6d:\n          uVar2 = FUN_00109b10(&local_48,uVar9,2);\n          pbVar5 = *param_2;\n          uVar10 = uVar10 | uVar2;\n          break;\n        case 0x50:\n          uVar2 = FUN_00109b10(&local_48,uVar9,5);\n          pbVar5 = *param_2;\n          uVar10 = uVar10 | uVar2;\n          break;\n        case 0x54:\n        case 0x74:\n          uVar2 = FUN_00109b10(&local_48,uVar9,4);\n          pbVar5 = *param_2;\n          uVar10 = uVar10 | uVar2;\n          break;\n        case 0x59:\n          uVar2 = FUN_00109b10(&local_48,uVar9,8);\n          pbVar5 = *param_2;\n          uVar10 = uVar10 | uVar2;\n          break;\n        case 0x5a:\n          uVar2 = FUN_00109b10(&local_48,uVar9,7);\n          pbVar5 = *param_2;\n          uVar10 = uVar10 | uVar2;\n          break;\n        case 0x62:\n          uVar2 = FUN_00109ae0(&local_48,0x200);\n          pbVar5 = *param_2;\n          uVar10 = uVar10 | uVar2;\n          break;\n        case 99:\n          break;\n        case 0x77:\n          uVar2 = FUN_00109ae0(&local_48,2);\n          pbVar5 = *param_2;\n          uVar10 = uVar10 | uVar2;\n        }\n        uVar6 = local_48;\n        *param_2 = pbVar5 + iVar8;\n        if (pbVar5[iVar8] != 0) {\n          uVar10 = uVar10 | 2;\n        }\n      }\n      *param_4 = uVar6;\n      goto LAB_00109c02;\n    }\n    if ((param_5 != (char *)0x0) && (bVar11 = *param_1, bVar11 != 0)) {\n      iVar8 = (int)(char)bVar11;\n      pcVar7 = strchr(param_5,iVar8);\n      if (pcVar7 != (char *)0x0) {\n        local_48 = 1;\n        uVar10 = 0;\n        goto LAB_00109c7c;\n      }\n    }\n  }\nLAB_00109c3b:\n  uVar10 = 4;\nLAB_00109c02:\n  if (local_40 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return uVar10;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "00106cb0": "\nundefined8 FUN_00106cb0(long param_1,undefined8 param_2,byte param_3,char param_4)\n\n{\n  char cVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  \n  cVar1 = FUN_00106540((int)(char)param_3);\n  bVar2 = *(byte *)(param_1 + 7);\n  if (cVar1 != '\\0') {\n    bVar2 = bVar2 & 0xdf;\n  }\n  if (param_3 != bVar2) {\n    return 0;\n  }\n  if (param_3 == 0) {\n    return 1;\n  }\n  uVar3 = FUN_00106c50(param_1,param_2,(int)param_4);\n  return uVar3;\n}\n\n", 
    "00106dd0": "\nundefined8\nFUN_00106dd0(long param_1,undefined8 param_2,byte param_3,char param_4,char param_5,char param_6)\n\n{\n  char cVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  \n  cVar1 = FUN_00106540((int)(char)param_3);\n  bVar2 = *(byte *)(param_1 + 5);\n  if (cVar1 != '\\0') {\n    bVar2 = bVar2 & 0xdf;\n  }\n  if (param_3 != bVar2) {\n    return 0;\n  }\n  if (param_3 == 0) {\n    return 1;\n  }\n  uVar3 = FUN_00106d40(param_1,param_2,(int)param_4,(int)param_5,(int)param_6);\n  return uVar3;\n}\n\n", 
    "00106440": "\nbool FUN_00106440(uint param_1)\n\n{\n  return param_1 < 0x80;\n}\n\n", 
    "00108980": "\nvoid FUN_00108980(undefined8 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  FUN_00108890(param_1,param_2,0,param_3);\n  return;\n}\n\n", 
    "001024a0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n  (*(code *)PTR_qsort_00111e20)();\n  return;\n}\n\n", 
    "0010a2a0": "\nvoid FUN_0010a2a0(void)\n\n{\n  return;\n}\n\n", 
    "001059b0": "\nundefined4 FUN_001059b0(undefined4 param_1)\n\n{\n  return param_1;\n}\n\n", 
    "001026e0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid * realloc(void *__ptr,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = (void *)(*(code *)PTR_realloc_00111f40)();\n  return pvVar1;\n}\n\n", 
    "001025c0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nsize_t strspn(char *__s,char *__accept)\n\n{\n  size_t sVar1;\n  \n  sVar1 = (*(code *)PTR_strspn_00111eb0)();\n  return sVar1;\n}\n\n", 
    "00113088": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nsize_t strlen(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "00102630": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint fputc_unlocked(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_fputc_unlocked_00111ee8)();\n  return iVar1;\n}\n\n", 
    "00102510": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nsize_t __ctype_get_mb_cur_max(void)\n\n{\n  size_t sVar1;\n  \n  sVar1 = (*(code *)PTR___ctype_get_mb_cur_max_00111e58)();\n  return sVar1;\n}\n\n", 
    "00113080": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nsize_t __ctype_get_mb_cur_max(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n"
}