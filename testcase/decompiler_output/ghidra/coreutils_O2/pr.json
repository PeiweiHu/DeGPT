{
    "00106630": "\nvoid gnu_mbswidth(char *param_1,undefined4 param_2)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(param_1);\n  mbsnwidth(param_1,sVar1,param_2);\n  return;\n}\n\n", 
    "00108930": "\nulong quotearg_buffer_restyled\n                (undefined *param_1,ulong param_2,char *param_3,ulong param_4,int param_5,\n                uint param_6,long param_7,char *param_8,uint *param_9)\n\n{\n  byte *__s1;\n  bool bVar1;\n  bool bVar2;\n  bool bVar3;\n  bool bVar4;\n  bool bVar5;\n  bool bVar6;\n  int iVar7;\n  size_t sVar8;\n  ushort **ppuVar9;\n  long lVar10;\n  char cVar11;\n  uint uVar12;\n  ulong uVar13;\n  byte bVar14;\n  ulong uVar15;\n  char *pcVar16;\n  ulong uVar17;\n  ulong uVar18;\n  ulong uVar19;\n  long in_FS_OFFSET;\n  bool bVar20;\n  bool bVar21;\n  bool bVar22;\n  bool bVar23;\n  bool bVar24;\n  size_t local_c8;\n  uint *local_98;\n  ulong local_90;\n  uint *local_78;\n  char *local_70;\n  bool local_64;\n  wint_t local_4c;\n  mbstate_t local_48;\n  long local_40;\n  \n  local_70 = param_8;\n  local_78 = param_9;\n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  sVar8 = __ctype_get_mb_cur_max();\n  uVar12 = param_6 & 2;\n  bVar20 = uVar12 != 0;\n  switch(param_5) {\n  case 0:\n    bVar6 = true;\n    bVar2 = false;\n    uVar18 = 0;\n    local_64 = false;\n    local_90 = 0;\n    bVar20 = false;\n    bVar1 = false;\n    local_c8 = 0;\n    local_98 = (uint *)0x0;\n    break;\n  case 2:\n    if (uVar12 == 0) {\n      bVar1 = false;\nLAB_00108db7:\n      if (param_2 == 0) {\n        local_90 = 0;\n        bVar2 = false;\n        bVar6 = true;\n        local_64 = false;\n        goto LAB_00108dd9;\n      }\n      bVar2 = false;\n      local_64 = false;\n      bVar6 = true;\n      uVar13 = 0;\n      local_90 = param_2;\n      goto LAB_00109376;\n    }\n    bVar2 = false;\n    uVar18 = 0;\n    bVar6 = true;\n    local_64 = false;\n    local_90 = 0;\n    bVar20 = true;\n    bVar1 = false;\n    local_c8 = 1;\n    local_98 = (uint *)0x10f8db;\n    break;\n  case 3:\n    bVar1 = true;\n    goto LAB_00108d2f;\n  case 4:\n    if (uVar12 == 0) {\n      bVar1 = true;\n      goto LAB_00108db7;\n    }\n  case 1:\n    bVar1 = false;\nLAB_00108d2f:\n    bVar6 = true;\n    local_64 = false;\n    bVar20 = true;\n    local_90 = 0;\n    bVar2 = false;\n    uVar18 = 0;\n    param_5 = 2;\n    local_c8 = 1;\n    local_98 = (uint *)0x10f8db;\n    break;\n  case 5:\n    if (uVar12 == 0) {\n      if (param_2 != 0) {\n        *param_1 = 0x22;\n      }\n      bVar6 = true;\n      local_64 = false;\n      local_90 = 0;\n      bVar2 = false;\n      bVar20 = false;\n      uVar18 = 1;\n      bVar1 = true;\n      local_c8 = 1;\n      local_98 = &UINT_0010ea40;\n    }\n    else {\n      bVar2 = false;\n      uVar18 = 0;\n      bVar6 = true;\n      local_64 = false;\n      local_90 = 0;\n      bVar20 = true;\n      bVar1 = true;\n      local_c8 = 1;\n      local_98 = &UINT_0010ea40;\n    }\n    break;\n  case 6:\n    bVar2 = false;\n    uVar18 = 0;\n    bVar6 = true;\n    local_64 = false;\n    param_5 = 5;\n    local_90 = 0;\n    bVar20 = true;\n    bVar1 = true;\n    local_c8 = 1;\n    local_98 = &UINT_0010ea40;\n    break;\n  case 7:\n    bVar6 = true;\n    bVar2 = false;\n    uVar18 = 0;\n    local_64 = false;\n    local_90 = 0;\n    bVar20 = false;\n    bVar1 = true;\n    local_c8 = 0;\n    local_98 = (uint *)0x0;\n    break;\n  case 8:\n  case 9:\n  case 10:\n    if (param_5 != 10) {\n      local_70 = (char *)gettext_quote(0x10ea5f,param_5);\n      local_78 = (uint *)gettext_quote(\"\\'\");\n    }\n    uVar18 = 0;\n    if (uVar12 == 0) {\n      cVar11 = *local_70;\n      while (cVar11 != '\\0') {\n        if (uVar18 < param_2) {\n          param_1[uVar18] = cVar11;\n        }\n        uVar18 = uVar18 + 1;\n        cVar11 = local_70[uVar18];\n      }\n    }\n    bVar2 = false;\n    local_c8 = strlen((char *)local_78);\n    local_98 = local_78;\n    bVar6 = true;\n    local_64 = false;\n    local_90 = 0;\n    bVar1 = true;\n    break;\n  default:\n                    /* WARNING: Subroutine does not return */\n    abort();\n  }\n  do {\n    uVar13 = 0;\n    bVar4 = local_64;\nLAB_00108a80:\n    bVar21 = param_4 != uVar13;\n    if (param_4 == 0xffffffffffffffff) {\n      bVar21 = param_3[uVar13] != '\\0';\n    }\n    bVar24 = bVar1;\n    if (bVar21) {\n      bVar23 = (bool)(param_5 != 2 & bVar1);\n      __s1 = (byte *)(param_3 + uVar13);\n      uVar17 = uVar13;\n      bVar3 = bVar2;\n      bVar5 = bVar23;\n      if (!bVar23) {\n        uVar15 = (ulong)*__s1;\n        switch(uVar15) {\n        case 0:\n          if (bVar1) goto switchD_001092e0_caseD_0;\n          bVar5 = false;\n          uVar15 = 0;\n          if ((param_6 & 1) != 0) goto code_r0x0010927b;\n          goto LAB_0010906b;\n        default:\nswitchD_00109190_caseD_1:\n          bVar22 = bVar1;\n          if (sVar8 != 1) {\n            local_48 = (mbstate_t)0x0;\n            if (param_4 == 0xffffffffffffffff) {\n              param_4 = strlen(param_3);\n            }\n            uVar17 = 0;\n            do {\n              uVar19 = uVar13 + uVar17;\n              lVar10 = rpl_mbrtowc(&local_4c,param_3 + uVar19,param_4 - uVar19,&local_48);\n              if (lVar10 == 0) break;\n              if (lVar10 == -1) {\n                bVar21 = false;\n                goto LAB_00109568;\n              }\n              if (lVar10 == -2) goto joined_r0x0010997a;\n              if (((param_5 == 2) && (bVar20)) && (lVar10 != 1)) {\n                pcVar16 = param_3 + uVar19 + 1;\n                do {\n                  if (((byte)(*pcVar16 + 0xa5U) < 0x22) &&\n                     ((1L << (*pcVar16 + 0xa5U & 0x3f) & 0x20000002bU) != 0)) {\n                    param_5 = 2;\n                    goto LAB_00108f50;\n                  }\n                  pcVar16 = pcVar16 + 1;\n                } while (param_3 + uVar19 + lVar10 != pcVar16);\n              }\n              iVar7 = iswprint(local_4c);\n              if (iVar7 == 0) {\n                bVar21 = false;\n              }\n              uVar17 = uVar17 + lVar10;\n              iVar7 = mbsinit(&local_48);\n            } while (iVar7 == 0);\n            bVar22 = (bool)((bVar21 ^ 1U) & bVar1);\n            goto LAB_00109568;\n          }\n          ppuVar9 = __ctype_b_loc();\n          uVar17 = 1;\n          bVar22 = ((*ppuVar9)[uVar15] & 0x4000) == 0;\n          bVar21 = !bVar22;\n          bVar22 = (bool)(bVar22 & bVar1);\n          goto LAB_00108cf1;\n        case 7:\n          uVar15 = 7;\n          bVar14 = 0x61;\n          break;\n        case 8:\n          uVar15 = 8;\n          bVar14 = 0x62;\n          break;\n        case 9:\n          uVar15 = 9;\n          bVar14 = 0x74;\n          goto LAB_00109238;\n        case 10:\n          uVar15 = 10;\n          bVar14 = 0x6e;\n          goto LAB_00109238;\n        case 0xb:\n          uVar15 = 0xb;\n          bVar14 = 0x76;\n          break;\n        case 0xc:\n          uVar15 = 0xc;\n          bVar14 = 0x66;\n          break;\n        case 0xd:\n          uVar15 = 0xd;\n          bVar14 = 0x72;\nLAB_00109238:\n          bVar23 = (bool)(param_5 == 2 & bVar20);\n          if (bVar23) goto LAB_00108f47;\n          break;\n        case 0x20:\n          uVar15 = 0x20;\n          goto LAB_00108f34;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2a:\n        case 0x3b:\n        case 0x3c:\n        case 0x3d:\n        case 0x3e:\n        case 0x5b:\n        case 0x5e:\n        case 0x60:\n        case 0x7c:\n          bVar21 = false;\nLAB_00108f34:\n          bVar22 = param_5 == 2;\n          bVar23 = bVar21;\n          if ((!bVar20) || (!bVar22)) goto LAB_00108c58;\n          goto LAB_00108f47;\n        case 0x23:\n        case 0x7e:\nLAB_00108f2b:\n          bVar22 = param_5 == 2;\n          if (uVar13 == 0) goto LAB_00108f34;\n          goto LAB_00108c55;\n        case 0x25:\n        case 0x2b:\n        case 0x2c:\n        case 0x2d:\n        case 0x2e:\n        case 0x2f:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3a:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4a:\n        case 0x4b:\n        case 0x4c:\n        case 0x4d:\n        case 0x4e:\n        case 0x4f:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5a:\n        case 0x5d:\n        case 0x5f:\n        case 0x61:\n        case 0x62:\n        case 99:\n        case 100:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6a:\n        case 0x6b:\n        case 0x6c:\n        case 0x6d:\n        case 0x6e:\n        case 0x6f:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7a:\n          goto switchD_00109190_caseD_25;\n        case 0x27:\nswitchD_00109190_caseD_27:\n          bVar4 = bVar21;\n          if (param_5 != 2) {\n            bVar22 = false;\n            uVar15 = 0x27;\n            bVar23 = bVar21;\n            goto LAB_00108c58;\n          }\n          if (!bVar20) {\n            if ((param_2 == 0) || (uVar13 = 0, uVar15 = param_2, local_90 != 0)) {\n              if (uVar18 < param_2) {\n                param_1[uVar18] = 0x27;\n              }\n              if (uVar18 + 1 < param_2) {\n                param_1[uVar18 + 1] = 0x5c;\n              }\n              uVar13 = param_2;\n              uVar15 = local_90;\n              if (uVar18 + 2 < param_2) {\n                param_1[uVar18 + 2] = 0x27;\n              }\n            }\n            bVar14 = 0x27;\n            uVar18 = uVar18 + 3;\n            param_2 = uVar13;\n            local_90 = uVar15;\n            bVar3 = false;\n            bVar22 = false;\n            goto joined_r0x00108c7b;\n          }\n          goto LAB_00108f50;\n        case 0x3f:\nswitchD_00109190_caseD_3f:\n          if (param_5 != 2) {\n            if ((((param_5 == 5) && ((param_6 & 4) != 0)) && (uVar17 = uVar13 + 2, uVar17 < param_4)\n                ) && (param_3[uVar13 + 1] == '?')) {\n              uVar15 = (ulong)(byte)param_3[uVar17];\n              switch(param_3[uVar17]) {\n              case '!':\n              case '\\'':\n              case '(':\n              case ')':\n              case '-':\n              case '/':\n              case '<':\n              case '=':\n              case '>':\n                goto switchD_001098de_caseD_21;\n              default:\n                break;\n              }\n            }\n            bVar22 = false;\n            uVar15 = 0x3f;\n            bVar23 = false;\n            goto LAB_00108c58;\n          }\n          if (!bVar20) {\n            bVar14 = 0x3f;\n            bVar22 = false;\n            bVar21 = false;\n            goto joined_r0x00108c7b;\n          }\n          goto LAB_00108f50;\n        case 0x5c:\n          if (param_5 != 2) goto switchD_00108b88_caseD_5c;\n          if (!bVar20) {\nLAB_001091c8:\n            uVar13 = uVar13 + 1;\n            bVar21 = false;\n            bVar14 = 0x5c;\n            goto LAB_001091e0;\n          }\n          goto LAB_00108f50;\n        case 0x7b:\n        case 0x7d:\nswitchD_00109190_caseD_7b:\n          bVar23 = param_4 != 1;\n          if (param_4 == 0xffffffffffffffff) {\n            bVar23 = param_3[1] != '\\0';\n          }\n          bVar22 = param_5 == 2;\n          if (!bVar23) goto LAB_00108f2b;\nLAB_00108c55:\n          bVar23 = false;\n          goto LAB_00108c58;\n        }\nLAB_00109060:\n        bVar5 = bVar23;\n        if (!bVar1) {\nLAB_0010906b:\n          bVar14 = (byte)uVar15;\n          bVar23 = false;\n          bVar21 = false;\n          bVar22 = false;\n          if (!bVar20) goto LAB_00108c78;\n          goto LAB_00108ba0;\n        }\nLAB_001090a0:\n        bVar21 = false;\n        goto joined_r0x001090b1;\n      }\n      if (local_c8 != 0) {\n        if ((param_4 == 0xffffffffffffffff) && (1 < local_c8)) {\n          param_4 = strlen(param_3);\n        }\n        if ((param_4 < uVar13 + local_c8) || (iVar7 = memcmp(__s1,local_98,local_c8), iVar7 != 0))\n        goto LAB_001092c0;\n        if (!bVar20) {\n          uVar15 = (ulong)*__s1;\n          switch(uVar15) {\n          case 0:\n            goto switchD_00108b88_caseD_0;\n          default:\n            goto switchD_00109190_caseD_1;\n          case 7:\n            goto switchD_001092e0_caseD_7;\n          case 8:\n            goto switchD_001092e0_caseD_8;\n          case 9:\n            goto switchD_00108b88_caseD_9;\n          case 10:\n            goto switchD_001092e0_caseD_a;\n          case 0xb:\n            goto switchD_001092e0_caseD_b;\n          case 0xc:\n            goto switchD_001092e0_caseD_c;\n          case 0xd:\n            goto switchD_001092e0_caseD_d;\n          case 0x20:\n            goto LAB_00109309;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2a:\n          case 0x3b:\n          case 0x3c:\n          case 0x3d:\n          case 0x3e:\n          case 0x5b:\n          case 0x5e:\n          case 0x60:\n          case 0x7c:\n            goto switchD_00108b88_caseD_21;\n          case 0x23:\n          case 0x7e:\n            goto LAB_001092f1;\n          case 0x25:\n          case 0x2b:\n          case 0x2c:\n          case 0x2d:\n          case 0x2e:\n          case 0x2f:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3a:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4a:\n          case 0x4b:\n          case 0x4c:\n          case 0x4d:\n          case 0x4e:\n          case 0x4f:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5a:\n          case 0x5d:\n          case 0x5f:\n          case 0x61:\n          case 0x62:\n          case 99:\n          case 100:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6a:\n          case 0x6b:\n          case 0x6c:\n          case 0x6d:\n          case 0x6e:\n          case 0x6f:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7a:\n            goto LAB_00108b98;\n          case 0x27:\n            goto switchD_00109190_caseD_27;\n          case 0x3f:\n            goto switchD_00109190_caseD_3f;\n          case 0x5c:\n            goto switchD_00108b88_caseD_5c;\n          case 0x7b:\n          case 0x7d:\n            goto switchD_00109190_caseD_7b;\n          }\n        }\n        goto LAB_00108f5e;\n      }\nLAB_001092c0:\n      uVar15 = (ulong)*__s1;\n      switch(uVar15) {\n      case 0:\nswitchD_001092e0_caseD_0:\n        if (!bVar20) {\n          bVar5 = false;\nswitchD_00108b88_caseD_0:\n          bVar24 = param_5 == 2;\n          bVar3 = (bool)((bVar2 ^ 1U) & bVar24);\n          if (bVar3) {\n            if (uVar18 < param_2) {\n              param_1[uVar18] = 0x27;\n            }\n            if (uVar18 + 1 < param_2) {\n              param_1[uVar18 + 1] = 0x24;\n            }\n            if (uVar18 + 2 < param_2) {\n              param_1[uVar18 + 2] = 0x27;\n            }\n            uVar15 = uVar18 + 3;\n            bVar2 = bVar3;\n            if (param_2 <= uVar18 + 3) {\n              bVar14 = 0x30;\n              uVar18 = uVar18 + 4;\n              bVar22 = bVar3;\n              bVar21 = false;\n              goto joined_r0x00108c7b;\n            }\nLAB_0010971b:\n            param_1[uVar15] = 0x5c;\n            uVar18 = uVar15;\n          }\n          else {\n            uVar15 = uVar18;\n            if (uVar18 < param_2) goto LAB_0010971b;\n          }\n          uVar19 = uVar18 + 1;\n          bVar22 = bVar21;\n          if (param_5 != 2) {\n            uVar15 = 0x30;\n            if ((uVar13 + 1 < param_4) && ((byte)(param_3[uVar13 + 1] - 0x30U) < 10)) {\n              if (uVar19 < param_2) {\n                param_1[uVar19] = 0x30;\n              }\n              if (uVar18 + 2 < param_2) {\n                param_1[uVar18 + 2] = 0x30;\n              }\n              uVar19 = uVar18 + 3;\n              uVar15 = 0x30;\n            }\n            goto LAB_00109758;\n          }\n          bVar14 = 0x30;\n          uVar18 = uVar19;\n          bVar3 = bVar2;\n          bVar21 = false;\n          goto joined_r0x00108c7b;\n        }\n        bVar24 = param_5 == 2;\n        goto LAB_00108f50;\n      default:\n        bVar23 = false;\n        goto switchD_00109190_caseD_1;\n      case 7:\nswitchD_001092e0_caseD_7:\n        bVar14 = 0x61;\n        break;\n      case 8:\nswitchD_001092e0_caseD_8:\n        bVar14 = 0x62;\n        break;\n      case 9:\n        bVar23 = false;\nswitchD_00108b88_caseD_9:\n        uVar15 = 9;\n        bVar14 = 0x74;\n        goto LAB_00109060;\n      case 10:\nswitchD_001092e0_caseD_a:\n        bVar14 = 0x6e;\n        goto LAB_001090a0;\n      case 0xb:\nswitchD_001092e0_caseD_b:\n        bVar14 = 0x76;\n        goto LAB_001090a0;\n      case 0xc:\nswitchD_001092e0_caseD_c:\n        bVar14 = 0x66;\n        break;\n      case 0xd:\nswitchD_001092e0_caseD_d:\n        bVar14 = 0x72;\n        goto LAB_001090a0;\n      case 0x20:\n        bVar5 = false;\nLAB_00109309:\n        uVar15 = 0x20;\n        goto LAB_00108b98;\n      case 0x21:\n      case 0x22:\n      case 0x24:\n      case 0x26:\n      case 0x28:\n      case 0x29:\n      case 0x2a:\n      case 0x3b:\n      case 0x3c:\n      case 0x3d:\n      case 0x3e:\n      case 0x5b:\n      case 0x5e:\n      case 0x60:\n      case 0x7c:\n        bVar5 = false;\nswitchD_00108b88_caseD_21:\n        bVar22 = false;\n        goto LAB_00108c55;\n      case 0x23:\n      case 0x7e:\n        bVar5 = false;\nLAB_001092f1:\n        if (uVar13 == 0) {\n          bVar22 = false;\n          goto LAB_00108c58;\n        }\n        bVar23 = false;\n        bVar22 = false;\n        goto LAB_00108ba0;\n      case 0x25:\n      case 0x2b:\n      case 0x2c:\n      case 0x2d:\n      case 0x2e:\n      case 0x2f:\n      case 0x30:\n      case 0x31:\n      case 0x32:\n      case 0x33:\n      case 0x34:\n      case 0x35:\n      case 0x36:\n      case 0x37:\n      case 0x38:\n      case 0x39:\n      case 0x3a:\n      case 0x41:\n      case 0x42:\n      case 0x43:\n      case 0x44:\n      case 0x45:\n      case 0x46:\n      case 0x47:\n      case 0x48:\n      case 0x49:\n      case 0x4a:\n      case 0x4b:\n      case 0x4c:\n      case 0x4d:\n      case 0x4e:\n      case 0x4f:\n      case 0x50:\n      case 0x51:\n      case 0x52:\n      case 0x53:\n      case 0x54:\n      case 0x55:\n      case 0x56:\n      case 0x57:\n      case 0x58:\n      case 0x59:\n      case 0x5a:\n      case 0x5d:\n      case 0x5f:\n      case 0x61:\n      case 0x62:\n      case 99:\n      case 100:\n      case 0x65:\n      case 0x66:\n      case 0x67:\n      case 0x68:\n      case 0x69:\n      case 0x6a:\n      case 0x6b:\n      case 0x6c:\n      case 0x6d:\n      case 0x6e:\n      case 0x6f:\n      case 0x70:\n      case 0x71:\n      case 0x72:\n      case 0x73:\n      case 0x74:\n      case 0x75:\n      case 0x76:\n      case 0x77:\n      case 0x78:\n      case 0x79:\n      case 0x7a:\n        bVar5 = false;\nLAB_00108b98:\n        bVar22 = false;\n        goto LAB_00108ba0;\n      case 0x27:\n        bVar5 = false;\n        goto switchD_00109190_caseD_27;\n      case 0x3f:\n        bVar5 = false;\n        goto switchD_00109190_caseD_3f;\n      case 0x5c:\n        bVar23 = false;\nswitchD_00108b88_caseD_5c:\n        if (((bool)(bVar1 & bVar20)) && (local_c8 != 0)) goto LAB_001091c8;\n        uVar15 = 0x5c;\n        bVar14 = 0x5c;\n        goto LAB_00109060;\n      case 0x7b:\n      case 0x7d:\n        bVar5 = false;\n        goto switchD_00109190_caseD_7b;\n      }\n      if (bVar20) goto LAB_001090c0;\n      bVar21 = false;\n      goto LAB_00108c16;\n    }\n    if ((uVar18 == 0) && ((bool)(bVar20 & param_5 == 2))) {\nLAB_00108f47:\n      param_5 = 2;\nLAB_00108f50:\n      if (bVar24) {\n        param_5 = 4;\n      }\nLAB_00108f5e:\n      uVar13 = quotearg_buffer_restyled\n                         (param_1,param_2,param_3,param_4,param_5,param_6 & 0xfffffffd,0,local_70,\n                          local_78);\n      goto LAB_00108f98;\n    }\n    bVar21 = (bool)(param_5 == 2 & (bVar20 ^ 1U));\n    bVar20 = (bool)(bVar20 ^ 1U);\n    if ((!bVar21) || (bVar20 = bVar21, !bVar4)) {\nLAB_001099e5:\n      uVar13 = uVar18;\n      if (((local_98 != (uint *)0x0) && (bVar20)) && (cVar11 = *(char *)local_98, cVar11 != '\\0')) {\n        do {\n          if (uVar13 < param_2) {\n            param_1[uVar13] = cVar11;\n          }\n          uVar13 = uVar13 + 1;\n          cVar11 = *(char *)((long)local_98 + (uVar13 - uVar18));\n        } while (cVar11 != '\\0');\n      }\n      if (uVar13 < param_2) {\n        param_1[uVar13] = 0;\n      }\nLAB_00108f98:\n      if (local_40 == *(long *)(in_FS_OFFSET + 0x28)) {\n        return uVar13;\n      }\n                    /* WARNING: Subroutine does not return */\n      __stack_chk_fail();\n    }\n    if (bVar6) {\n      uVar13 = quotearg_buffer_restyled\n                         (param_1,local_90,param_3,param_4,5,param_6,param_7,local_70,local_78);\n      goto LAB_00108f98;\n    }\n    local_64 = param_2 == 0 && local_90 != 0;\n    uVar13 = local_90;\n    bVar20 = bVar4;\n    if (param_2 != 0 || local_90 == 0) goto LAB_001099e5;\nLAB_00109376:\n    *param_1 = 0x27;\n    param_2 = local_90;\n    local_90 = uVar13;\nLAB_00108dd9:\n    bVar20 = false;\n    uVar18 = 1;\n    param_5 = 2;\n    local_c8 = 1;\n    local_98 = (uint *)0x10f8db;\n  } while( true );\ncode_r0x0010927b:\n  uVar13 = uVar13 + 1;\n  goto LAB_00108a80;\nswitchD_001098de_caseD_21:\n  if (!bVar20) {\n    if (uVar18 < param_2) {\n      param_1[uVar18] = 0x3f;\n    }\n    if (uVar18 + 1 < param_2) {\n      param_1[uVar18 + 1] = 0x22;\n    }\n    if (uVar18 + 2 < param_2) {\n      param_1[uVar18 + 2] = 0x22;\n    }\n    if (uVar18 + 3 < param_2) {\n      param_1[uVar18 + 3] = 0x3f;\n    }\n    uVar19 = uVar18 + 4;\n    bVar24 = false;\n    bVar22 = false;\nLAB_00109758:\n    bVar14 = (byte)uVar15;\n    bVar23 = false;\n    bVar21 = false;\n    uVar13 = uVar17;\n    uVar18 = uVar19;\n    bVar3 = bVar2;\n    if ((bool)(bVar1 ^ 1U | bVar24)) goto joined_r0x00108c7b;\n    goto LAB_00108ba0;\n  }\n  goto LAB_00108f5e;\njoined_r0x0010997a:\n  while ((uVar19 < param_4 && (param_3[uVar19] != '\\0'))) {\n    uVar17 = uVar17 + 1;\n    uVar19 = uVar13 + uVar17;\n  }\n  bVar21 = false;\nLAB_00109568:\n  if (1 < uVar17) {\nLAB_00109572:\n    bVar24 = false;\n    uVar17 = uVar17 + uVar13;\n    uVar19 = uVar13;\n    do {\n      bVar14 = (byte)uVar15;\n      if (bVar22) {\n        bVar24 = param_5 == 2;\n        if (bVar20) goto LAB_00108f50;\n        bVar24 = (bool)(bVar24 & (bVar3 ^ 1U));\n        if (bVar24) {\n          if (uVar18 < param_2) {\n            param_1[uVar18] = 0x27;\n          }\n          if (uVar18 + 1 < param_2) {\n            param_1[uVar18 + 1] = 0x24;\n          }\n          if (uVar18 + 2 < param_2) {\n            param_1[uVar18 + 2] = 0x27;\n          }\n          uVar18 = uVar18 + 3;\n          bVar3 = bVar24;\n        }\n        if (uVar18 < param_2) {\n          param_1[uVar18] = 0x5c;\n        }\n        if (uVar18 + 1 < param_2) {\n          param_1[uVar18 + 1] = (char)(uVar15 >> 6) + '0';\n        }\n        if (uVar18 + 2 < param_2) {\n          param_1[uVar18 + 2] = ((byte)(uVar15 >> 3) & 7) + 0x30;\n        }\n        uVar13 = uVar19 + 1;\n        uVar18 = uVar18 + 3;\n        bVar14 = (bVar14 & 7) + 0x30;\n        bVar24 = bVar22;\n        if (uVar17 <= uVar13) goto LAB_00108c28;\n      }\n      else {\n        bVar2 = (bool)((bVar24 ^ 1U) & bVar3);\n        if (bVar23) {\n          if (uVar18 < param_2) {\n            param_1[uVar18] = 0x5c;\n          }\n          uVar18 = uVar18 + 1;\n        }\n        uVar13 = uVar19 + 1;\n        if (uVar17 <= uVar13) goto LAB_001091e0;\n        if (bVar2) {\n          if (uVar18 < param_2) {\n            param_1[uVar18] = 0x27;\n          }\n          if (uVar18 + 1 < param_2) {\n            param_1[uVar18 + 1] = 0x27;\n          }\n          uVar18 = uVar18 + 2;\n          bVar23 = false;\n          bVar3 = false;\n        }\n        else {\n          bVar23 = false;\n        }\n      }\n      uVar19 = uVar19 + 1;\n      if (uVar18 < param_2) {\n        param_1[uVar18] = bVar14;\n      }\n      uVar15 = (ulong)(byte)param_3[uVar19];\n      uVar18 = uVar18 + 1;\n    } while( true );\n  }\nLAB_00108cf1:\n  bVar5 = bVar23;\n  if (bVar22) {\n    bVar21 = false;\n    bVar22 = bVar1;\n    goto LAB_00109572;\n  }\nswitchD_00109190_caseD_25:\n  bVar22 = param_5 == 2;\n  bVar23 = bVar21;\nLAB_00108c58:\n  bVar14 = (byte)uVar15;\n  bVar22 = (bool)(bVar22 | bVar1 ^ 1U);\n  if ((!bVar22) || (bVar22 = false, bVar21 = bVar23, bVar20)) {\nLAB_00108ba0:\n    bVar14 = (byte)uVar15;\n    uVar17 = uVar13;\n    bVar3 = bVar2;\n    bVar21 = bVar23;\n    if ((param_7 == 0) || ((*(uint *)(param_7 + (uVar15 >> 5) * 4) >> (bVar14 & 0x1f) & 1) == 0))\n    goto joined_r0x00108c7b;\n  }\n  else {\nLAB_00108c78:\n    uVar17 = uVar13;\n    bVar22 = false;\njoined_r0x00108c7b:\n    uVar13 = uVar17;\n    bVar2 = bVar3;\n    if (!bVar5) {\n      uVar13 = uVar17 + 1;\n      bVar2 = (bool)((bVar22 ^ 1U) & bVar3);\nLAB_001091e0:\n      if (bVar2) {\n        if (uVar18 < param_2) {\n          param_1[uVar18] = 0x27;\n        }\n        if (uVar18 + 1 < param_2) {\n          param_1[uVar18 + 1] = 0x27;\n        }\n        uVar18 = uVar18 + 2;\n        bVar3 = false;\n      }\n      goto LAB_00108c28;\n    }\n  }\njoined_r0x001090b1:\n  if (bVar20) {\nLAB_001090c0:\n    bVar24 = (bool)(bVar1 & param_5 == 2);\n    goto LAB_00108f50;\n  }\n  bVar24 = (bool)((bVar2 ^ 1U) & param_5 == 2);\n  if (bVar24) {\n    if (uVar18 < param_2) {\n      param_1[uVar18] = 0x27;\n    }\n    if (uVar18 + 1 < param_2) {\n      param_1[uVar18 + 1] = 0x24;\n    }\n    if (uVar18 + 2 < param_2) {\n      param_1[uVar18 + 2] = 0x27;\n    }\n    uVar18 = uVar18 + 3;\n    bVar2 = bVar24;\n  }\nLAB_00108c16:\n  if (uVar18 < param_2) {\n    param_1[uVar18] = 0x5c;\n  }\n  uVar18 = uVar18 + 1;\n  uVar13 = uVar13 + 1;\n  bVar3 = bVar2;\nLAB_00108c28:\n  bVar2 = bVar3;\n  if (uVar18 < param_2) {\n    param_1[uVar18] = bVar14;\n  }\n  uVar18 = uVar18 + 1;\n  if (!bVar21) {\n    bVar6 = false;\n  }\n  goto LAB_00108a80;\n}\n\n", 
    "0010b730": "\nuint xstrtoumax(byte *param_1,byte **param_2,uint param_3,uintmax_t *param_4,char *param_5)\n\n{\n  byte bVar1;\n  uint uVar2;\n  int *piVar3;\n  ushort **ppuVar4;\n  byte *pbVar5;\n  uintmax_t uVar6;\n  char *pcVar7;\n  int iVar8;\n  undefined8 uVar9;\n  uint uVar10;\n  byte bVar11;\n  long in_FS_OFFSET;\n  byte *local_50;\n  uintmax_t local_48;\n  long local_40;\n  \n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  if (0x24 < param_3) {\n                    /* WARNING: Subroutine does not return */\n    __assert_fail(\"0 <= strtol_base && strtol_base <= 36\",\"lib/xstrtol.c\",0x60,\"xstrtoumax\");\n  }\n  if (param_2 == (byte **)0x0) {\n    param_2 = &local_50;\n  }\n  piVar3 = __errno_location();\n  *piVar3 = 0;\n  bVar11 = *param_1;\n  ppuVar4 = __ctype_b_loc();\n  pbVar5 = param_1;\n  while ((*(byte *)((long)*ppuVar4 + (ulong)bVar11 * 2 + 1) & 0x20) != 0) {\n    bVar11 = pbVar5[1];\n    pbVar5 = pbVar5 + 1;\n  }\n  if (bVar11 != 0x2d) {\n    uVar6 = strtoumax((char *)param_1,(char **)param_2,param_3);\n    pbVar5 = *param_2;\n    local_48 = uVar6;\n    if (pbVar5 != param_1) {\n      if (*piVar3 == 0) {\n        uVar10 = 0;\n      }\n      else {\n        uVar10 = 1;\n        if (*piVar3 != 0x22) goto LAB_0010b82b;\n      }\n      if ((param_5 != (char *)0x0) && (bVar11 = *pbVar5, bVar11 != 0)) {\n        iVar8 = (int)(char)bVar11;\nLAB_0010b86c:\n        pcVar7 = strchr(param_5,iVar8);\n        if (pcVar7 == (char *)0x0) {\nswitchD_0010b8c0_caseD_43:\n          uVar10 = uVar10 | 2;\n          *param_4 = local_48;\n          goto LAB_0010b7f2;\n        }\n        switch(bVar11) {\n        case 0x45:\n        case 0x47:\n        case 0x4b:\n        case 0x4d:\n        case 0x50:\n        case 0x54:\n        case 0x59:\n        case 0x5a:\n        case 0x67:\n        case 0x6b:\n        case 0x6d:\n        case 0x74:\n          pcVar7 = strchr(param_5,0x30);\n          if (pcVar7 == (char *)0x0) goto switchD_0010b896_caseD_46;\n          bVar1 = pbVar5[1];\n          if (bVar1 == 0x44) {\n            iVar8 = 2;\n            uVar9 = 1000;\n          }\n          else if (bVar1 == 0x69) {\n            uVar9 = 0x400;\n            iVar8 = (pbVar5[2] == 0x42) + 1 + (uint)(pbVar5[2] == 0x42);\n          }\n          else {\n            iVar8 = (bVar1 == 0x42) + 1;\n            uVar9 = 0x400;\n            if (bVar1 == 0x42) {\n              uVar9 = 1000;\n            }\n          }\n          break;\n        default:\nswitchD_0010b896_caseD_46:\n          iVar8 = 1;\n          uVar9 = 0x400;\n        }\n        switch(bVar11) {\n        case 0x42:\n          uVar2 = bkm_scale(&local_48,0x400);\n          pbVar5 = *param_2;\n          uVar10 = uVar10 | uVar2;\n          break;\n        default:\n          goto switchD_0010b8c0_caseD_43;\n        case 0x45:\n          uVar2 = bkm_scale_by_power(&local_48,uVar9,6);\n          pbVar5 = *param_2;\n          uVar10 = uVar10 | uVar2;\n          break;\n        case 0x47:\n        case 0x67:\n          uVar2 = bkm_scale_by_power(&local_48,uVar9,3);\n          pbVar5 = *param_2;\n          uVar10 = uVar10 | uVar2;\n          break;\n        case 0x4b:\n        case 0x6b:\n          uVar2 = bkm_scale_by_power(&local_48,uVar9,1);\n          pbVar5 = *param_2;\n          uVar10 = uVar10 | uVar2;\n          break;\n        case 0x4d:\n        case 0x6d:\n          uVar2 = bkm_scale_by_power(&local_48,uVar9,2);\n          pbVar5 = *param_2;\n          uVar10 = uVar10 | uVar2;\n          break;\n        case 0x50:\n          uVar2 = bkm_scale_by_power(&local_48,uVar9,5);\n          pbVar5 = *param_2;\n          uVar10 = uVar10 | uVar2;\n          break;\n        case 0x54:\n        case 0x74:\n          uVar2 = bkm_scale_by_power(&local_48,uVar9,4);\n          pbVar5 = *param_2;\n          uVar10 = uVar10 | uVar2;\n          break;\n        case 0x59:\n          uVar2 = bkm_scale_by_power(&local_48,uVar9,8);\n          pbVar5 = *param_2;\n          uVar10 = uVar10 | uVar2;\n          break;\n        case 0x5a:\n          uVar2 = bkm_scale_by_power(&local_48,uVar9,7);\n          pbVar5 = *param_2;\n          uVar10 = uVar10 | uVar2;\n          break;\n        case 0x62:\n          uVar2 = bkm_scale(&local_48,0x200);\n          pbVar5 = *param_2;\n          uVar10 = uVar10 | uVar2;\n          break;\n        case 99:\n          break;\n        case 0x77:\n          uVar2 = bkm_scale(&local_48,2);\n          pbVar5 = *param_2;\n          uVar10 = uVar10 | uVar2;\n        }\n        uVar6 = local_48;\n        *param_2 = pbVar5 + iVar8;\n        if (pbVar5[iVar8] != 0) {\n          uVar10 = uVar10 | 2;\n        }\n      }\n      *param_4 = uVar6;\n      goto LAB_0010b7f2;\n    }\n    if ((param_5 != (char *)0x0) && (bVar11 = *param_1, bVar11 != 0)) {\n      iVar8 = (int)(char)bVar11;\n      pcVar7 = strchr(param_5,iVar8);\n      if (pcVar7 != (char *)0x0) {\n        local_48 = 1;\n        uVar10 = 0;\n        goto LAB_0010b86c;\n      }\n    }\n  }\nLAB_0010b82b:\n  uVar10 = 4;\nLAB_0010b7f2:\n  if (local_40 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return uVar10;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "00103bd0": "\nvoid getoptnum(undefined8 param_1,int param_2,undefined4 *param_3,undefined8 param_4)\n\n{\n  undefined4 uVar1;\n  \n  uVar1 = xdectoimax(param_1,(long)param_2,0x7fffffff,&DAT_0010d018,param_4,0);\n  *param_3 = uVar1;\n  return;\n}\n\n", 
    "00109d50": "\nundefined4 set_quoting_flags(undefined1 *param_1,undefined4 param_2)\n\n{\n  undefined4 uVar1;\n  \n  if (param_1 == (undefined1 *)0x0) {\n    param_1 = default_quoting_options;\n  }\n  uVar1 = *(undefined4 *)(param_1 + 4);\n  *(undefined4 *)(param_1 + 4) = param_2;\n  return uVar1;\n}\n\n", 
    "001151b0": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid * realloc(void *__ptr,size_t __size)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* realloc@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00115108": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint posix_fadvise(int __fd,__off_t __offset,__off_t __len,int __advise)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* posix_fadvise@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00108250": "\nundefined8 strcaseeq7(long param_1,undefined8 param_2,byte param_3,char param_4)\n\n{\n  char cVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  \n  cVar1 = c_isupper((int)(char)param_3);\n  bVar2 = *(byte *)(param_1 + 7);\n  if (cVar1 != '\\0') {\n    bVar2 = bVar2 & 0xdf;\n  }\n  if (param_3 != bVar2) {\n    return 0;\n  }\n  if (param_3 == 0) {\n    return 1;\n  }\n  uVar3 = strcaseeq8(param_1,param_2,(int)param_4);\n  return uVar3;\n}\n\n", 
    "00108370": "\nundefined8\nstrcaseeq5(long param_1,undefined8 param_2,byte param_3,char param_4,char param_5,char param_6)\n\n{\n  char cVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  \n  cVar1 = c_isupper((int)(char)param_3);\n  bVar2 = *(byte *)(param_1 + 5);\n  if (cVar1 != '\\0') {\n    bVar2 = bVar2 & 0xdf;\n  }\n  if (param_3 != bVar2) {\n    return 0;\n  }\n  if (param_3 == 0) {\n    return 1;\n  }\n  uVar3 = strcaseeq6(param_1,param_2,(int)param_4,(int)param_5,(int)param_6);\n  return uVar3;\n}\n\n", 
    "001028d0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint mbsinit(mbstate_t *__ps)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_mbsinit_00113fb0)();\n  return iVar1;\n}\n\n", 
    "001027b0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint __fxstat(int __ver,int __fildes,stat *__stat_buf)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR___fxstat_00113f20)();\n  return iVar1;\n}\n\n", 
    "00115228": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid _ITM_registerTMCloneTable(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "0010b6b0": "\nvoid xstrtol_fatal(undefined8 param_1,undefined8 param_2,char param_3,undefined8 param_4,\n                  undefined8 param_5)\n\n{\n  xstrtol_error(param_1,param_2,(int)param_3,param_4,param_5,exit_failure);\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n", 
    "0010a080": "\nvoid quotearg_n_style_mem\n               (undefined4 param_1,undefined8 param_2,undefined8 param_3,undefined8 param_4)\n\n{\n  long in_FS_OFFSET;\n  undefined auStack_68 [56];\n  long local_30;\n  \n  local_30 = *(long *)(in_FS_OFFSET + 0x28);\n  quoting_options_from_style(auStack_68);\n  quotearg_n_options(param_1,param_3,param_4,auStack_68);\n  if (local_30 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "00103c40": "\nundefined8 open_file(char *param_1,long *param_2)\n\n{\n  long lVar1;\n  long lVar2;\n  undefined8 uVar3;\n  int *piVar4;\n  \n  if ((*param_1 == '-') && (param_1[1] == '\\0')) {\n    lVar1 = dcgettext(0,\"standard input\",5);\n    lVar2 = stdin;\n    have_read_stdin = 1;\n    param_2[1] = lVar1;\n    *param_2 = lVar2;\n  }\n  else {\n    param_2[1] = (long)param_1;\n    lVar2 = fopen_safer(param_1,\"r\");\n    *param_2 = lVar2;\n  }\n  if (lVar2 != 0) {\n    fadvise(lVar2,2);\n    *(undefined *)((long)param_2 + 0x39) = 0;\n    *(undefined4 *)(param_2 + 2) = 0;\n    total_files = total_files + 1;\n    return 1;\n  }\n  failed_opens = 1;\n  if (ignore_failed_opens == '\\0') {\n    uVar3 = quotearg_n_style_colon(0,3,param_1);\n    piVar4 = __errno_location();\n                    /* WARNING: Subroutine does not return */\n    error(0,*piVar4,\"%s\",uVar3);\n  }\n  return 0;\n}\n\n", 
    "00115230": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint mbsinit(mbstate_t *__ps)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* mbsinit@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00115110": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid __libc_start_main(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __libc_start_main@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00102700": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_strcmp_00113ec8)();\n  return iVar1;\n}\n\n", 
    "001081d0": "\nbool strcaseeq9(long param_1,long param_2)\n\n{\n  int iVar1;\n  \n  iVar1 = c_strcasecmp(param_1 + 9,param_2 + 9);\n  return iVar1 == 0;\n}\n\n", 
    "00102940": "\nundefined main(int param_1,undefined8 *param_2)\n\n{\n  ulong uVar1;\n  bool bVar2;\n  char cVar3;\n  uint uVar4;\n  int iVar5;\n  void *__ptr;\n  char *pcVar6;\n  undefined8 uVar7;\n  int *piVar8;\n  undefined8 uVar9;\n  ulong uVar10;\n  ulong extraout_RDX;\n  long lVar11;\n  long lVar12;\n  ulong uVar13;\n  EVP_PKEY_CTX *ctx;\n  long in_FS_OFFSET;\n  long local_68;\n  uint local_60;\n  char local_5b;\n  char local_5a;\n  undefined4 local_50;\n  undefined4 local_4c;\n  ulong local_48;\n  long local_40;\n  \n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  local_48 = 0;\n  set_program_name(*param_2);\n  setlocale(6,\"\");\n  bindtextdomain(\"coreutils\",\"/usr/local/share/locale\");\n  textdomain(\"coreutils\");\n  atexit(close_stdout);\n  local_68 = 0;\n  if (1 < param_1) {\n    local_68 = xnmalloc((long)(param_1 + -1),8);\n  }\n  local_5a = '\\0';\n  bVar2 = false;\n  local_5b = '\\0';\n  local_60 = 0;\n  uVar13 = 0;\n  __ptr = (void *)0x0;\nLAB_00102a08:\n  local_50 = 0xffffffff;\n  uVar4 = getopt_long(param_1,param_2,\"-0123456789D:FJN:S::TW:abcde::fh:i::l:mn::o:rs::tvw:\",\n                      long_options,&local_50);\n  uVar10 = (ulong)uVar4;\n  if (uVar4 != 0xffffffff) {\n    if (uVar4 - 0x30 < 10) {\nLAB_00102e80:\n      uVar1 = uVar13 + 1;\n      if (local_48 <= uVar1) {\n        __ptr = (void *)x2realloc(__ptr,&local_48);\n      }\n      *(char *)((long)__ptr + uVar13) = (char)uVar10;\n      *(undefined *)((long)__ptr + uVar1) = 0;\n      uVar13 = uVar1;\n      goto LAB_00102a08;\n    }\n    if (0x81 < (int)uVar4) goto switchD_00102a6a_caseD_2;\n    switch(uVar10) {\n    case 1:\n      if (((first_page_number != 0) || (*optarg != '+')) ||\n         (cVar3 = first_last_page(0xfffffffe,0x2b,optarg + 1), cVar3 == '\\0')) {\n        uVar13 = 0;\n        *(char **)(local_68 + (ulong)local_60 * 8) = optarg;\n        local_60 = local_60 + 1;\n        goto LAB_00102a08;\n      }\n      break;\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n    case 6:\n    case 7:\n    case 8:\n    case 9:\n    case 10:\n    case 0xb:\n    case 0xc:\n    case 0xd:\n    case 0xe:\n    case 0xf:\n    case 0x10:\n    case 0x11:\n    case 0x12:\n    case 0x13:\n    case 0x14:\n    case 0x15:\n    case 0x16:\n    case 0x17:\n    case 0x18:\n    case 0x19:\n    case 0x1a:\n    case 0x1b:\n    case 0x1c:\n    case 0x1d:\n    case 0x1e:\n    case 0x1f:\n    case 0x20:\n    case 0x21:\n    case 0x22:\n    case 0x23:\n    case 0x24:\n    case 0x25:\n    case 0x26:\n    case 0x27:\n    case 0x28:\n    case 0x29:\n    case 0x2a:\n    case 0x2b:\n    case 0x2c:\n    case 0x2d:\n    case 0x2e:\n    case 0x2f:\n    case 0x30:\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n    case 0x3a:\n    case 0x3b:\n    case 0x3c:\n    case 0x3d:\n    case 0x3e:\n    case 0x3f:\n    case 0x40:\n    case 0x41:\n    case 0x42:\n    case 0x43:\n    case 0x45:\n    case 0x47:\n    case 0x48:\n    case 0x49:\n    case 0x4b:\n    case 0x4c:\n    case 0x4d:\n    case 0x4f:\n    case 0x50:\n    case 0x51:\n    case 0x52:\n    case 0x55:\n    case 0x56:\n    case 0x58:\n    case 0x59:\n    case 0x5a:\n    case 0x5b:\n    case 0x5c:\n    case 0x5d:\n    case 0x5e:\n    case 0x5f:\n    case 0x60:\n    case 0x67:\n    case 0x6a:\n    case 0x6b:\n    case 0x70:\n    case 0x71:\n    case 0x75:\n    case 0x78:\n    case 0x79:\n    case 0x7a:\n    case 0x7b:\n    case 0x7c:\n    case 0x7d:\n    case 0x7e:\n    case 0x7f:\n      goto switchD_00102a6a_caseD_2;\n    case 0x44:\n      date_format = optarg;\n      uVar13 = 0;\n      goto LAB_00102a08;\n    case 0x46:\n    case 0x66:\n      use_form_feed = 1;\n      uVar13 = 0;\n      goto LAB_00102a08;\n    case 0x4a:\n      join_lines = 1;\n      uVar13 = 0;\n      goto LAB_00102a08;\n    case 0x4e:\n      uVar13 = 0;\n      skip_count = 0;\n      uVar7 = dcgettext(0,\"\\'-N NUMBER\\' invalid starting line number\",5);\n      getoptnum(optarg,0x80000000,&start_line_num,uVar7);\n      goto LAB_00102a08;\n    case 0x53:\n      col_sep_length = 0;\n      col_sep_string = &DAT_0010d018;\n      use_col_separator = '\\x01';\n      local_5a = '\\0';\n      if (optarg != (char *)0x0) {\n        separator_string();\n        uVar13 = 0;\n        goto LAB_00102a08;\n      }\n      break;\n    case 0x54:\n      extremities = 0;\n      uVar13 = 0;\n      keep_FF = 0;\n      goto LAB_00102a08;\n    case 0x57:\n      uVar13 = 0;\n      truncate_lines = '\\x01';\n      uVar7 = dcgettext(0,\"\\'-W PAGE_WIDTH\\' invalid number of characters\",5);\n      getoptnum(optarg,1,&chars_per_line,uVar7);\n      bVar2 = false;\n      goto LAB_00102a08;\n    case 0x61:\n      print_across_flag = '\\x01';\n      uVar13 = 0;\n      storing_columns = 0;\n      goto LAB_00102a08;\n    case 0x62:\n      balance_columns = 1;\n      uVar13 = 0;\n      goto LAB_00102a08;\n    case 99:\n      use_cntrl_prefix = 1;\n      uVar13 = 0;\n      goto LAB_00102a08;\n    case 100:\n      double_space = 1;\n      uVar13 = 0;\n      goto LAB_00102a08;\n    case 0x65:\n      if (optarg != (char *)0x0) {\n        getoptarg(optarg,0x65,&input_tab_char,&chars_per_input_tab);\n      }\n      untabify_input = 1;\n      uVar13 = 0;\n      goto LAB_00102a08;\n    case 0x68:\n      custom_header = optarg;\n      uVar13 = 0;\n      goto LAB_00102a08;\n    case 0x69:\n      if (optarg != (char *)0x0) {\n        getoptarg(optarg,0x69,&output_tab_char,&chars_per_output_tab);\n      }\n      tabify_output = 1;\n      uVar13 = 0;\n      goto LAB_00102a08;\n    case 0x6c:\n      uVar13 = 0;\n      uVar7 = dcgettext(0,\"\\'-l PAGE_LENGTH\\' invalid number of lines\",5);\n      getoptnum(optarg,1,&lines_per_page,uVar7);\n      goto LAB_00102a08;\n    case 0x6d:\n      parallel_files = '\\x01';\n      uVar13 = 0;\n      storing_columns = 0;\n      goto LAB_00102a08;\n    case 0x6e:\n      numbered_lines = 1;\n      if (optarg != (char *)0x0) {\n        uVar13 = 0;\n        getoptarg(optarg,0x6e,&number_separator,&chars_per_number);\n        goto LAB_00102a08;\n      }\n      break;\n    case 0x6f:\n      uVar13 = 0;\n      uVar7 = dcgettext(0,\"\\'-o MARGIN\\' invalid line offset\",5);\n      getoptnum(optarg,0,&chars_per_margin,uVar7);\n      goto LAB_00102a08;\n    case 0x72:\n      ignore_failed_opens = 1;\n      uVar13 = 0;\n      goto LAB_00102a08;\n    case 0x73:\n      local_5b = use_col_separator;\n      local_5a = local_5b;\n      if (use_col_separator == '\\0') {\n        if (optarg == (char *)0x0) {\n          local_5a = '\\x01';\n          uVar13 = 0;\n          local_5b = '\\x01';\n        }\n        else {\n          separator_string();\n          uVar13 = 0;\n          local_5a = '\\x01';\n          local_5b = '\\x01';\n        }\n        goto LAB_00102a08;\n      }\n      break;\n    case 0x74:\n      extremities = 0;\n      uVar13 = 0;\n      keep_FF = 1;\n      goto LAB_00102a08;\n    case 0x76:\n      use_esc_sequence = 1;\n      uVar13 = 0;\n      goto LAB_00102a08;\n    case 0x77:\n      uVar7 = dcgettext(0,\"\\'-w PAGE_WIDTH\\' invalid number of characters\",5);\n      getoptnum(optarg,1,&local_4c,uVar7);\n      if (truncate_lines == '\\0') {\n        chars_per_line = local_4c;\n      }\n      bVar2 = true;\n      uVar13 = 0;\n      local_5b = '\\x01';\n      goto LAB_00102a08;\n    case 0x80:\n      goto switchD_00102a6a_caseD_80;\n    case 0x81:\n      if (optarg == (char *)0x0) {\n        uVar7 = dcgettext(0,\"\\'--pages=FIRST_PAGE[:LAST_PAGE]\\' missing argument\",5);\n                    /* WARNING: Subroutine does not return */\n        error(1,0,uVar7);\n      }\n      cVar3 = first_last_page(local_50,0);\n      if (cVar3 == '\\0') {\n        uVar7 = quote(optarg);\n        uVar9 = dcgettext(0,\"invalid page range %s\",5);\n                    /* WARNING: Subroutine does not return */\n        error(1,0,uVar9,uVar7);\n      }\n      break;\n    default:\n      if (uVar4 == 0xffffff7d) {\n        version_etc(stdout,&DAT_0010d09c,\"GNU coreutils\",Version,\"Pete TerMaat\",\"Roland Huebner\",0,\n                    uVar4 - 0x30);\n                    /* WARNING: Subroutine does not return */\n        exit(0);\n      }\n      if (uVar4 == 0xffffff7e) {\n        usage(0);\n        uVar10 = extraout_RDX;\n        goto LAB_00102e80;\n      }\nswitchD_00102a6a_caseD_2:\n      cVar3 = '\\x01';\n      usage();\n      goto LAB_0010316d;\n    }\n    uVar13 = 0;\n    goto LAB_00102a08;\n  }\n  if (__ptr != (void *)0x0) {\n    parse_column_count(__ptr);\n    free(__ptr);\n  }\n  if (date_format == (char *)0x0) {\n    pcVar6 = getenv(\"POSIXLY_CORRECT\");\n    if ((pcVar6 == (char *)0x0) || (cVar3 = hard_locale(2), cVar3 != '\\0')) {\n      date_format = \"%Y-%m-%d %H:%M\";\n    }\n    else {\n      date_format = \"%b %e %H:%M %Y\";\n    }\n  }\n  pcVar6 = getenv(\"TZ\");\n  localtz = tzalloc(pcVar6);\n  if (first_page_number == 0) {\n    first_page_number = 1;\n  }\n  if (parallel_files != '\\0') {\n    if (explicit_columns != '\\0') {\n      uVar7 = dcgettext(0,\"cannot specify number of columns when printing in parallel\",5);\n                    /* WARNING: Subroutine does not return */\n      error(1,0,uVar7);\n    }\n    if (print_across_flag != '\\0') {\n      uVar7 = dcgettext(0,\"cannot specify both printing across and printing in parallel\",5);\n                    /* WARNING: Subroutine does not return */\n      error(1,0,uVar7);\n    }\n  }\n  cVar3 = parallel_files;\n  if (local_5b == '\\0') goto LAB_00102fa1;\n  if (bVar2) {\n    if ((parallel_files == '\\0') && (explicit_columns == '\\0')) {\nLAB_0010316d:\n      join_lines = 1;\n      goto LAB_00102fa1;\n    }\n    truncate_lines = '\\x01';\n    if (local_5a == '\\0') goto LAB_00102fa1;\n  }\n  else if ((((use_col_separator == '\\x01') || (local_5a == '\\0')) ||\n           ((parallel_files == '\\0' && (explicit_columns == '\\0')))) ||\n          ((truncate_lines == '\\0' && (join_lines = 1, col_sep_length < 1)))) goto LAB_00102fa1;\n  use_col_separator = '\\x01';\nLAB_00102fa1:\n  if (optind < param_1) {\n    param_2 = param_2 + optind;\n    uVar4 = (param_1 - optind) + local_60;\n    do {\n      uVar7 = *param_2;\n      uVar13 = (ulong)local_60;\n      local_60 = local_60 + 1;\n      param_2 = param_2 + 1;\n      *(undefined8 *)(local_68 + uVar13 * 8) = uVar7;\n      optind = param_1;\n    } while (local_60 != uVar4);\n  }\n  if (local_60 == 0) {\n    ctx = (EVP_PKEY_CTX *)0x0;\n    print_files(0,0);\n  }\n  else if (cVar3 == '\\0') {\n    lVar11 = local_68;\n    do {\n      ctx = (EVP_PKEY_CTX *)0x1;\n      lVar12 = lVar11 + 8;\n      print_files(1,lVar11);\n      lVar11 = lVar12;\n    } while (local_68 + 8 + (ulong)(local_60 - 1) * 8 != lVar12);\n  }\n  else {\n    ctx = (EVP_PKEY_CTX *)(ulong)local_60;\n    print_files(ctx,local_68);\n  }\n  cleanup(ctx);\n  if ((have_read_stdin != '\\0') && (iVar5 = rpl_fclose(stdin), iVar5 == -1)) {\n    uVar7 = dcgettext(0,\"standard input\",5);\n    piVar8 = __errno_location();\n                    /* WARNING: Subroutine does not return */\n    error(1,*piVar8,uVar7);\n  }\n  if (local_40 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return failed_opens;\nswitchD_00102a6a_caseD_80:\n  uVar13 = 0;\n  parse_column_count(optarg);\n  free(__ptr);\n  local_48 = 0;\n  __ptr = (void *)0x0;\n  goto LAB_00102a08;\n}\n\n", 
    "001151b8": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nFILE * fdopen(int __fd,char *__modes)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fdopen@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00102820": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\ntime_t timegm(tm *__tp)\n\n{\n  time_t tVar1;\n  \n  tVar1 = (*(code *)PTR_timegm_00113f58)();\n  return tVar1;\n}\n\n", 
    "00108800": "\nuint * gettext_quote(uint *param_1,int param_2)\n\n{\n  int iVar1;\n  uint *puVar2;\n  undefined8 uVar3;\n  \n  puVar2 = (uint *)dcgettext(0,param_1,5);\n  if (param_1 == puVar2) {\n    uVar3 = locale_charset();\n    iVar1 = strcaseeq0_constprop_0(uVar3,0x10ea51,0x55,0x54,0x46,0x2d,0x38,0,0);\n    if (iVar1 == 0) {\n      iVar1 = strcaseeq0_constprop_0(uVar3,0x10ea57,0x47,0x42,0x31,0x38,0x30,0x33,0x30);\n      if (iVar1 == 0) {\n        puVar2 = &UINT_0010ea40;\n        if (param_2 != 9) {\n          puVar2 = (uint *)0x10f8db;\n        }\n        return puVar2;\n      }\n      if (*(char *)puVar2 == '`') {\n        puVar2 = (uint *)((long)&UINT_0010ea48 + 1);\n      }\n      else {\n        puVar2 = (uint *)((long)&UINT_0010ea44 + 2);\n      }\n    }\n    else if (*(char *)puVar2 == '`') {\n      puVar2 = (uint *)((long)&UINT_0010ea4c + 1);\n    }\n    else {\n      puVar2 = (uint *)((long)&UINT_0010ea40 + 2);\n    }\n  }\n  return puVar2;\n}\n\n", 
    "00106740": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Type propagation algorithm not settling */\n/* WARNING: Could not reconcile some variable overlaps */\n\nlong __strftime_internal(char *param_1,long param_2,char *param_3,tm *param_4,char param_5,\n                        undefined8 param_6,undefined8 param_7,uint param_8)\n\n{\n  byte *pbVar1;\n  long lVar2;\n  bool bVar3;\n  int iVar4;\n  char *pcVar5;\n  ulong uVar6;\n  char *pcVar7;\n  long lVar8;\n  int iVar9;\n  uint uVar10;\n  ulong uVar11;\n  size_t sVar12;\n  char *pcVar13;\n  size_t __n;\n  char *pcVar14;\n  long lVar15;\n  char cVar16;\n  uint uVar17;\n  int iVar18;\n  long lVar19;\n  char cVar20;\n  uint uVar21;\n  int iVar22;\n  ulong __n_00;\n  char *pcVar23;\n  int iVar24;\n  uint uVar25;\n  uint uVar26;\n  char cVar27;\n  uint uVar28;\n  uint uVar29;\n  int iVar30;\n  char cVar31;\n  char *__s;\n  ulong uVar32;\n  long in_FS_OFFSET;\n  char *local_4c8;\n  undefined8 local_488;\n  undefined8 uStack_480;\n  undefined8 local_478;\n  undefined8 uStack_470;\n  undefined8 local_468;\n  long lStack_460;\n  char *local_458;\n  undefined2 local_44d;\n  char local_44b;\n  char local_44a [2];\n  char local_448;\n  undefined local_447 [21];\n  char local_432 [1010];\n  long local_40;\n  \n  __s = param_4->tm_zone;\n  uVar28 = param_4->tm_hour;\n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  if (__s == (char *)0x0) {\n    __s = \"\";\n  }\n  if ((int)uVar28 < 0xd) {\n    if (uVar28 == 0) {\n      uVar28 = 0xc;\n    }\n  }\n  else {\n    uVar28 = uVar28 - 0xc;\n  }\n  cVar27 = *param_3;\n  lVar15 = 0;\n  do {\n    if (cVar27 == '\\0') {\n      if ((param_1 != (char *)0x0) && (param_2 != 0)) {\n        *param_1 = '\\0';\n      }\nLAB_00106823:\n      if (local_40 == *(long *)(in_FS_OFFSET + 0x28)) {\n        return lVar15;\n      }\n                    /* WARNING: Subroutine does not return */\n      __stack_chk_fail();\n    }\n    if (cVar27 != '%') {\n      if ((ulong)(param_2 - lVar15) < 2) goto LAB_00106820;\n      if (param_1 != (char *)0x0) {\n        *param_1 = cVar27;\n        param_1 = param_1 + 1;\n      }\n      lVar15 = lVar15 + 1;\n      goto LAB_001067f4;\n    }\n    cVar16 = '\\0';\n    iVar30 = 0;\n    cVar27 = param_5;\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            cVar20 = param_3[1];\n            uVar25 = (uint)cVar20;\n            param_3 = param_3 + 1;\n            if (cVar20 != '0') break;\n            iVar30 = 0x30;\n          }\n          if ('0' < cVar20) break;\n          if (cVar20 == '#') {\n            cVar16 = '\\x01';\n          }\n          else {\n            if (cVar20 != '-') {\n              uVar29 = 0xffffffff;\n              goto LAB_001068de;\n            }\n            iVar30 = 0x2d;\n          }\n        }\n        if (cVar20 != '^') break;\n        cVar27 = '\\x01';\n      }\n      if (cVar20 != '_') break;\n      iVar30 = 0x5f;\n    }\n    if (uVar25 - 0x30 < 10) {\n      uVar29 = 0;\n      pcVar5 = param_3;\n      do {\n        uVar25 = (uint)pcVar5[1];\n        param_3 = pcVar5 + 1;\n        uVar26 = uVar25 - 0x30;\n        if ((int)uVar29 < 0xccccccd) {\n          if ((uVar29 == 0xccccccc) && ('7' < *pcVar5)) goto LAB_00106a7d;\n          uVar29 = *pcVar5 + -0x30 + uVar29 * 10;\n        }\n        else {\nLAB_00106a7d:\n          if (9 < uVar26) {\n            uVar29 = 0x7fffffff;\n            break;\n          }\n          uVar25 = (uint)pcVar5[2];\n          uVar29 = 0x7fffffff;\n          param_3 = pcVar5 + 2;\n          uVar26 = uVar25 - 0x30;\n        }\n        pcVar5 = param_3;\n      } while (uVar26 < 10);\n    }\n    else {\n      uVar29 = 0xffffffff;\n    }\n    if ((char)uVar25 != 'E') {\nLAB_001068de:\n      if ((byte)uVar25 == 0x4f) goto LAB_00106916;\n      uVar26 = 0;\n      uVar21 = uVar25;\n      if ((byte)uVar25 < 0x7b) goto LAB_001068ed;\n      goto switchD_001068ff_caseD_1;\n    }\nLAB_00106916:\n    pbVar1 = (byte *)(param_3 + 1);\n    uVar21 = (uint)*pbVar1;\n    param_3 = param_3 + 1;\n    uVar26 = uVar25;\n    if (0x7a < *pbVar1) goto switchD_001068ff_caseD_1;\nLAB_001068ed:\n    cVar20 = (char)uVar21;\n    uVar25 = uVar28;\n                    /* WARNING (jumptable): Sanity check requires truncation of jumptable */\n                    /* WARNING: Could not find normalized switch variable to match jumptable */\n    switch(uVar21 & 0xff) {\n    case 0:\n      cVar16 = param_3[-1];\n      param_3 = param_3 + -1;\nLAB_001076a2:\n      uVar11 = param_2 - lVar15;\n      uVar25 = 0;\n      if (-1 < (int)uVar29) {\n        uVar25 = uVar29;\n      }\n      uVar6 = (ulong)(int)uVar25;\n      if (cVar16 != '%') break;\n      __n_00 = 1;\n      pcVar5 = param_3;\n      uVar32 = 1;\n      if (uVar6 != 0) {\n        uVar32 = uVar6;\n      }\n      goto LAB_00106968;\n    case 0x25:\n      uVar11 = param_2 - lVar15;\n      uVar25 = 0;\n      if (-1 < (int)uVar29) {\n        uVar25 = uVar29;\n      }\n      uVar6 = (ulong)(int)uVar25;\n      uVar32 = 1;\n      if (uVar6 != 0) {\n        uVar32 = uVar6;\n      }\n      if (uVar26 != 0) {\n        __n_00 = 1;\n        pcVar5 = param_3;\n        goto LAB_00106968;\n      }\n      if (uVar32 < uVar11) {\n        if (param_1 != (char *)0x0) {\n          pcVar5 = param_1;\n          if (1 < (int)uVar29) {\n            iVar22 = 0x30;\n            pcVar5 = param_1 + ((long)(int)uVar29 - 1U);\n            if (iVar30 != 0x30) {\n              iVar22 = 0x20;\n            }\n            memset(param_1,iVar22,(long)(int)uVar29 - 1U);\n            cVar20 = *param_3;\n          }\n          *pcVar5 = cVar20;\n          param_1 = pcVar5 + 1;\n        }\n        goto LAB_00107166;\n      }\n      goto LAB_00106820;\n    case 0x3a:\n      pcVar5 = param_3 + 1;\n      uVar32 = 1;\n      cVar16 = param_3[1];\n      while (cVar16 == ':') {\n        uVar32 = uVar32 + 1;\n        pcVar5 = param_3 + uVar32;\n        cVar16 = param_3[uVar32];\n      }\n      if (cVar16 == 'z') goto LAB_001078cd;\n      break;\n    case 0x41:\n    case 0x61:\n      if (uVar26 != 0) break;\n      pcVar5 = &local_44b;\n      if (cVar16 != '\\0') {\n        cVar27 = cVar16;\n      }\n      cVar31 = '\\0';\n      uVar26 = 0;\n      goto LAB_00106adc;\n    case 0x42:\n      if (uVar26 != 0x45) {\n        if (cVar16 != '\\0') {\n          cVar27 = cVar16;\n        }\n        cVar31 = '\\0';\n        goto LAB_00106abb;\n      }\n      break;\n    case 0x43:\n      if (uVar26 != 0x45) {\n        iVar18 = param_4->tm_year;\n        bVar3 = false;\n        uVar21 = 2;\n        iVar22 = iVar18 / 100 + 0x13;\n        local_4c8._0_1_ = iVar18 < -0x76c;\n        uVar25 = iVar22 - ((uint)(0 < iVar22) & (uint)(iVar18 % 100) >> 0x1f);\n        uVar10 = 0;\n        goto LAB_00106d60;\n      }\nLAB_00107cf8:\n      uVar21 = 0;\n      goto LAB_00106d75;\n    case 0x44:\n      if (uVar26 == 0) {\n        local_4c8 = \"%m/%d/%y\";\n        goto LAB_00107577;\n      }\n      break;\n    case 0x46:\n      if (uVar26 == 0) {\n        local_4c8 = \"%Y-%m-%d\";\n        goto LAB_00107577;\n      }\n      break;\n    case 0x47:\n    case 0x56:\n    case 0x67:\n      if (uVar26 != 0x45) {\n        iVar22 = param_4->tm_year;\n        iVar18 = param_4->tm_yday;\n        uVar32 = (ulong)(iVar22 + -100 + (iVar22 >> 0x1f & 400U));\n        iVar4 = iso_week_days();\n        iVar24 = (int)uVar32;\n        if (iVar4 < 0) {\n          uVar25 = iVar24 - 1;\n          iVar4 = 0x16d;\n          if (((uVar25 & 3) == 0) &&\n             (iVar4 = 0x16e,\n             (uVar25 * -0x3d70a3d7 + 0x51eb850 >> 2 | uVar25 * 0x40000000) < 0x28f5c29)) {\n            iVar4 = ~-(uint)((int)uVar25 % 400 == 0) + 0x16e;\n          }\n          iVar4 = iso_week_days(iVar18 + iVar4);\n          iVar18 = -1;\n        }\n        else {\n          iVar9 = 0x16d;\n          if ((uVar32 & 3) == 0) {\n            iVar9 = 0x16e;\n            uVar25 = iVar24 * -0x3d70a3d7 + 0x51eb850;\n            if ((uVar25 >> 2 | iVar24 * 0x40000000) < 0x28f5c29) {\n              iVar9 = ((uVar25 >> 4 | iVar24 * -0x70000000) < 0xa3d70b) + 0x16d;\n            }\n          }\n          iVar18 = iso_week_days(iVar18 - iVar9);\n          if (-1 < iVar18) {\n            iVar4 = iVar18;\n          }\n          iVar18 = (iVar18 >> 0x1f) + 1;\n        }\n        if (cVar20 == 'G') {\n          bVar3 = false;\n          uVar21 = 4;\n          uVar25 = iVar22 + 0x76c + iVar18;\n          local_4c8._0_1_ = iVar22 < -0x76c - iVar18;\n          uVar10 = 0;\n          goto LAB_00106d60;\n        }\n        if (cVar20 == 'g') {\n          uVar21 = 2;\n          uVar17 = (iVar22 % 100 + iVar18) % 100;\n          uVar25 = uVar17;\n          if ((int)uVar17 < 0) {\n            uVar25 = uVar17 + 100;\n            if (iVar22 < -0x76c - iVar18) {\n              uVar25 = -uVar17;\n            }\n          }\n        }\n        else {\n          uVar25 = iVar4 / 7 + 1;\n          uVar21 = 2;\n        }\n        goto LAB_00106d50;\n      }\n      break;\n    case 0x48:\n      if (uVar26 != 0x45) {\n        uVar25 = param_4->tm_hour;\n        uVar21 = 2;\n        goto LAB_00106d50;\n      }\n      break;\n    case 0x49:\n      if (uVar26 != 0x45) {\n        uVar21 = 2;\n        goto LAB_00106d50;\n      }\n      break;\n    case 0x4d:\n      if (uVar26 != 0x45) {\n        uVar25 = param_4->tm_min;\n        uVar21 = 2;\n        goto LAB_00106d50;\n      }\n      break;\n    case 0x4e:\n      if (uVar26 != 0x45) {\n        uVar25 = param_8;\n        if (uVar29 == 0xffffffff) {\n          uVar29 = 9;\n          uVar21 = 9;\n        }\n        else {\n          uVar17 = param_8;\n          uVar21 = uVar29;\n          uVar10 = uVar29;\n          if ((int)uVar29 < 9) {\n            do {\n              uVar10 = uVar10 + 1;\n              uVar25 = (int)uVar17 / 10;\n              uVar17 = (int)uVar17 / 10;\n            } while (uVar10 != 9);\n          }\n        }\n        goto LAB_00106d50;\n      }\n      break;\n    case 0x50:\n      cVar31 = '\\x01';\n      goto LAB_0010798f;\n    case 0x52:\n      local_4c8 = \"%H:%M\";\n      goto LAB_00107577;\n    case 0x53:\n      if (uVar26 != 0x45) {\n        uVar25 = param_4->tm_sec;\n        uVar21 = 2;\n        goto LAB_00106d50;\n      }\n      break;\n    case 0x54:\n      local_4c8 = \"%H:%M:%S\";\nLAB_00107577:\n      uVar32 = __strftime_internal(0,0xffffffffffffffff,local_4c8,param_4,cVar27,param_6,param_7,\n                                   param_8);\n      uVar25 = 0;\n      if (-1 < (int)uVar29) {\n        uVar25 = uVar29;\n      }\n      uVar6 = (ulong)(int)uVar25;\n      uVar11 = uVar6;\n      if (uVar6 <= uVar32) {\n        uVar11 = uVar32;\n      }\n      if ((ulong)(param_2 - lVar15) <= uVar11) goto LAB_00106820;\n      if (param_1 != (char *)0x0) {\n        pcVar5 = param_1;\n        if (uVar32 < uVar6) {\n          sVar12 = (long)(int)uVar29 - uVar32;\n          pcVar5 = param_1 + sVar12;\n          if (iVar30 == 0x30) {\n            memset(param_1,0x30,sVar12);\n          }\n          else {\n            memset(param_1,0x20,sVar12);\n          }\n        }\n        param_1 = pcVar5 + uVar32;\n        __strftime_internal(pcVar5,param_2 - lVar15,local_4c8,param_4,cVar27,param_6,param_7,param_8\n                           );\n      }\n      lVar15 = lVar15 + uVar11;\n      goto LAB_001067f4;\n    case 0x55:\n      if (uVar26 != 0x45) {\n        iVar22 = (param_4->tm_yday - param_4->tm_wday) + 7;\nLAB_00107367:\n        uVar25 = iVar22 / 7;\n        uVar21 = 2;\n        goto LAB_00106d50;\n      }\n      break;\n    case 0x57:\n      if (uVar26 != 0x45) {\n        iVar22 = param_4->tm_wday + 6;\n        iVar22 = ((iVar22 / 7) * 7 - iVar22) + 7 + param_4->tm_yday;\n        goto LAB_00107367;\n      }\n      break;\n    case 0x58:\n    case 99:\n    case 0x78:\n      if (uVar26 != 0x4f) goto switchD_001068ff_caseD_72;\n      break;\n    case 0x59:\n      if (uVar26 == 0x45) goto LAB_00107cf8;\n      if (uVar26 == 0x4f) break;\n      bVar3 = false;\n      uVar17 = 4;\n      local_4c8._0_1_ = param_4->tm_year < -0x76c;\n      uVar25 = param_4->tm_year + 0x76c;\n      uVar10 = 0;\n      goto LAB_00106e20;\n    case 0x5a:\n      if (cVar16 != '\\0') {\n        cVar27 = '\\0';\n      }\n      sVar12 = strlen(__s);\n      uVar25 = 0;\n      if (-1 < (int)uVar29) {\n        uVar25 = uVar29;\n      }\n      uVar11 = (ulong)(int)uVar25;\n      uVar32 = uVar11;\n      if (uVar11 <= sVar12) {\n        uVar32 = sVar12;\n      }\n      if (uVar32 < (ulong)(param_2 - lVar15)) {\n        if (param_1 != (char *)0x0) {\n          pcVar5 = param_1;\n          if (sVar12 < uVar11) {\n            __n = (long)(int)uVar29 - sVar12;\n            pcVar5 = param_1 + __n;\n            if (iVar30 == 0x30) {\n              memset(param_1,0x30,__n);\n            }\n            else {\n              memset(param_1,0x20,__n);\n            }\n          }\n          if (cVar16 == '\\0') {\n            if (cVar27 == '\\0') {\n              memcpy(pcVar5,__s,sVar12);\n            }\n            else {\n              memcpy_uppcase();\n            }\n          }\n          else {\n            memcpy_lowcase();\n          }\n          param_1 = pcVar5 + sVar12;\n        }\n        lVar15 = lVar15 + uVar32;\n        goto LAB_001067f4;\n      }\n      goto LAB_00106820;\n    case 0x62:\n    case 0x68:\n      if (cVar16 != '\\0') {\n        cVar27 = cVar16;\n      }\n      if (uVar26 != 0x45) goto switchD_001068ff_caseD_72;\n      break;\n    case 100:\n      if (uVar26 != 0x45) {\n        uVar25 = param_4->tm_mday;\n        uVar21 = 2;\n        goto LAB_00106d50;\n      }\n      break;\n    case 0x65:\n      if (uVar26 != 0x45) {\n        uVar25 = param_4->tm_mday;\nLAB_0010779f:\n        uVar21 = 2;\n        if ((iVar30 != 0x30) && (iVar30 != 0x2d)) {\n          iVar30 = 0x5f;\n        }\n        goto LAB_00106d50;\n      }\n      break;\n    case 0x6a:\n      if (uVar26 != 0x45) {\n        bVar3 = false;\n        uVar21 = 3;\n        local_4c8._0_1_ = param_4->tm_yday < -1;\n        uVar25 = param_4->tm_yday + 1;\n        uVar10 = 0;\n        goto LAB_00106d60;\n      }\n      break;\n    case 0x6b:\n      if (uVar26 != 0x45) {\n        uVar25 = param_4->tm_hour;\n        goto LAB_0010779f;\n      }\n      break;\n    case 0x6c:\n      if (uVar26 != 0x45) goto LAB_0010779f;\n      break;\n    case 0x6d:\n      if (uVar26 != 0x45) {\n        bVar3 = false;\n        uVar21 = 2;\n        local_4c8._0_1_ = param_4->tm_mon < -1;\n        uVar25 = param_4->tm_mon + 1;\n        uVar10 = 0;\n        goto LAB_00106d60;\n      }\n      break;\n    case 0x6e:\n      uVar25 = 0;\n      if (-1 < (int)uVar29) {\n        uVar25 = uVar29;\n      }\n      uVar32 = (ulong)(int)uVar25;\n      if (uVar32 == 0) {\n        uVar32 = 1;\n      }\n      if (uVar32 < (ulong)(param_2 - lVar15)) {\n        if (param_1 != (char *)0x0) {\n          pcVar5 = param_1;\n          if (1 < (int)uVar29) {\n            sVar12 = (long)(int)uVar29 - 1;\n            pcVar5 = param_1 + sVar12;\n            if (iVar30 == 0x30) {\n              memset(param_1,0x30,sVar12);\n            }\n            else {\n              memset(param_1,0x20,sVar12);\n            }\n          }\n          *pcVar5 = '\\n';\n          param_1 = pcVar5 + 1;\n        }\nLAB_00107166:\n        lVar15 = lVar15 + uVar32;\n        goto LAB_001067f4;\n      }\n      goto LAB_00106820;\n    case 0x70:\n      cVar31 = '\\0';\nLAB_0010798f:\n      cVar20 = 'p';\n      if (cVar16 != '\\0') {\n        cVar27 = '\\0';\n        cVar31 = cVar16;\n      }\nLAB_00106abb:\n      if (uVar26 != 0) {\n        uVar21 = 0;\n        goto LAB_00106d85;\n      }\n      pcVar5 = &local_44b;\n      goto LAB_00106adc;\n    case 0x71:\n      uVar21 = 1;\n      uVar17 = 1;\n      if (uVar26 == 0x4f) goto LAB_00106d75;\n      bVar3 = false;\n      uVar10 = 0;\n      local_4c8._0_1_ = false;\n      uVar25 = (param_4->tm_mon * 0xb >> 5) + 1;\n      goto LAB_00106e29;\n    case 0x72:\nswitchD_001068ff_caseD_72:\n      cVar31 = '\\0';\n      goto LAB_00106abb;\n    case 0x73:\n      local_488 = *(undefined8 *)param_4;\n      uStack_480 = *(undefined8 *)&param_4->tm_hour;\n      local_478 = *(undefined8 *)&param_4->tm_mon;\n      uStack_470 = *(undefined8 *)&param_4->tm_wday;\n      local_468 = *(undefined8 *)&param_4->tm_isdst;\n      lStack_460 = param_4->tm_gmtoff;\n      local_458 = param_4->tm_zone;\n      lVar8 = mktime_z(param_7,&local_488);\n      pcVar5 = local_432 + 1;\n      lVar19 = lVar8;\n      do {\n        lVar2 = lVar19 / 10;\n        cVar16 = (char)lVar19 + (char)lVar2 * -10;\n        if (lVar8 < 0) {\n          cVar16 = -cVar16;\n        }\n        pcVar5 = pcVar5 + -1;\n        *pcVar5 = cVar16 + '0';\n        lVar19 = lVar2;\n      } while (lVar2 != 0);\n      uVar17 = 1;\n      if (0 < (int)uVar29) {\n        uVar17 = uVar29;\n      }\n      if (lVar8 < 0) goto LAB_001079f0;\n      goto LAB_001072cb;\n    case 0x74:\n      uVar25 = 0;\n      if (-1 < (int)uVar29) {\n        uVar25 = uVar29;\n      }\n      uVar32 = (ulong)(int)uVar25;\n      if (uVar32 == 0) {\n        uVar32 = 1;\n      }\n      if (uVar32 < (ulong)(param_2 - lVar15)) {\n        if (param_1 != (char *)0x0) {\n          pcVar5 = param_1;\n          if (1 < (int)uVar29) {\n            sVar12 = (long)(int)uVar29 - 1;\n            pcVar5 = param_1 + sVar12;\n            if (iVar30 == 0x30) {\n              memset(param_1,0x30,sVar12);\n            }\n            else {\n              memset(param_1,0x20,sVar12);\n            }\n          }\n          *pcVar5 = '\\t';\n          param_1 = pcVar5 + 1;\n        }\n        goto LAB_00107166;\n      }\n      goto LAB_00106820;\n    case 0x75:\n      uVar25 = (param_4->tm_wday + 6) % 7 + 1;\n      uVar21 = 1;\n      goto LAB_00106d50;\n    case 0x77:\n      if (uVar26 != 0x45) {\n        uVar25 = param_4->tm_wday;\n        uVar21 = 1;\n        goto LAB_00106d50;\n      }\n      break;\n    case 0x79:\n      if (uVar26 == 0x45) goto LAB_00107cf8;\n      uVar21 = 2;\n      uVar17 = param_4->tm_year % 100;\n      uVar25 = uVar17;\n      if ((int)uVar17 < 0) {\n        uVar25 = uVar17 + 100;\n        if (param_4->tm_year < -0x76c) {\n          uVar25 = -uVar17;\n        }\n      }\nLAB_00106d50:\n      bVar3 = false;\n      uVar10 = 0;\n      local_4c8._0_1_ = (char)(uVar25 >> 0x1f);\nLAB_00106d60:\n      uVar17 = uVar21;\n      if (uVar26 != 0x4f) {\nLAB_00106e20:\n        if ((bool)(char)local_4c8 != false) goto LAB_00106e27;\nLAB_00106e29:\n        pcVar14 = local_432 + 1;\n        pcVar5 = local_432;\n        while( true ) {\n          if ((uVar10 & 1) != 0) {\n            pcVar14[-1] = ':';\n            pcVar7 = pcVar14 + -2;\n            pcVar14 = pcVar5;\n            pcVar5 = pcVar7;\n          }\n          uVar10 = (int)uVar10 >> 1;\n          pcVar14[-1] = (char)(uVar25 % 10) + '0';\n          if ((uVar25 < 10) && (uVar10 == 0)) break;\n          uVar25 = uVar25 / 10;\n          pcVar14 = pcVar5;\n          pcVar5 = pcVar5 + -1;\n        }\n        if ((int)uVar17 < (int)uVar29) {\n          uVar17 = uVar29;\n        }\n        if ((bool)(char)local_4c8 != false) {\nLAB_001079f0:\n          local_4c8._0_1_ = '-';\n          cVar16 = '-';\n          if (iVar30 != 0x2d) goto LAB_00106eda;\nLAB_00107a05:\n          uVar25 = 0;\n          if (-1 < (int)uVar29) {\n            uVar25 = uVar29;\n          }\n          pcVar23 = (char *)(long)(int)uVar25;\n          pcVar14 = (char *)0x1;\n          if (pcVar23 != (char *)0x0) {\n            pcVar14 = pcVar23;\n          }\n          if ((char *)(param_2 - lVar15) <= pcVar14) goto LAB_00106820;\n          if (param_1 != (char *)0x0) {\n            if ((uVar17 == 0) && ((char *)0x1 < pcVar23)) {\n              memset(param_1,0x20,(long)(int)uVar29 - 1U);\n              param_1 = param_1 + ((long)(int)uVar29 - 1U);\n            }\n            *param_1 = cVar16;\n            param_1 = param_1 + 1;\n          }\n          lVar15 = lVar15 + (long)pcVar14;\n          iVar30 = 0x2d;\n          pcVar13 = local_432 + (1 - (long)pcVar5);\n          pcVar7 = (char *)(param_2 - lVar15);\n          goto LAB_00107001;\n        }\n        if (bVar3) {\n          if (iVar30 == 0x2d) {\n            cVar16 = '+';\n            goto LAB_00107a05;\n          }\n          local_4c8._0_1_ = '+';\nLAB_00106eda:\n          pcVar13 = local_432 + (1 - (long)pcVar5);\n          iVar22 = (uVar17 - 1) - (int)pcVar13;\n          pcVar7 = (char *)(param_2 - lVar15);\n          if (iVar22 < 1) {\n            uVar25 = 0;\n            if (-1 < (int)uVar29) {\n              uVar25 = uVar29;\n            }\n            pcVar23 = (char *)(long)(int)uVar25;\n            pcVar14 = (char *)0x1;\n            if (pcVar23 != (char *)0x0) {\n              pcVar14 = pcVar23;\n            }\n            if (pcVar7 <= pcVar14) goto LAB_00106820;\n            if (param_1 != (char *)0x0) {\n              pcVar7 = param_1;\n              if ((uVar17 == 0) && ((char *)0x1 < pcVar23)) {\n                sVar12 = (long)(int)uVar29 - 1;\n                pcVar7 = param_1 + sVar12;\n                if (iVar30 == 0x30) {\n                  memset(param_1,0x30,sVar12);\n                }\n                else {\n                  memset(param_1,0x20,sVar12);\n                }\n              }\n              param_1 = pcVar7 + 1;\n              *pcVar7 = (char)local_4c8;\n            }\n            lVar15 = lVar15 + (long)pcVar14;\n            pcVar7 = (char *)(param_2 - lVar15);\n            goto LAB_00107001;\n          }\n        }\n        else {\nLAB_001072cb:\n          pcVar13 = local_432 + (1 - (long)pcVar5);\n          pcVar7 = (char *)(param_2 - lVar15);\n          if ((iVar30 == 0x2d) || (iVar22 = uVar17 - (int)pcVar13, iVar22 < 1)) {\n            uVar25 = 0;\n            if (-1 < (int)uVar29) {\n              uVar25 = uVar29;\n            }\n            pcVar23 = (char *)(long)(int)uVar25;\n            goto LAB_00107001;\n          }\n          local_4c8._0_1_ = '\\0';\n        }\n        if (iVar30 == 0x5f) {\n          pcVar14 = (char *)(long)iVar22;\n          if (pcVar14 < pcVar7) {\n            pcVar13 = param_1;\n            if (param_1 != (char *)0x0) {\n              memset(param_1,0x20,(size_t)pcVar14);\n              pcVar13 = param_1 + (long)pcVar14;\n            }\n            lVar15 = lVar15 + (long)pcVar14;\n            if (iVar22 < (int)uVar29) {\n              uVar29 = uVar29 - iVar22;\n              pcVar23 = (char *)(long)(int)uVar29;\n            }\n            else {\n              pcVar23 = (char *)0x0;\n              uVar29 = 0;\n            }\n            pcVar7 = (char *)(param_2 - lVar15);\n            param_1 = pcVar13;\n            if ((char)local_4c8 == '\\0') {\n              pcVar13 = local_432 + (1 - (long)pcVar5);\n            }\n            else {\n              pcVar14 = (char *)0x1;\n              if (pcVar23 != (char *)0x0) {\n                pcVar14 = pcVar23;\n              }\n              if (pcVar7 <= pcVar14) goto LAB_00106820;\n              if (pcVar13 != (char *)0x0) {\n                if ((uVar17 == 0) && ((char *)0x1 < pcVar23)) {\n                  memset(pcVar13,0x20,(long)(int)uVar29 - 1U);\n                  pcVar13 = pcVar13 + ((long)(int)uVar29 - 1U);\n                }\n                param_1 = pcVar13 + 1;\n                *pcVar13 = (char)local_4c8;\n              }\n              lVar15 = lVar15 + (long)pcVar14;\n              pcVar13 = local_432 + (1 - (long)pcVar5);\n              pcVar7 = (char *)(param_2 - lVar15);\n            }\n            goto LAB_00107001;\n          }\n        }\n        else if ((char *)(long)(int)uVar17 < pcVar7) {\n          if ((char)local_4c8 == '\\0') {\n            if (param_1 != (char *)0x0) {\nLAB_00106fb3:\n              memset(param_1,0x30,(long)iVar22);\n              param_1 = param_1 + iVar22;\n            }\n          }\n          else {\n            uVar25 = 0;\n            if (-1 < (int)uVar29) {\n              uVar25 = uVar29;\n            }\n            pcVar13 = (char *)(long)(int)uVar25;\n            pcVar14 = (char *)0x1;\n            if (pcVar13 != (char *)0x0) {\n              pcVar14 = pcVar13;\n            }\n            if (pcVar7 <= pcVar14) goto LAB_00106820;\n            lVar15 = lVar15 + (long)pcVar14;\n            if (param_1 != (char *)0x0) {\n              pcVar14 = param_1;\n              if ((uVar17 == 0) && ((char *)0x1 < pcVar13)) {\n                sVar12 = (long)(int)uVar29 - 1;\n                pcVar14 = param_1 + sVar12;\n                if (iVar30 == 0x30) {\n                  memset(param_1,0x30,sVar12);\n                }\n                else {\n                  memset(param_1,0x20,sVar12);\n                }\n              }\n              param_1 = pcVar14 + 1;\n              *pcVar14 = (char)local_4c8;\n              goto LAB_00106fb3;\n            }\n          }\n          lVar15 = lVar15 + iVar22;\n          pcVar23 = (char *)0x0;\n          uVar29 = 0;\n          pcVar13 = local_432 + (1 - (long)pcVar5);\n          pcVar7 = (char *)(param_2 - lVar15);\nLAB_00107001:\n          pcVar14 = pcVar23;\n          if (pcVar23 <= pcVar13) {\n            pcVar14 = pcVar13;\n          }\n          if (pcVar14 < pcVar7) {\n            if (param_1 != (char *)0x0) {\n              pcVar7 = param_1;\n              if ((uVar17 == 0) && (pcVar13 < pcVar23)) {\n                sVar12 = (long)(int)uVar29 - (long)pcVar13;\n                pcVar7 = param_1 + sVar12;\n                if (iVar30 == 0x30) {\n                  memset(param_1,0x30,sVar12);\n                }\n                else {\n                  memset(param_1,0x20,sVar12);\n                }\n              }\n              if (cVar27 == '\\0') {\n                memcpy(pcVar7,pcVar5,(size_t)pcVar13);\n              }\n              else {\n                memcpy_uppcase();\n              }\n              param_1 = pcVar7 + (long)pcVar13;\n            }\n            goto LAB_00106c02;\n          }\n        }\n        goto LAB_00106820;\n      }\n      if ((bool)(char)local_4c8 != false) {\nLAB_00106e27:\n        uVar25 = -uVar25;\n        goto LAB_00106e29;\n      }\nLAB_00106d75:\n      cVar31 = '\\0';\nLAB_00106d85:\n      local_44b = (char)uVar26;\n      pcVar5 = local_44a;\n      uVar26 = uVar21;\nLAB_00106adc:\n      local_44d = 0x2520;\n      *pcVar5 = cVar20;\n      pcVar5[1] = '\\0';\n      sVar12 = strftime(&local_448,0x400,(char *)&local_44d,param_4);\n      if (sVar12 != 0) {\n        pcVar5 = (char *)(sVar12 - 1);\n        uVar25 = 0;\n        if (-1 < (int)uVar29) {\n          uVar25 = uVar29;\n        }\n        pcVar7 = (char *)(long)(int)uVar25;\n        pcVar14 = pcVar7;\n        if (pcVar7 <= pcVar5) {\n          pcVar14 = pcVar5;\n        }\n        if ((char *)(param_2 - lVar15) <= pcVar14) goto LAB_00106820;\n        if (param_1 != (char *)0x0) {\n          pcVar13 = param_1;\n          if ((uVar26 == 0) && (pcVar5 < pcVar7)) {\n            sVar12 = (long)(int)uVar29 - (long)pcVar5;\n            pcVar13 = param_1 + sVar12;\n            if (iVar30 == 0x30) {\n              memset(param_1,0x30,sVar12);\n            }\n            else {\n              memset(param_1,0x20,sVar12);\n            }\n          }\n          if (cVar31 == '\\0') {\n            if (cVar27 == '\\0') {\n              memcpy(pcVar13,local_447,(size_t)pcVar5);\n            }\n            else {\n              memcpy_uppcase();\n            }\n          }\n          else {\n            memcpy_lowcase();\n          }\n          param_1 = pcVar13 + (long)pcVar5;\n        }\nLAB_00106c02:\n        lVar15 = lVar15 + (long)pcVar14;\n      }\n      goto LAB_001067f4;\n    case 0x7a:\n      uVar32 = 0;\n      pcVar5 = param_3;\nLAB_001078cd:\n      param_3 = pcVar5;\n      if (param_4->tm_isdst < 0) goto LAB_001067f4;\n      local_4c8._0_1_ = true;\n      iVar22 = (int)param_4->tm_gmtoff;\n      if ((-1 < iVar22) && (local_4c8._0_1_ = false, iVar22 == 0)) {\n        local_4c8._0_1_ = *__s == '-';\n      }\n      uVar25 = iVar22 / 0xe10;\n      uVar10 = (iVar22 / 0x3c) % 0x3c;\n      if (uVar32 == 2) {\nLAB_00107f19:\n        bVar3 = true;\n        uVar21 = 9;\n        iVar18 = uVar10 * 100;\n        uVar10 = 0x14;\n        uVar25 = uVar25 * 10000 + iVar18 + iVar22 % 0x3c;\n      }\n      else if (uVar32 < 3) {\n        if (uVar32 == 0) {\n          bVar3 = true;\n          uVar21 = 5;\n          uVar25 = uVar25 * 100 + uVar10;\n          uVar10 = 0;\n        }\n        else {\nLAB_00107964:\n          bVar3 = true;\n          uVar21 = 6;\n          uVar25 = uVar25 * 100 + uVar10;\n          uVar10 = 4;\n        }\n      }\n      else {\n        if (uVar32 != 3) {\n          cVar16 = *param_3;\n          goto LAB_001076a2;\n        }\n        if (iVar22 % 0x3c != 0) goto LAB_00107f19;\n        if (uVar10 != 0) goto LAB_00107964;\n        bVar3 = true;\n        uVar21 = 3;\n      }\n      goto LAB_00106d60;\n    case 0x7b:\n                    /* WARNING: Bad instruction - Truncating control flow here */\n      halt_baddata();\n    }\nswitchD_001068ff_caseD_1:\n    pcVar5 = param_3;\n    do {\n      pcVar5 = pcVar5 + -1;\n    } while (*pcVar5 != '%');\n    __n_00 = (ulong)(((int)param_3 + 1) - (int)pcVar5);\n    uVar11 = param_2 - lVar15;\n    uVar25 = 0;\n    if (-1 < (int)uVar29) {\n      uVar25 = uVar29;\n    }\n    uVar6 = (ulong)(int)uVar25;\n    uVar32 = __n_00;\n    if (__n_00 <= uVar6) {\n      uVar32 = uVar6;\n    }\nLAB_00106968:\n    if (uVar11 <= uVar32) {\nLAB_00106820:\n      lVar15 = 0;\n      goto LAB_00106823;\n    }\n    if (param_1 != (char *)0x0) {\n      pcVar14 = param_1;\n      if (__n_00 < uVar6) {\n        sVar12 = (long)(int)uVar29 - __n_00;\n        pcVar14 = param_1 + sVar12;\n        if (iVar30 == 0x30) {\n          memset(param_1,0x30,sVar12);\n        }\n        else {\n          memset(param_1,0x20,sVar12);\n        }\n      }\n      if (cVar27 == '\\0') {\n        memcpy(pcVar14,pcVar5,__n_00);\n      }\n      else {\n        memcpy_uppcase();\n      }\n      param_1 = pcVar14 + __n_00;\n    }\n    lVar15 = lVar15 + uVar32;\nLAB_001067f4:\n    cVar27 = param_3[1];\n    param_3 = param_3 + 1;\n  } while( true );\n}\n\n", 
    "0010ada0": "\nvoid xdectoimax(undefined8 param_1,undefined8 param_2,undefined8 param_3,undefined8 param_4,\n               undefined8 param_5,undefined8 param_6)\n\n{\n  xnumtoimax(param_1,10,param_2,param_3,param_4,param_5,param_6);\n  return;\n}\n\n", 
    "00104680": "\n/* WARNING: Could not reconcile some variable overlaps */\n\nvoid init_header(char *param_1,int param_2)\n\n{\n  ulong uVar1;\n  int iVar2;\n  int iVar3;\n  int iVar4;\n  long lVar5;\n  undefined8 uVar6;\n  undefined8 uVar7;\n  long in_FS_OFFSET;\n  undefined local_138 [16];\n  undefined local_128 [64];\n  stat local_e8;\n  undefined local_58 [24];\n  long local_40;\n  \n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  if ((*param_1 == '-') && (param_1[1] == '\\0')) {\n    param_2 = -1;\n  }\n  else if ((-1 < param_2) && (iVar4 = fstat(param_2,&local_e8), iVar4 == 0)) {\n    local_138 = get_stat_mtime_isra_0(local_e8.st_mtim.tv_sec,local_e8.st_mtim.tv_nsec);\n    goto LAB_001046dd;\n  }\n  if (timespec_7364._0_8_ == 0) {\n    gettime(timespec_7364);\n  }\n  local_138 = CONCAT88(timespec_7364._8_8_,timespec_7364._0_8_);\nLAB_001046dd:\n  local_138._8_8_ = SUB168(local_138 >> 0x40,0);\n  uVar1 = local_138._8_8_;\n  lVar5 = localtime_rz(localtz,local_138,local_128);\n  if (lVar5 == 0) {\n    uVar6 = xmalloc(0x21);\n    uVar7 = timetostr(local_138._0_8_,local_58);\n    __sprintf_chk(uVar6,1,0x21,\"%s.%09d\",uVar7,uVar1 & 0xffffffff);\n  }\n  else {\n    lVar5 = nstrftime(0,0xffffffffffffffff,date_format,local_128,localtz,uVar1 & 0xffffffff);\n    uVar6 = xmalloc(lVar5 + 1);\n    nstrftime(uVar6,lVar5 + 1,date_format,local_128,localtz,uVar1 & 0xffffffff);\n  }\n  free(date_text);\n  iVar4 = chars_per_line;\n  file_text = custom_header;\n  if ((custom_header == (char *)0x0) && (file_text = \"\", -1 < param_2)) {\n    file_text = param_1;\n  }\n  date_text = (void *)uVar6;\n  iVar2 = gnu_mbswidth(uVar6,0);\n  iVar3 = gnu_mbswidth(file_text,0);\n  header_width_available = (iVar4 - iVar2) - iVar3;\n  if (local_40 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return;\n}\n\n", 
    "001151c0": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nchar * setlocale(int __category,char *__locale)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* setlocale@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "0010292f": "\nvoid set_custom_quoting_cold(void)\n\n{\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n", 
    "001150a0": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nsize_t __ctype_get_mb_cur_max(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __ctype_get_mb_cur_max@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00102020": "\nvoid FUN_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)PTR_00113d98)();\n  return;\n}\n\n", 
    "0010292a": "\nvoid quotearg_n_options_cold(void)\n\n{\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n", 
    "0010b6d0": "\nbool bkm_scale(ulong *param_1,int param_2)\n\n{\n  ulong uVar1;\n  bool bVar2;\n  \n  uVar1 = SUB168(ZEXT816((ulong)(long)param_2) * ZEXT816(*param_1),0);\n  bVar2 = SUB168(ZEXT816((ulong)(long)param_2) * ZEXT816(*param_1) >> 0x40,0) != 0;\n  if (bVar2) {\n    uVar1 = 0xffffffffffffffff;\n  }\n  *param_1 = uVar1;\n  return bVar2;\n}\n\n", 
    "001028c0": "\nvoid __fprintf_chk(void)\n\n{\n  (*(code *)PTR___fprintf_chk_00113fa8)();\n  return;\n}\n\n", 
    "00115238": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint iswprint(wint_t __wc)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* iswprint@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "001027a0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint ungetc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_ungetc_00113f18)();\n  return iVar1;\n}\n\n", 
    "00115118": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint memcmp(void *__s1,void *__s2,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memcmp@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00102939": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid xstrtol_error_cold(void)\n\n{\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n", 
    "00109cf0": "\nvoid set_quoting_style(undefined1 *param_1,undefined4 param_2)\n\n{\n  if ((undefined4 *)param_1 == (undefined4 *)0x0) {\n    param_1 = default_quoting_options;\n  }\n  *(undefined4 *)param_1 = param_2;\n  return;\n}\n\n", 
    "00103e70": "\nvoid print_white_space(void)\n\n{\n  int iVar1;\n  int iVar2;\n  int iVar3;\n  int iVar4;\n  \n  iVar1 = spaces_not_printed + output_position;\n  iVar4 = output_position;\n  if ((1 < spaces_not_printed) &&\n     (iVar2 = chars_per_output_tab - output_position % chars_per_output_tab,\n     iVar3 = output_position + iVar2, iVar2 <= spaces_not_printed)) {\n    do {\n      putchar_unlocked((int)output_tab_char);\n      iVar4 = iVar3;\n      if (iVar1 - iVar3 < 2) break;\n      iVar3 = (chars_per_output_tab - iVar3 % chars_per_output_tab) + iVar3;\n    } while (iVar3 <= iVar1);\n  }\n  iVar4 = iVar4 + 1;\n  if (iVar4 <= iVar1) {\n    do {\n      iVar4 = iVar4 + 1;\n      putchar_unlocked(0x20);\n    } while (iVar4 != iVar1 + 1);\n  }\n  output_position = iVar1;\n  spaces_not_printed = 0;\n  return;\n}\n\n", 
    "0010c270": "\ntm * localtime_rz(long param_1,time_t *param_2,tm *param_3)\n\n{\n  char cVar1;\n  long lVar2;\n  tm *ptVar3;\n  \n  if (param_1 == 0) {\n    ptVar3 = gmtime_r(param_2,param_3);\n    return ptVar3;\n  }\n  lVar2 = set_tz();\n  if (lVar2 != 0) {\n    ptVar3 = localtime_r(param_2,param_3);\n    if ((ptVar3 != (tm *)0x0) && (cVar1 = save_abbr(param_1,param_3), cVar1 != '\\0')) {\n      cVar1 = revert_tz(lVar2);\n      if (cVar1 == '\\0') {\n        return (tm *)0x0;\n      }\n      return param_3;\n    }\n    revert_tz(lVar2);\n  }\n  return (tm *)0x0;\n}\n\n", 
    "00115240": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\n__int32_t ** __ctype_tolower_loc(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __ctype_tolower_loc@@GLIBC_2.3 */\n  halt_baddata();\n}\n\n", 
    "00115120": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint fputs_unlocked(char *__s,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fputs_unlocked@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00115000": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\n__int32_t ** __ctype_toupper_loc(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __ctype_toupper_loc@@GLIBC_2.3 */\n  halt_baddata();\n}\n\n", 
    "00102810": "\nvoid __printf_chk(void)\n\n{\n  (*(code *)PTR___printf_chk_00113f50)();\n  return;\n}\n\n", 
    "00102934": "\nvoid version_etc_arn_cold(void)\n\n{\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n", 
    "001082e0": "\nundefined8 strcaseeq6(long param_1,undefined8 param_2,byte param_3,char param_4,char param_5)\n\n{\n  char cVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  \n  cVar1 = c_isupper((int)(char)param_3);\n  bVar2 = *(byte *)(param_1 + 6);\n  if (cVar1 != '\\0') {\n    bVar2 = bVar2 & 0xdf;\n  }\n  if (param_3 != bVar2) {\n    return 0;\n  }\n  if (param_3 == 0) {\n    return 1;\n  }\n  uVar3 = strcaseeq7(param_1,param_2,(int)param_4,(int)param_5);\n  return uVar3;\n}\n\n", 
    "001151c8": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid __printf_chk(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __printf_chk@@GLIBC_2.3.4 */\n  halt_baddata();\n}\n\n", 
    "001150a8": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nsize_t strlen(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strlen@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00106410": "\nint mbsnwidth(byte *param_1,long param_2,uint param_3)\n\n{\n  byte *pbVar1;\n  byte bVar2;\n  int iVar3;\n  size_t sVar4;\n  long lVar5;\n  ushort **ppuVar6;\n  long lVar7;\n  int iVar8;\n  long in_FS_OFFSET;\n  wchar_t local_4c;\n  mbstate_t local_48;\n  long local_40;\n  \n  pbVar1 = param_1 + param_2;\n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  sVar4 = __ctype_get_mb_cur_max();\n  if (sVar4 < 2) {\n    iVar8 = 0;\n    if (param_1 < pbVar1) {\n      ppuVar6 = __ctype_b_loc();\n      iVar8 = 0;\n      do {\n        bVar2 = *param_1;\n        param_1 = param_1 + 1;\n        if (((*ppuVar6)[bVar2] & 0x4000) == 0) {\n          if ((param_3 & 2) != 0) goto LAB_001065f0;\n          if (((*ppuVar6)[bVar2] & 2) == 0) goto LAB_001065c9;\n        }\n        else {\nLAB_001065c9:\n          if (iVar8 == 0x7fffffff) break;\n          iVar8 = iVar8 + 1;\n        }\n      } while (pbVar1 != param_1);\n    }\n  }\n  else {\n    iVar8 = 0;\n    if (param_1 < pbVar1) {\n      do {\n        bVar2 = *param_1;\n        if ((char)bVar2 < '`') {\n          if ('@' < (char)bVar2) goto LAB_00106543;\n          if ('#' < (char)bVar2) {\n            if (0x1a < (byte)(bVar2 - 0x25)) goto LAB_0010648c;\n            goto LAB_00106543;\n          }\n          if ('\\x1f' < (char)bVar2) goto LAB_00106543;\nLAB_0010648c:\n          local_48 = (mbstate_t)0x0;\n          do {\n            lVar5 = rpl_mbrtowc(&local_4c,param_1,(long)pbVar1 - (long)param_1,&local_48);\n            if (lVar5 == -1) {\n              if ((param_3 & 1) != 0) goto LAB_001065f0;\n              goto LAB_00106543;\n            }\n            if (lVar5 == -2) {\n              if ((param_3 & 1) != 0) goto LAB_001065f0;\n              iVar8 = iVar8 + 1;\n              param_1 = pbVar1;\n              break;\n            }\n            lVar7 = 1;\n            if (lVar5 != 0) {\n              lVar7 = lVar5;\n            }\n            iVar3 = wcwidth(local_4c);\n            if (iVar3 < 0) {\n              if ((param_3 & 2) != 0) goto LAB_001065f0;\n              iVar3 = iswcntrl(local_4c);\n              if (iVar3 == 0) {\n                if (iVar8 == 0x7fffffff) goto LAB_00106618;\n                iVar8 = iVar8 + 1;\n              }\n            }\n            else {\n              if (0x7fffffff - iVar8 < iVar3) {\nLAB_00106618:\n                iVar8 = 0x7fffffff;\n                goto LAB_00106558;\n              }\n              iVar8 = iVar8 + iVar3;\n            }\n            param_1 = param_1 + lVar7;\n            iVar3 = mbsinit(&local_48);\n          } while (iVar3 == 0);\n        }\n        else {\n          if (0x1d < (byte)(bVar2 + 0x9f)) goto LAB_0010648c;\nLAB_00106543:\n          param_1 = param_1 + 1;\n          iVar8 = iVar8 + 1;\n        }\n      } while (param_1 < pbVar1);\n    }\n  }\nLAB_00106558:\n  if (local_40 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return iVar8;\nLAB_001065f0:\n  iVar8 = -1;\n  goto LAB_00106558;\n}\n\n", 
    "0010ab90": "\nvoid xzalloc(size_t param_1)\n\n{\n  void *__s;\n  \n  __s = (void *)xmalloc();\n  memset(__s,0,param_1);\n  return;\n}\n\n", 
    "00115208": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid __cxa_atexit(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __cxa_atexit@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00103380": "\nvoid init_funcs(void)\n\n{\n  char cVar1;\n  int iVar2;\n  int iVar3;\n  char cVar4;\n  long lVar5;\n  byte bVar6;\n  byte bVar7;\n  int iVar8;\n  long lVar9;\n  int iVar10;\n  int iVar11;\n  byte bVar12;\n  int iVar13;\n  \n  lVar9 = column_vector;\n  cVar4 = truncate_lines;\n  iVar3 = chars_per_column;\n  bVar12 = numbered_lines;\n  iVar2 = col_sep_length;\n  cVar1 = storing_columns;\n  iVar13 = columns;\n  iVar11 = 0;\n  if (((truncate_lines != '\\0') &&\n      (iVar11 = chars_per_column + chars_per_margin, parallel_files != 0)) && (numbered_lines != 0))\n  {\n    iVar11 = iVar11 + number_width;\n  }\n  iVar10 = chars_per_margin + col_sep_length;\n  if (columns < 2) {\n    iVar13 = 1;\n  }\n  else {\n    iVar8 = 1;\n    bVar6 = parallel_files ^ 1;\n    lVar5 = column_vector;\n    do {\n      while( true ) {\n        if (cVar1 == '\\0') {\n          *(code **)(lVar5 + 0x20) = print_char;\n          *(code **)(lVar5 + 0x18) = read_line;\n        }\n        else {\n          *(code **)(lVar5 + 0x20) = store_char;\n          *(code **)(lVar5 + 0x18) = print_stored;\n        }\n        bVar7 = 0;\n        if (bVar12 != 0) {\n          bVar7 = iVar8 == 1 | bVar6;\n        }\n        *(byte *)(lVar5 + 0x38) = bVar7;\n        *(int *)(lVar5 + 0x34) = iVar10;\n        if (cVar4 == '\\0') break;\n        iVar10 = iVar2 + iVar11;\n        iVar8 = iVar8 + 1;\n        lVar5 = lVar5 + 0x40;\n        iVar11 = iVar3 + iVar10;\n        if (iVar8 == iVar13) goto LAB_00103480;\n      }\n      iVar8 = iVar8 + 1;\n      iVar11 = 0;\n      iVar10 = 0;\n      lVar5 = lVar5 + 0x40;\n    } while (iVar8 != iVar13);\nLAB_00103480:\n    lVar9 = lVar9 + ((ulong)(iVar13 - 2) + 1) * 0x40;\n  }\n  if ((cVar1 == '\\0') || (balance_columns == '\\0')) {\n    *(code **)(lVar9 + 0x20) = print_char;\n    *(code **)(lVar9 + 0x18) = read_line;\n  }\n  else {\n    *(code **)(lVar9 + 0x20) = store_char;\n    *(code **)(lVar9 + 0x18) = print_stored;\n  }\n  if (bVar12 != 0) {\n    bVar12 = parallel_files ^ 1 | iVar13 == 1;\n  }\n  *(byte *)(lVar9 + 0x38) = bVar12;\n  *(int *)(lVar9 + 0x34) = iVar10;\n  return;\n}\n\n", 
    "0010aa70": "\nvoid xcharalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n", 
    "001027d0": "\nvoid __freading(void)\n\n{\n  (*(code *)PTR___freading_00113f30)();\n  return;\n}\n\n", 
    "001026b0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint posix_fadvise(int __fd,__off_t __offset,__off_t __len,int __advise)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_posix_fadvise_00113ea0)();\n  return iVar1;\n}\n\n", 
    "00115210": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid exit(int __status)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* exit@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "001028f0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\n__int32_t ** __ctype_tolower_loc(void)\n\n{\n  __int32_t **pp_Var1;\n  \n  pp_Var1 = (__int32_t **)(*(code *)PTR___ctype_tolower_loc_00113fc0)();\n  return pp_Var1;\n}\n\n", 
    "001041b0": "\nint char_to_clump(byte param_1)\n\n{\n  byte *pbVar1;\n  uint uVar2;\n  int iVar3;\n  ushort **ppuVar4;\n  int iVar5;\n  byte *pbVar6;\n  int iVar8;\n  long in_FS_OFFSET;\n  byte local_24;\n  byte local_23;\n  byte local_22;\n  long local_20;\n  byte *pbVar7;\n  \n  pbVar1 = clump_buff;\n  local_20 = *(long *)(in_FS_OFFSET + 0x28);\n  if (input_tab_char == param_1) {\n    iVar3 = chars_per_input_tab - input_position % chars_per_input_tab;\n    if (untabify_input != '\\0') {\n      if (iVar3 == 0) {\n        iVar8 = 0;\n        goto LAB_0010428c;\n      }\n      goto LAB_00104266;\n    }\nLAB_001042ce:\n    *clump_buff = param_1;\n    iVar8 = 1;\njoined_r0x001042d9:\n    if (iVar3 < 0) {\n      if (input_position == 0) {\nLAB_00104320:\n        input_position = 0;\n        iVar8 = 0;\n        goto LAB_0010428c;\n      }\n      iVar5 = -iVar3;\n      goto LAB_001042e3;\n    }\n  }\n  else {\n    if (param_1 == 9) {\n      uVar2 = (uint)(input_position >> 0x1f) >> 0x1d;\n      iVar3 = (uVar2 - (input_position + uVar2 & 7)) + 8;\n      if (untabify_input == '\\0') goto LAB_001042ce;\nLAB_00104266:\n      pbVar1 = clump_buff + (ulong)(iVar3 - 1) + 1;\n      pbVar7 = clump_buff;\n      do {\n        pbVar6 = pbVar7 + 1;\n        *pbVar7 = 0x20;\n        pbVar7 = pbVar6;\n        iVar8 = iVar3;\n      } while (pbVar1 != pbVar6);\n      goto joined_r0x001042d9;\n    }\n    ppuVar4 = __ctype_b_loc();\n    if ((*(byte *)((long)*ppuVar4 + (ulong)param_1 * 2 + 1) & 0x40) != 0) {\n      *pbVar1 = param_1;\n      iVar8 = 1;\n      input_position = input_position + 1;\n      goto LAB_0010428c;\n    }\n    if (use_esc_sequence != '\\0') {\nLAB_00104338:\n      *pbVar1 = 0x5c;\n      __sprintf_chk(&local_24,1,4,&DAT_0010d08b,param_1);\n      iVar8 = 4;\n      pbVar1[1] = local_24;\n      pbVar1[2] = local_23;\n      pbVar1[3] = local_22;\n      input_position = input_position + 4;\n      goto LAB_0010428c;\n    }\n    if (use_cntrl_prefix != '\\0') {\n      if (-1 < (char)param_1) {\n        *pbVar1 = 0x5e;\n        iVar8 = 2;\n        pbVar1[1] = param_1 ^ 0x40;\n        input_position = input_position + 2;\n        goto LAB_0010428c;\n      }\n      goto LAB_00104338;\n    }\n    if (param_1 != 8) {\n      *pbVar1 = param_1;\n      iVar8 = 1;\n      goto LAB_0010428c;\n    }\n    *pbVar1 = 8;\n    if (input_position == 0) goto LAB_00104320;\n    iVar5 = 1;\n    iVar8 = 1;\n    iVar3 = -1;\nLAB_001042e3:\n    if (input_position <= iVar5) {\n      input_position = 0;\n      goto LAB_0010428c;\n    }\n  }\n  input_position = input_position + iVar3;\nLAB_0010428c:\n  if (local_20 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return iVar8;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "001066f0": "\nlong memcpy_uppcase(long param_1,long param_2,long param_3)\n\n{\n  __int32_t **pp_Var1;\n  \n  if (param_3 != 0) {\n    param_3 = param_3 + -1;\n    pp_Var1 = __ctype_toupper_loc();\n    do {\n      *(char *)(param_1 + param_3) = (char)(*pp_Var1)[*(byte *)(param_2 + param_3)];\n      param_3 = param_3 + -1;\n    } while (param_3 != -1);\n  }\n  return param_1;\n}\n\n", 
    "0010c120": "\nvoid tzfree(long *param_1)\n\n{\n  long *plVar1;\n  \n  if (param_1 == (long *)0x1) {\n    return;\n  }\n  if (param_1 != (long *)0x0) {\n    do {\n      plVar1 = (long *)*param_1;\n      free(param_1);\n      param_1 = plVar1;\n    } while (plVar1 != (long *)0x0);\n  }\n  return;\n}\n\n", 
    "0010c480": "\nulong c_iscntrl(uint param_1)\n\n{\n  ulong in_RAX;\n  \n  if ((int)param_1 < 0x20) {\n    return (ulong)(~param_1 >> 0x1f);\n  }\n  return in_RAX & 0xffffffffffffff00 | (ulong)(param_1 == 0x7f);\n}\n\n", 
    "001081f0": "\nundefined8 strcaseeq8(long param_1,undefined8 param_2,byte param_3)\n\n{\n  char cVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  \n  cVar1 = c_isupper((int)(char)param_3);\n  bVar2 = *(byte *)(param_1 + 8);\n  if (cVar1 != '\\0') {\n    bVar2 = bVar2 & 0xdf;\n  }\n  if (param_3 != bVar2) {\n    return 0;\n  }\n  if (param_3 == 0) {\n    return 1;\n  }\n  uVar3 = strcaseeq9(param_1,param_2);\n  return uVar3;\n}\n\n", 
    "00102840": "\nvoid error(void)\n\n{\n  (*(code *)PTR_error_00113f68)();\n  return;\n}\n\n", 
    "00102720": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = (void *)(*(code *)PTR_memcpy_00113ed8)();\n  return pvVar1;\n}\n\n", 
    "00102600": "\nvoid __stack_chk_fail(void)\n\n{\n  (*(code *)PTR___stack_chk_fail_00113e48)();\n  return;\n}\n\n", 
    "00103250": "\n/* WARNING: Removing unreachable block (ram,0x00103263) */\n/* WARNING: Removing unreachable block (ram,0x0010326f) */\n\nvoid deregister_tm_clones(void)\n\n{\n  return;\n}\n\n", 
    "0010aa80": "\nvoid * xrealloc(void *param_1,size_t param_2)\n\n{\n  void *pvVar1;\n  \n  if ((param_2 == 0) && (param_1 != (void *)0x0)) {\n    free(param_1);\n    return (void *)0x0;\n  }\n  pvVar1 = realloc(param_1,param_2);\n  if ((pvVar1 == (void *)0x0) && (param_2 != 0)) {\n                    /* WARNING: Subroutine does not return */\n    xalloc_die();\n  }\n  return pvVar1;\n}\n\n", 
    "001151a0": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\ntime_t mktime(tm *__tp)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* mktime@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00115218": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fwrite@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "001028e0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint iswprint(wint_t __wc)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_iswprint_00113fb8)();\n  return iVar1;\n}\n\n", 
    "001027c0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\ntime_t mktime(tm *__tp)\n\n{\n  time_t tVar1;\n  \n  tVar1 = (*(code *)PTR_mktime_00113f28)();\n  return tVar1;\n}\n\n", 
    "001026a0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_close_00113e98)();\n  return iVar1;\n}\n\n", 
    "00115100": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint close(int __fd)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* close@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "001043e0": "\nvoid print_char(char param_1,undefined8 param_2)\n\n{\n  byte bVar1;\n  ushort **ppuVar2;\n  long *extraout_RDX;\n  int __c;\n  int __c_00;\n  \n  if (tabify_output != '\\0') {\n    if (param_1 == ' ') {\n      spaces_not_printed = spaces_not_printed + 1;\n      return;\n    }\n    if (0 < spaces_not_printed) {\n      print_white_space();\n    }\n    ppuVar2 = __ctype_b_loc();\n    __c = (int)param_1;\n    __c_00 = __c;\n    bVar1 = to_uchar(__c,param_2,ppuVar2);\n    if ((*(byte *)(*extraout_RDX + 1 + (ulong)bVar1 * 2) & 0x40) == 0) {\n      if (param_1 != '\\b') goto LAB_00104437;\n      output_position = output_position + -1;\n      __c_00 = 8;\n    }\n    else {\n      output_position = output_position + 1;\n    }\n    putchar_unlocked(__c_00);\n    return;\n  }\n  __c = (int)param_1;\nLAB_00104437:\n  putchar_unlocked(__c);\n  return;\n}\n\n", 
    "00109cd0": "\nundefined4 get_quoting_style(undefined1 *param_1)\n\n{\n  if ((undefined4 *)param_1 == (undefined4 *)0x0) {\n    param_1 = default_quoting_options;\n  }\n  return *(undefined4 *)param_1;\n}\n\n", 
    "00115220": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid __fprintf_chk(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __fprintf_chk@@GLIBC_2.3.4 */\n  halt_baddata();\n}\n\n", 
    "001080c0": "\nvoid set_program_name(char *param_1)\n\n{\n  char *pcVar1;\n  long lVar2;\n  ulong uVar3;\n  byte *pbVar4;\n  uint *puVar5;\n  bool bVar6;\n  bool bVar7;\n  byte bVar8;\n  \n  bVar8 = 0;\n  if (param_1 == (char *)0x0) {\n    fwrite(&UINT_0010ea00,1,0x37,stderr);\n                    /* WARNING: Subroutine does not return */\n    abort();\n  }\n  pcVar1 = strrchr(param_1,0x2f);\n  if (pcVar1 != (char *)0x0) {\n    program_name = pcVar1 + 1;\n    uVar3 = (long)program_name - (long)param_1;\n    bVar6 = uVar3 < 6;\n    bVar7 = uVar3 == 6;\n    if (6 < (long)uVar3) {\n      lVar2 = 7;\n      pbVar4 = (byte *)(pcVar1 + -6);\n      puVar5 = &UINT_0010ea38;\n      do {\n        if (lVar2 == 0) break;\n        lVar2 = lVar2 + -1;\n        bVar6 = *pbVar4 < *(byte *)puVar5;\n        bVar7 = *pbVar4 == *(byte *)puVar5;\n        pbVar4 = pbVar4 + (ulong)bVar8 * -2 + 1;\n        puVar5 = (uint *)((long)puVar5 + (ulong)bVar8 * -2 + 1);\n      } while (bVar7);\n      if ((!bVar6 && !bVar7) == bVar6) {\n        if (((pcVar1[1] != 'l') || (pcVar1[2] != 't')) || (pcVar1[3] != '-')) {\n          program_invocation_name = program_name;\n          return;\n        }\n        param_1 = pcVar1 + 4;\n        program_invocation_short_name = param_1;\n      }\n    }\n  }\n  program_name = param_1;\n  program_invocation_name = param_1;\n  return;\n}\n\n", 
    "0010a990": "\nvoid emit_bug_reporting_address(void)\n\n{\n  FILE *__stream;\n  undefined8 uVar1;\n  char *__s;\n  \n  uVar1 = dcgettext(0,\"\\nReport bugs to: %s\\n\",5);\n  __printf_chk(1,uVar1,\"bug-coreutils@gnu.org\");\n  uVar1 = dcgettext(0,\"%s home page: <%s>\\n\",5);\n  __printf_chk(1,uVar1,\"GNU coreutils\",\"https://www.gnu.org/software/coreutils/\");\n  __stream = stdout;\n  __s = (char *)dcgettext(0,\"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\",5);\n  fputs_unlocked(__s,__stream);\n  return;\n}\n\n", 
    "00102830": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nsize_t strftime(char *__s,size_t __maxsize,char *__format,tm *__tp)\n\n{\n  size_t sVar1;\n  \n  sVar1 = (*(code *)PTR_strftime_00113f60)();\n  return sVar1;\n}\n\n", 
    "00102710": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = (*(code *)PTR_strtol_00113ed0)();\n  return lVar1;\n}\n\n", 
    "001151a8": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid __freading(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __freading@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00103320": "\nint cols_ready_to_print(void)\n\n{\n  long lVar1;\n  int iVar2;\n  \n  iVar2 = columns;\n  if (columns != 0) {\n    iVar2 = 0;\n    lVar1 = column_vector;\n    do {\n      if ((*(uint *)(lVar1 + 0x10) < 2) ||\n         (((storing_columns != '\\0' && (0 < *(int *)(lVar1 + 0x2c))) && (0 < *(int *)(lVar1 + 0x30))\n          ))) {\n        iVar2 = iVar2 + 1;\n      }\n      lVar1 = lVar1 + 0x40;\n    } while (lVar1 != ((ulong)(columns - 1) + 1) * 0x40 + column_vector);\n  }\n  return iVar2;\n}\n\n", 
    "00102590": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint setenv(char *__name,char *__value,int __replace)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_setenv_00113e10)();\n  return iVar1;\n}\n\n", 
    "00104890": "\nundefined8 init_fps(int param_1,undefined8 *param_2)\n\n{\n  undefined8 *puVar1;\n  FILE *pFVar2;\n  char cVar3;\n  int iVar4;\n  FILE **ppFVar5;\n  FILE *pFVar6;\n  FILE **ppFVar7;\n  uint uVar8;\n  \n  total_files = 0;\n  free(column_vector);\n  ppFVar5 = (FILE **)xnmalloc((long)columns,0x40);\n  column_vector = ppFVar5;\n  if (parallel_files == '\\0') {\n    if (param_1 < 1) {\n      pFVar6 = (FILE *)dcgettext(0,\"standard input\",5);\n      *(undefined *)((long)ppFVar5 + 0x39) = 0;\n      ppFVar5[1] = pFVar6;\n      pFVar6 = stdin;\n      *(undefined4 *)(ppFVar5 + 2) = 0;\n      *ppFVar5 = pFVar6;\n      total_files = total_files + 1;\n      have_read_stdin = 1;\n      init_header(&DAT_0010d018,0xffffffff);\n      *(undefined4 *)((long)ppFVar5 + 0x2c) = 0;\n    }\n    else {\n      cVar3 = open_file(*param_2,ppFVar5);\n      if (cVar3 == '\\0') {\n        return 0;\n      }\n      iVar4 = fileno(*ppFVar5);\n      init_header(*param_2,iVar4);\n      *(undefined4 *)((long)ppFVar5 + 0x2c) = 0;\n    }\n    pFVar6 = ppFVar5[1];\n    pFVar2 = *ppFVar5;\n    if (columns != 1) {\n      uVar8 = columns - 2;\n      ppFVar5 = ppFVar5 + 8;\n      do {\n        ppFVar5[1] = pFVar6;\n        ppFVar7 = ppFVar5 + 8;\n        *ppFVar5 = pFVar2;\n        *(undefined4 *)(ppFVar5 + 2) = 0;\n        *(undefined *)((long)ppFVar5 + 0x39) = 0;\n        *(undefined4 *)((long)ppFVar5 + 0x2c) = 0;\n        ppFVar5 = ppFVar7;\n      } while (ppFVar7 != ppFVar5 + ((ulong)uVar8 + 2) * 8);\n    }\n  }\n  else {\n    if (param_1 != 0) {\n      puVar1 = param_2 + (ulong)(param_1 - 1) + 1;\n      do {\n        while (cVar3 = open_file(*param_2,ppFVar5), cVar3 != '\\0') {\n          param_2 = param_2 + 1;\n          ppFVar5 = ppFVar5 + 8;\n          if (puVar1 == param_2) goto LAB_00104914;\n        }\n        param_2 = param_2 + 1;\n        columns = columns + -1;\n      } while (puVar1 != param_2);\n    }\nLAB_00104914:\n    if (columns == 0) {\n      return 0;\n    }\n    init_header(&DAT_0010d018,0xffffffff);\n  }\n  files_ready_to_read = total_files;\n  return 1;\n}\n\n", 
    "00109e30": "\nundefined8\nquotearg_alloc_mem(undefined8 param_1,undefined8 param_2,long *param_3,undefined1 *param_4)\n\n{\n  int iVar1;\n  int *piVar2;\n  long lVar3;\n  undefined8 uVar4;\n  uint uVar5;\n  \n  if ((undefined4 *)param_4 == (undefined4 *)0x0) {\n    param_4 = default_quoting_options;\n  }\n  piVar2 = __errno_location();\n  iVar1 = *piVar2;\n  uVar5 = (uint)(param_3 == (long *)0x0) | *(uint *)((long)param_4 + 4);\n  lVar3 = quotearg_buffer_restyled\n                    (0,0,param_1,param_2,*(undefined4 *)param_4,uVar5,\n                     (undefined4 *)((long)param_4 + 8),*(undefined8 *)((long)param_4 + 0x28),\n                     *(undefined8 *)((long)param_4 + 0x30));\n  uVar4 = xcharalloc(lVar3 + 1);\n  quotearg_buffer_restyled\n            (uVar4,lVar3 + 1,param_1,param_2,*(undefined4 *)param_4,uVar5,\n             (undefined4 *)((long)param_4 + 8),*(undefined8 *)((long)param_4 + 0x28),\n             *(undefined8 *)((long)param_4 + 0x30));\n  *piVar2 = iVar1;\n  if (param_3 != (long *)0x0) {\n    *param_3 = lVar3;\n  }\n  return uVar4;\n}\n\n", 
    "00109d10": "\nuint set_char_quoting(undefined1 *param_1,byte param_2,uint param_3)\n\n{\n  uint uVar1;\n  uint uVar2;\n  \n  if (param_1 == (undefined1 *)0x0) {\n    param_1 = default_quoting_options;\n  }\n  uVar1 = *(uint *)(param_1 + (ulong)(param_2 >> 5) * 4 + 8);\n  uVar2 = uVar1 >> (param_2 & 0x1f);\n  *(uint *)(param_1 + (ulong)(param_2 >> 5) * 4 + 8) =\n       ((param_3 ^ uVar2) & 1) << (param_2 & 0x1f) ^ uVar1;\n  return uVar2 & 1;\n}\n\n", 
    "0010a0f0": "\nvoid quotearg_style(undefined4 param_1,undefined8 param_2)\n\n{\n  quotearg_n_style(0,param_1,param_2);\n  return;\n}\n\n", 
    "001055a0": "\nvoid init_page(void)\n\n{\n  uint uVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  long lVar4;\n  long lVar5;\n  long lVar6;\n  long lVar7;\n  \n  uVar3 = lines_per_body;\n  if (storing_columns == '\\0') {\n    if (columns != 0) {\n      lVar6 = ((ulong)(columns - 1) + 1) * 0x40 + column_vector;\n      lVar7 = column_vector;\n      do {\n        uVar2 = 0;\n        if (*(int *)(lVar7 + 0x10) == 0) {\n          uVar2 = uVar3;\n        }\n        lVar4 = lVar7 + 0x40;\n        *(undefined4 *)(lVar7 + 0x30) = uVar2;\n        lVar7 = lVar4;\n      } while (lVar4 != lVar6);\n      return;\n    }\n    return;\n  }\n  store_columns();\n  lVar7 = column_vector;\n  if (columns != 1) {\n    uVar1 = columns - 2;\n    lVar4 = ((ulong)uVar1 + 1) * 0x40 + column_vector;\n    lVar6 = column_vector;\n    do {\n      lVar5 = lVar6 + 0x40;\n      *(undefined4 *)(lVar6 + 0x30) = *(undefined4 *)(lVar6 + 0x2c);\n      lVar6 = lVar5;\n    } while (lVar5 != lVar4);\n    lVar7 = lVar7 + ((ulong)uVar1 + 1) * 0x40;\n  }\n  if (balance_columns == '\\0') {\n    if (*(int *)(lVar7 + 0x10) == 0) {\n      *(undefined4 *)(lVar7 + 0x30) = lines_per_body;\n    }\n    else {\n      *(undefined4 *)(lVar7 + 0x30) = 0;\n    }\n    return;\n  }\n  *(undefined4 *)(lVar7 + 0x30) = *(undefined4 *)(lVar7 + 0x2c);\n  return;\n}\n\n", 
    "00103c00": "\nvoid parse_column_count(undefined8 param_1)\n\n{\n  undefined8 uVar1;\n  \n  uVar1 = dcgettext(0,\"invalid number of columns\",5);\n  getoptnum(param_1,1,&columns,uVar1);\n  explicit_columns = 1;\n  return;\n}\n\n", 
    "00104e10": "\nvoid read_rest_of_line(FILE **param_1)\n\n{\n  FILE *__stream;\n  int iVar1;\n  \n  __stream = *param_1;\n  while( true ) {\n    iVar1 = getc_unlocked(__stream);\n    if (iVar1 == 10) {\n      return;\n    }\n    if (iVar1 == 0xc) break;\n    if (iVar1 == -1) {\n      close_file(param_1);\n      return;\n    }\n  }\n  iVar1 = getc_unlocked(__stream);\n  if (iVar1 != 10) {\n    ungetc(iVar1,__stream);\n  }\n  if (keep_FF != '\\0') {\n    print_a_FF = 1;\n  }\n  hold_file_isra_0(param_1 + 2,param_1 + 6);\n  return;\n}\n\n", 
    "00103f60": "\nulong print_sep_string(void)\n\n{\n  int iVar1;\n  char cVar2;\n  uint uVar3;\n  uint uVar4;\n  ulong uVar5;\n  int iVar6;\n  int iVar7;\n  int iVar8;\n  char *pcVar9;\n  char *pcVar10;\n  char *pcVar11;\n  uint uVar12;\n  \n  uVar5 = (ulong)spaces_not_printed;\n  pcVar11 = col_sep_string;\n  uVar3 = col_sep_length;\n  if (0 < (int)separators_not_printed) {\n    do {\n      uVar4 = (uint)uVar5;\n      uVar12 = uVar3 - 1;\n      pcVar9 = pcVar11;\n      if (0 < (int)uVar3) {\n        do {\n          while( true ) {\n            cVar2 = *pcVar9;\n            pcVar10 = pcVar9 + 1;\n            if (cVar2 != ' ') break;\n            spaces_not_printed = (int)uVar5 + 1;\n            uVar5 = (ulong)spaces_not_printed;\n            pcVar9 = pcVar10;\n            if (pcVar10 == pcVar11 + (ulong)uVar12 + 1) goto LAB_00103fe7;\n          }\n          if (0 < (int)uVar5) {\n            print_white_space();\n            cVar2 = *pcVar9;\n          }\n          putchar_unlocked((int)cVar2);\n          output_position = output_position + 1;\n          uVar5 = (ulong)spaces_not_printed;\n          pcVar9 = pcVar10;\n        } while (pcVar10 != pcVar11 + (ulong)uVar12 + 1);\nLAB_00103fe7:\n        pcVar11 = pcVar11 + (ulong)uVar12 + 1;\n        uVar12 = 0xffffffff;\n        uVar4 = spaces_not_printed;\n      }\n      if (0 < (int)uVar4) {\n        print_white_space();\n      }\n      separators_not_printed = separators_not_printed - 1;\n      if ((int)separators_not_printed < 1) {\n        return (ulong)separators_not_printed;\n      }\n      uVar5 = (ulong)spaces_not_printed;\n      uVar3 = uVar12;\n    } while( true );\n  }\n  if ((int)spaces_not_printed < 1) {\n    return uVar5;\n  }\n  iVar1 = spaces_not_printed + output_position;\n  iVar8 = output_position;\n  if (1 < (int)spaces_not_printed) {\n    uVar5 = (long)output_position / (long)chars_per_output_tab & 0xffffffff;\n    iVar6 = chars_per_output_tab - output_position % chars_per_output_tab;\n    iVar7 = output_position + iVar6;\n    if (iVar6 <= (int)spaces_not_printed) {\n      do {\n        putchar_unlocked((int)output_tab_char);\n        uVar5 = (ulong)(uint)(iVar1 - iVar7);\n        iVar8 = iVar7;\n        if (iVar1 - iVar7 < 2) break;\n        uVar5 = (long)iVar7 / (long)chars_per_output_tab & 0xffffffff;\n        iVar7 = (chars_per_output_tab - iVar7 % chars_per_output_tab) + iVar7;\n      } while (iVar7 <= iVar1);\n    }\n  }\n  iVar8 = iVar8 + 1;\n  if (iVar8 <= iVar1) {\n    do {\n      iVar8 = iVar8 + 1;\n      uVar3 = putchar_unlocked(0x20);\n      uVar5 = (ulong)uVar3;\n    } while (iVar8 != iVar1 + 1);\n  }\n  output_position = iVar1;\n  spaces_not_printed = 0;\n  return uVar5;\n}\n\n", 
    "0010a8e0": "\nvoid version_etc(void)\n\n{\n  long lVar1;\n  long in_FS_OFFSET;\n  \n  lVar1 = *(long *)(in_FS_OFFSET + 0x28);\n  version_etc_va();\n  if (lVar1 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "0010b250": "\nuint xstrtol(char *param_1,char **param_2,uint param_3,long *param_4,char *param_5)\n\n{\n  char cVar1;\n  char cVar2;\n  uint uVar3;\n  int *piVar4;\n  long lVar5;\n  char *pcVar6;\n  char *pcVar7;\n  undefined8 uVar8;\n  uint uVar9;\n  int iVar10;\n  long in_FS_OFFSET;\n  char *local_50;\n  long local_48;\n  long local_40;\n  \n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  if (0x24 < param_3) {\n                    /* WARNING: Subroutine does not return */\n    __assert_fail(\"0 <= strtol_base && strtol_base <= 36\",\"lib/xstrtol.c\",0x60,\"xstrtol\");\n  }\n  if (param_2 == (char **)0x0) {\n    param_2 = &local_50;\n  }\n  piVar4 = __errno_location();\n  *piVar4 = 0;\n  lVar5 = strtol(param_1,param_2,param_3);\n  pcVar7 = *param_2;\n  local_48 = lVar5;\n  if (pcVar7 == param_1) {\n    if (param_5 == (char *)0x0) {\n      uVar9 = 4;\n      goto LAB_0010b2df;\n    }\n    cVar1 = *pcVar7;\n    uVar9 = 4;\n    if (cVar1 == '\\0') goto LAB_0010b2df;\n    iVar10 = (int)cVar1;\n    pcVar6 = strchr(param_5,iVar10);\n    if (pcVar6 == (char *)0x0) goto LAB_0010b2df;\n    local_48 = 1;\n    uVar9 = 0;\nLAB_0010b362:\n    pcVar6 = strchr(param_5,iVar10);\n    if (pcVar6 == (char *)0x0) {\nswitchD_0010b3c3_caseD_43:\n      uVar9 = uVar9 | 2;\n      *param_4 = local_48;\n      goto LAB_0010b2df;\n    }\n    switch(cVar1) {\n    case 'E':\n    case 'G':\n    case 'K':\n    case 'M':\n    case 'P':\n    case 'T':\n    case 'Y':\n    case 'Z':\n    case 'g':\n    case 'k':\n    case 'm':\n    case 't':\n      pcVar6 = strchr(param_5,0x30);\n      if (pcVar6 == (char *)0x0) goto switchD_0010b39a_caseD_46;\n      cVar2 = pcVar7[1];\n      if (cVar2 == 'D') {\n        iVar10 = 2;\n        uVar8 = 1000;\n      }\n      else if (cVar2 == 'i') {\n        uVar8 = 0x400;\n        iVar10 = (pcVar7[2] == 'B') + 1 + (uint)(pcVar7[2] == 'B');\n      }\n      else {\n        iVar10 = (cVar2 == 'B') + 1;\n        uVar8 = 1000;\n        if (cVar2 != 'B') {\n          uVar8 = 0x400;\n        }\n      }\n      break;\n    default:\nswitchD_0010b39a_caseD_46:\n      iVar10 = 1;\n      uVar8 = 0x400;\n    }\n    switch(cVar1) {\n    case 'B':\n      uVar3 = bkm_scale(&local_48,0x400);\n      pcVar7 = *param_2;\n      uVar9 = uVar9 | uVar3;\n      break;\n    default:\n      goto switchD_0010b3c3_caseD_43;\n    case 'E':\n      uVar3 = bkm_scale_by_power(&local_48,uVar8,6);\n      pcVar7 = *param_2;\n      uVar9 = uVar9 | uVar3;\n      break;\n    case 'G':\n    case 'g':\n      uVar3 = bkm_scale_by_power(&local_48,uVar8,3);\n      pcVar7 = *param_2;\n      uVar9 = uVar9 | uVar3;\n      break;\n    case 'K':\n    case 'k':\n      uVar3 = bkm_scale_by_power(&local_48,uVar8,1);\n      pcVar7 = *param_2;\n      uVar9 = uVar9 | uVar3;\n      break;\n    case 'M':\n    case 'm':\n      uVar3 = bkm_scale_by_power(&local_48,uVar8,2);\n      pcVar7 = *param_2;\n      uVar9 = uVar9 | uVar3;\n      break;\n    case 'P':\n      uVar3 = bkm_scale_by_power(&local_48,uVar8,5);\n      pcVar7 = *param_2;\n      uVar9 = uVar9 | uVar3;\n      break;\n    case 'T':\n    case 't':\n      uVar3 = bkm_scale_by_power(&local_48,uVar8,4);\n      pcVar7 = *param_2;\n      uVar9 = uVar9 | uVar3;\n      break;\n    case 'Y':\n      uVar3 = bkm_scale_by_power(&local_48,uVar8,8);\n      pcVar7 = *param_2;\n      uVar9 = uVar9 | uVar3;\n      break;\n    case 'Z':\n      uVar3 = bkm_scale_by_power(&local_48,uVar8,7);\n      pcVar7 = *param_2;\n      uVar9 = uVar9 | uVar3;\n      break;\n    case 'b':\n      uVar3 = bkm_scale(&local_48,0x200);\n      pcVar7 = *param_2;\n      uVar9 = uVar9 | uVar3;\n      break;\n    case 'c':\n      break;\n    case 'w':\n      uVar3 = bkm_scale(&local_48,2);\n      pcVar7 = *param_2;\n      uVar9 = uVar9 | uVar3;\n    }\n    lVar5 = local_48;\n    *param_2 = pcVar7 + iVar10;\n    if (pcVar7[iVar10] != '\\0') {\n      uVar9 = uVar9 | 2;\n    }\n  }\n  else {\n    if (*piVar4 == 0) {\n      uVar9 = 0;\n    }\n    else {\n      uVar9 = 4;\n      if (*piVar4 != 0x22) goto LAB_0010b2df;\n      uVar9 = 1;\n    }\n    if ((param_5 != (char *)0x0) && (cVar1 = *pcVar7, cVar1 != '\\0')) {\n      iVar10 = (int)cVar1;\n      goto LAB_0010b362;\n    }\n  }\n  *param_4 = lVar5;\nLAB_0010b2df:\n  if (local_40 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return uVar9;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "0010bac0": "\nint rpl_fclose(FILE *param_1)\n\n{\n  int iVar1;\n  int iVar2;\n  int *piVar3;\n  __off_t _Var4;\n  \n  iVar1 = fileno(param_1);\n  if (-1 < iVar1) {\n    iVar1 = __freading();\n    if (iVar1 != 0) {\n      iVar1 = fileno(param_1);\n      _Var4 = lseek(iVar1,0,1);\n      if (_Var4 == -1) goto LAB_0010bb2f;\n    }\n    iVar1 = rpl_fflush(param_1);\n    if (iVar1 != 0) {\n      piVar3 = __errno_location();\n      iVar1 = *piVar3;\n      iVar2 = fclose(param_1);\n      if (iVar1 != 0) {\n        *piVar3 = iVar1;\n        iVar2 = -1;\n      }\n      return iVar2;\n    }\n  }\nLAB_0010bb2f:\n  iVar1 = fclose(param_1);\n  return iVar1;\n}\n\n", 
    "0010c460": "\nuint c_isblank(int param_1,undefined8 param_2,uint param_3)\n\n{\n  uint in_EAX;\n  \n  return in_EAX & 0xffffff00 | (uint)(param_1 == 0x20) | param_3 & 0xffffff00 | (uint)(param_1 == 9)\n  ;\n}\n\n", 
    "00102900": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nushort ** __ctype_b_loc(void)\n\n{\n  ushort **ppuVar1;\n  \n  ppuVar1 = (ushort **)(*(code *)PTR___ctype_b_loc_00113fc8)();\n  return ppuVar1;\n}\n\n", 
    "0010aaf0": "\nvoid x2nrealloc(long param_1,ulong *param_2,ulong param_3)\n\n{\n  undefined auVar1 [16];\n  ulong uVar2;\n  ulong uVar3;\n  \n  uVar3 = *param_2;\n  if (param_1 == 0) {\n    if (uVar3 == 0) {\n      uVar3 = (ulong)(0x80 < param_3) +\n              SUB168((ZEXT816(0) << 0x40 | ZEXT816(0x80)) / ZEXT816(param_3),0);\n    }\n    uVar2 = (ulong)(SUB168(ZEXT816(uVar3) * ZEXT816(param_3) >> 0x40,0) != 0);\n    if ((SUB168(ZEXT816(uVar3) * ZEXT816(param_3),0) < 0) || (uVar2 != 0)) goto LAB_0010ab4b;\n  }\n  else {\n    auVar1 = ZEXT816(0) << 0x40 | ZEXT816(0x5555555555555554);\n    uVar2 = SUB168(auVar1 % ZEXT816(param_3),0);\n    if (SUB168(auVar1 / ZEXT816(param_3),0) <= uVar3) {\nLAB_0010ab4b:\n                    /* WARNING: Subroutine does not return */\n      xalloc_die(param_1,uVar3,uVar2);\n    }\n    uVar3 = (uVar3 >> 1) + 1 + uVar3;\n  }\n  *param_2 = uVar3;\n  xrealloc(param_1,uVar3 * param_3);\n  return;\n}\n\n", 
    "00104640": "\nvoid emit_mandatory_arg_note(void)\n\n{\n  char *__s;\n  FILE *__stream;\n  \n  __stream = stdout;\n  __s = (char *)dcgettext(0,\n                          \"\\nMandatory arguments to long options are mandatory for short options too.\\n\"\n                          ,5);\n  fputs_unlocked(__s,__stream);\n  return;\n}\n\n", 
    "00104eb0": "\nvoid add_line_number_isra_0(code **param_1)\n\n{\n  uint uVar1;\n  int iVar2;\n  char *pcVar3;\n  char *pcVar4;\n  char *pcVar5;\n  \n  iVar2 = __sprintf_chk(number_buff,1,0xffffffffffffffff,&DAT_0010d098,chars_per_number,line_number)\n  ;\n  line_number = line_number + 1;\n  uVar1 = chars_per_number - 1;\n  pcVar3 = (char *)((iVar2 - chars_per_number) + number_buff);\n  pcVar5 = pcVar3;\n  if (0 < chars_per_number) {\n    do {\n      pcVar4 = pcVar5 + 1;\n      (**param_1)((int)*pcVar5);\n      pcVar5 = pcVar4;\n    } while (pcVar4 != pcVar3 + (ulong)uVar1 + 1);\n  }\n  if (columns < 2) {\n    (**param_1)();\n    if (number_separator == '\\t') {\n      output_position =\n           (chars_per_output_tab - output_position % chars_per_output_tab) + output_position;\n    }\n  }\n  else if (number_separator == '\\t') {\n    iVar2 = (number_width - chars_per_number) + -1;\n    if (0 < number_width - chars_per_number) {\n      do {\n        (**param_1)(0x20);\n        if (iVar2 == 0) break;\n        iVar2 = iVar2 + -2;\n        (**param_1)(0x20);\n      } while (iVar2 != -1);\n    }\n  }\n  else {\n    (**param_1)();\n  }\n  if ((truncate_lines != '\\0') && (parallel_files == '\\0')) {\n    input_position = input_position + number_width;\n  }\n  return;\n}\n\n", 
    "00103310": "\nundefined4 to_uchar(undefined4 param_1)\n\n{\n  return param_1;\n}\n\n", 
    "00104fd0": "\nvoid align_column(long param_1)\n\n{\n  char cVar1;\n  \n  padding_not_printed = *(int *)(param_1 + 0x34);\n  if (col_sep_length < padding_not_printed) {\n    pad_across_to(padding_not_printed - col_sep_length);\n    padding_not_printed = 0;\n    if (use_col_separator != '\\0') goto LAB_0010501a;\n  }\n  else if (use_col_separator != '\\0') {\nLAB_0010501a:\n    print_sep_string();\n    cVar1 = *(char *)(param_1 + 0x38);\n    goto joined_r0x00105023;\n  }\n  cVar1 = *(char *)(param_1 + 0x38);\njoined_r0x00105023:\n  if (cVar1 == '\\0') {\n    return;\n  }\n  add_line_number_isra_0(param_1 + 0x20);\n  return;\n}\n\n", 
    "0010a850": "\nvoid version_etc_va(void)\n\n{\n  uint uVar1;\n  long *plVar2;\n  long lVar3;\n  uint *in_R8;\n  long lVar4;\n  long in_FS_OFFSET;\n  long local_68 [11];\n  long local_10;\n  \n  lVar4 = 0;\n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  do {\n    uVar1 = *in_R8;\n    if (uVar1 < 0x30) {\n      *in_R8 = uVar1 + 8;\n      lVar3 = *(long *)((ulong)uVar1 + *(long *)(in_R8 + 4));\n      local_68[lVar4] = lVar3;\n    }\n    else {\n      plVar2 = *(long **)(in_R8 + 2);\n      *(long **)(in_R8 + 2) = plVar2 + 1;\n      lVar3 = *plVar2;\n      local_68[lVar4] = lVar3;\n    }\n  } while ((lVar3 != 0) && (lVar4 = lVar4 + 1, lVar4 != 10));\n  version_etc_arn();\n  if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "00102580": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint clock_gettime(clockid_t __clock_id,timespec *__tp)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_clock_gettime_00113e08)();\n  return iVar1;\n}\n\n", 
    "00103670": "\nvoid integer_overflow(void)\n\n{\n  undefined8 uVar1;\n  \n  uVar1 = dcgettext(0,\"integer overflow\",5);\n                    /* WARNING: Subroutine does not return */\n  error(1,0,uVar1);\n}\n\n", 
    "0010b700": "\nuint bkm_scale_by_power(undefined8 param_1,uint param_2,int param_3)\n\n{\n  uint uVar1;\n  uint uVar2;\n  ulong uVar3;\n  \n  uVar3 = (ulong)param_2;\n  param_3 = param_3 + -1;\n  uVar2 = 0;\n  do {\n    uVar1 = bkm_scale(param_1,uVar3 & 0xffffffff);\n    param_3 = param_3 + -1;\n    uVar2 = uVar2 | uVar1;\n  } while (param_3 != -1);\n  return uVar2;\n}\n\n", 
    "0010bb50": "\n/* WARNING: Restarted to delay deadcode elimination for space: stack */\n\nint rpl_fcntl(ulong param_1,int param_2,ulong param_3)\n\n{\n  long lVar1;\n  int iVar2;\n  uint uVar3;\n  int iVar4;\n  int *piVar5;\n  int __fd;\n  long in_FS_OFFSET;\n  \n  lVar1 = *(long *)(in_FS_OFFSET + 0x28);\n  if (param_2 != 0x406) {\n    iVar2 = fcntl((int)param_1,param_2,param_3);\n    goto LAB_0010bbd4;\n  }\n  if (have_dupfd_cloexec_3397 < 0) {\n    iVar2 = rpl_fcntl(param_1,0,param_3 & 0xffffffff);\n    if ((iVar2 < 0) || (__fd = iVar2, have_dupfd_cloexec_3397 != -1)) goto LAB_0010bbd4;\nLAB_0010bc11:\n    uVar3 = fcntl(__fd,1);\n    if (-1 < (int)uVar3) {\n      iVar4 = fcntl(__fd,2,(ulong)(uVar3 | 1));\n      iVar2 = __fd;\n      if (iVar4 != -1) goto LAB_0010bbd4;\n    }\n    piVar5 = __errno_location();\n    iVar2 = -1;\n    iVar4 = *piVar5;\n    close(__fd);\n    *piVar5 = iVar4;\n  }\n  else {\n    iVar2 = fcntl((int)param_1,0x406);\n    if (iVar2 < 0) {\n      piVar5 = __errno_location();\n      if (*piVar5 == 0x16) {\n        iVar2 = rpl_fcntl(param_1 & 0xffffffff,0,param_3 & 0xffffffff);\n        if (iVar2 < 0) goto LAB_0010bbd4;\n        have_dupfd_cloexec_3397 = -1;\n        __fd = iVar2;\n        goto LAB_0010bc11;\n      }\n    }\n    have_dupfd_cloexec_3397 = 1;\n  }\nLAB_0010bbd4:\n  if (lVar1 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return iVar2;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "0010ab80": "\nvoid x2realloc(undefined8 param_1,undefined8 param_2)\n\n{\n  x2nrealloc(param_1,param_2,1);\n  return;\n}\n\n", 
    "00104080": "\nvoid print_header(void)\n\n{\n  long lVar1;\n  int iVar2;\n  undefined8 uVar3;\n  int iVar4;\n  long in_FS_OFFSET;\n  undefined auStack_138 [280];\n  long local_20;\n  \n  local_20 = *(long *)(in_FS_OFFSET + 0x28);\n  output_position = 0;\n  pad_across_to(chars_per_margin);\n  print_white_space();\n  lVar1 = page_number;\n  if (page_number == 0) {\n    uVar3 = dcgettext(0,\"page number overflow\",5);\n                    /* WARNING: Subroutine does not return */\n    error(1,0,uVar3);\n  }\n  uVar3 = dcgettext(0,\"Page %lu\",5);\n  __sprintf_chk(auStack_138,1,0x114,uVar3,lVar1);\n  iVar4 = header_width_available;\n  iVar2 = gnu_mbswidth(auStack_138,0);\n  iVar4 = iVar4 - iVar2;\n  if (iVar4 < 0) {\n    iVar4 = 0;\n  }\n  __printf_chk(1,\"\\n\\n%*s%s%*s%s%*s%s\\n\\n\\n\",chars_per_margin,&DAT_0010d018,date_text,iVar4 >> 1,\n               &DAT_0010d015,file_text,iVar4 - (iVar4 >> 1),&DAT_0010d015,auStack_138);\n  print_a_header = 0;\n  output_position = 0;\n  if (local_20 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "00115200": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint unsetenv(char *__name)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* unsetenv@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "0010a290": "\nvoid quotearg_n_custom_mem\n               (undefined4 param_1,undefined8 param_2,undefined8 param_3,undefined8 param_4,\n               undefined8 param_5)\n\n{\n  long in_FS_OFFSET;\n  undefined8 local_68;\n  undefined8 uStack_60;\n  undefined8 local_58;\n  undefined8 uStack_50;\n  undefined8 local_48;\n  undefined8 uStack_40;\n  undefined8 local_38;\n  long local_30;\n  \n  local_30 = *(long *)(in_FS_OFFSET + 0x28);\n  local_68 = default_quoting_options._0_8_;\n  uStack_60 = default_quoting_options._8_8_;\n  local_38 = default_quoting_options._48_8_;\n  local_58 = default_quoting_options._16_8_;\n  uStack_50 = default_quoting_options._24_8_;\n  local_48 = default_quoting_options._32_8_;\n  uStack_40 = default_quoting_options._40_8_;\n  set_custom_quoting(&local_68);\n  quotearg_n_options(param_1,param_4,param_5,&local_68);\n  if (local_30 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "001061e0": "\nvoid fadvise(FILE *param_1,int param_2)\n\n{\n  int __fd;\n  \n  if (param_1 != (FILE *)0x0) {\n    __fd = fileno(param_1);\n    fdadvise(__fd,0,0,param_2);\n    return;\n  }\n  return;\n}\n\n", 
    "0010c590": "\nint c_tolower(int param_1)\n\n{\n  if (param_1 - 0x41U < 0x1a) {\n    param_1 = param_1 + 0x20;\n  }\n  return param_1;\n}\n\n", 
    "00103220": "\nvoid _start(undefined8 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  undefined8 unaff_retaddr;\n  undefined auStack_8 [8];\n  \n  (*(code *)PTR___libc_start_main_00113fe0)\n            (main,unaff_retaddr,&stack0x00000008,__libc_csu_init,__libc_csu_fini,param_3,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n", 
    "00104670": "\nundefined  [16] get_stat_mtime_isra_0(undefined8 param_1,undefined8 param_2)\n\n{\n  return CONCAT88(param_2,param_1);\n}\n\n", 
    "00109f30": "\nvoid quotearg_free(void)\n\n{\n  void **ppvVar1;\n  void *__ptr;\n  undefined *__ptr_00;\n  void **ppvVar2;\n  \n  __ptr_00 = slotvec;\n  if (1 < nslots) {\n    ppvVar2 = (void **)(slotvec + 0x18);\n    ppvVar1 = (void **)(slotvec + (ulong)(nslots - 2) * 0x10 + 0x28);\n    do {\n      __ptr = *ppvVar2;\n      ppvVar2 = ppvVar2 + 2;\n      free(__ptr);\n    } while (ppvVar2 != ppvVar1);\n  }\n  if (*(undefined1 **)(__ptr_00 + 8) != slot0) {\n    free(*(undefined1 **)(__ptr_00 + 8));\n    slotvec0._8_8_ = slot0;\n    slotvec0._0_8_ = 0x100;\n  }\n  if (__ptr_00 != slotvec0) {\n    free(__ptr_00);\n    slotvec = slotvec0;\n  }\n  nslots = 1;\n  return;\n}\n\n", 
    "0010a1f0": "\nvoid quotearg_n_style_colon(undefined4 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  undefined8 *puVar1;\n  long in_FS_OFFSET;\n  undefined8 local_98;\n  undefined8 uStack_90;\n  undefined8 local_88;\n  undefined8 uStack_80;\n  undefined8 local_78;\n  undefined8 uStack_70;\n  undefined8 local_68;\n  undefined8 local_58;\n  undefined8 uStack_50;\n  undefined8 local_48;\n  undefined8 uStack_40;\n  undefined8 local_38;\n  undefined8 uStack_30;\n  undefined8 local_28;\n  long local_20;\n  \n  local_20 = *(long *)(in_FS_OFFSET + 0x28);\n  quoting_options_from_style(&local_98);\n  puVar1 = &local_58;\n  local_58 = local_98;\n  uStack_50 = uStack_90;\n  local_48 = local_88;\n  uStack_40 = uStack_80;\n  local_38 = local_78;\n  uStack_30 = uStack_70;\n  local_28 = local_68;\n  set_char_quoting(puVar1,0x3a,1);\n  quotearg_n_options(param_1,param_3,0xffffffffffffffff,puVar1);\n  if (local_20 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "00108590": "\nundefined8\nstrcaseeq2(long param_1,undefined8 param_2,byte param_3,char param_4,char param_5,char param_6,\n          char param_7)\n\n{\n  char cVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  \n  cVar1 = c_isupper((int)(char)param_3);\n  bVar2 = *(byte *)(param_1 + 2);\n  if (cVar1 != '\\0') {\n    bVar2 = bVar2 & 0xdf;\n  }\n  if (param_3 != bVar2) {\n    return 0;\n  }\n  if (param_3 == 0) {\n    return 1;\n  }\n  uVar3 = strcaseeq3(param_1,param_2,(int)param_4,(int)param_5,(int)param_6,(int)param_7);\n  return uVar3;\n}\n\n", 
    "001028b0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = (*(code *)PTR_fwrite_00113fa0)();\n  return sVar1;\n}\n\n", 
    "00103d40": "\nvoid close_file(FILE **param_1)\n\n{\n  int iVar1;\n  long lVar2;\n  undefined8 uVar3;\n  int *piVar4;\n  long lVar5;\n  \n  if (*(int *)(param_1 + 2) == 3) {\n    return;\n  }\n  iVar1 = ferror_unlocked(*param_1);\n  if (iVar1 == 0) {\n    iVar1 = fileno(*param_1);\n    if (iVar1 != 0) {\n      iVar1 = rpl_fclose(*param_1);\n      if (iVar1 != 0) {\n        uVar3 = quotearg_n_style_colon(0,3,param_1[1]);\n        piVar4 = __errno_location();\n                    /* WARNING: Subroutine does not return */\n        error(1,*piVar4,\"%s\",uVar3);\n      }\n    }\n    if (parallel_files == '\\0') {\n      if (columns != 0) {\n        lVar5 = ((ulong)(columns - 1) + 1) * 0x40 + column_vector;\n        lVar2 = column_vector;\n        do {\n          *(undefined4 *)(lVar2 + 0x10) = 3;\n          if (*(int *)(lVar2 + 0x2c) == 0) {\n            *(undefined4 *)(lVar2 + 0x30) = 0;\n          }\n          lVar2 = lVar2 + 0x40;\n        } while (lVar2 != lVar5);\n        files_ready_to_read = files_ready_to_read + -1;\n        return;\n      }\n    }\n    else {\n      *(undefined4 *)(param_1 + 2) = 3;\n      *(undefined4 *)(param_1 + 6) = 0;\n    }\n    files_ready_to_read = files_ready_to_read + -1;\n    return;\n  }\n  uVar3 = quotearg_n_style_colon(0,3,param_1[1]);\n  piVar4 = __errno_location();\n                    /* WARNING: Subroutine does not return */\n  error(1,*piVar4,\"%s\",uVar3);\n}\n\n", 
    "00102925": "\nvoid quotearg_buffer_restyled_cold(void)\n\n{\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n", 
    "001032c0": "\nvoid __do_global_dtors_aux(void)\n\n{\n  if (completed_8061 == '\\0') {\n    if (PTR___cxa_finalize_00113ff8 != (undefined *)0x0) {\n      __cxa_finalize(__dso_handle);\n    }\n    deregister_tm_clones();\n    completed_8061 = 1;\n    return;\n  }\n  return;\n}\n\n", 
    "00115098": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid dcgettext(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* dcgettext@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00102920": "\nvoid quoting_options_from_style_cold(void)\n\n{\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n", 
    "0010abf0": "\nvoid xmemdup(void *param_1,size_t param_2)\n\n{\n  void *__dest;\n  \n  __dest = (void *)xmalloc(param_2);\n  memcpy(__dest,param_1,param_2);\n  return;\n}\n\n", 
    "0010bce0": "\nvoid rpl_fflush(FILE *param_1)\n\n{\n  int iVar1;\n  \n  if (param_1 != (FILE *)0x0) {\n    iVar1 = __freading();\n    if (iVar1 != 0) {\n      clear_ungetc_buffer_preserving_position(param_1);\n      fflush(param_1);\n      return;\n    }\n  }\n  fflush(param_1);\n  return;\n}\n\n", 
    "0010c560": "\nulong c_isxdigit(int param_1)\n\n{\n  ulong uVar1;\n  \n  if (param_1 - 0x30U < 0x37) {\n    uVar1 = 1L << ((byte)(param_1 - 0x30U) & 0x3f);\n    return uVar1 & 0xffffffffffffff00 | (ulong)((uVar1 & 0x7e0000007e03ff) != 0);\n  }\n  return 0;\n}\n\n", 
    "00102800": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = (char *)(*(code *)PTR_setlocale_00113f48)();\n  return pcVar1;\n}\n\n", 
    "0010a380": "\nvoid quote_n_mem(void)\n\n{\n  quotearg_n_options();\n  return;\n}\n\n", 
    "00105a80": "\nvoid emit_ancillary_info_constprop_0(void)\n\n{\n  int iVar1;\n  char *pcVar2;\n  undefined8 uVar3;\n  undefined **ppuVar4;\n  undefined *puVar5;\n  long in_FS_OFFSET;\n  undefined *local_98;\n  char *local_90;\n  char *local_88;\n  char *local_80 [5];\n  char *local_58;\n  char *local_50;\n  char *local_48;\n  char *local_40;\n  undefined8 local_38;\n  undefined8 local_30;\n  long local_20;\n  \n  local_20 = *(long *)(in_FS_OFFSET + 0x28);\n  local_80[0] = \"Multi-call invocation\";\n  local_98 = &DAT_0010d09f;\n  local_90 = \"test invocation\";\n  local_80[1] = \"sha224sum\";\n  local_88 = \"coreutils\";\n  local_38 = 0;\n  local_30 = 0;\n  local_80[3] = \"sha256sum\";\n  local_80[2] = \"sha2 utilities\";\n  local_80[4] = \"sha2 utilities\";\n  local_58 = \"sha384sum\";\n  local_50 = \"sha2 utilities\";\n  local_48 = \"sha512sum\";\n  local_40 = \"sha2 utilities\";\n  pcVar2 = \"coreutils\";\n  ppuVar4 = &local_98;\n  while ((pcVar2 != (char *)0x0 && (((*pcVar2 != 'p' || (pcVar2[1] != 'r')) || (pcVar2[2] != '\\0')))\n         )) {\n    pcVar2 = *(char **)((long)ppuVar4 + 0x20);\n    ppuVar4 = (undefined **)((long)ppuVar4 + 0x10);\n  }\n  puVar5 = *(undefined **)((long)ppuVar4 + 0x18);\n  if (puVar5 == (undefined *)0x0) {\n    uVar3 = dcgettext(0,\"\\n%s online help: <%s>\\n\",5);\n    __printf_chk(1,uVar3,\"GNU coreutils\",\"https://www.gnu.org/software/coreutils/\");\n    pcVar2 = setlocale(5,(char *)0x0);\n    if (pcVar2 != (char *)0x0) {\n      iVar1 = strncmp(pcVar2,\"en_\",3);\n      if (iVar1 != 0) {\n        puVar5 = &DAT_0010d09c;\n        goto LAB_00105cbe;\n      }\n    }\n    uVar3 = dcgettext(0,\"Full documentation at: <%s%s>\\n\",5);\n    puVar5 = &DAT_0010d09c;\n    __printf_chk(1,uVar3,\"https://www.gnu.org/software/coreutils/\",&DAT_0010d09c);\n    pcVar2 = \" invocation\";\n  }\n  else {\n    uVar3 = dcgettext(0,\"\\n%s online help: <%s>\\n\",5);\n    __printf_chk(1,uVar3,\"GNU coreutils\",\"https://www.gnu.org/software/coreutils/\");\n    pcVar2 = setlocale(5,(char *)0x0);\n    if (pcVar2 != (char *)0x0) {\n      iVar1 = strncmp(pcVar2,\"en_\",3);\n      if (iVar1 != 0) {\nLAB_00105cbe:\n        uVar3 = dcgettext(0,\"Report %s translation bugs to <https://translationproject.org/team/>\\n\"\n                          ,5);\n        __printf_chk(1,uVar3,&DAT_0010d09c);\n      }\n    }\n    uVar3 = dcgettext(0,\"Full documentation at: <%s%s>\\n\",5);\n    __printf_chk(1,uVar3,\"https://www.gnu.org/software/coreutils/\",&DAT_0010d09c);\n    pcVar2 = \" invocation\";\n    if (puVar5 != &DAT_0010d09c) {\n      pcVar2 = \"\";\n    }\n  }\n  uVar3 = dcgettext(0,\"or available locally via: info \\'(coreutils) %s%s\\'\\n\",5);\n  if (local_20 == *(long *)(in_FS_OFFSET + 0x28)) {\n    __printf_chk(1,uVar3,puVar5,pcVar2);\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "0010a020": "\nvoid quotearg_n_style(undefined4 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  long in_FS_OFFSET;\n  undefined auStack_58 [56];\n  long local_20;\n  \n  local_20 = *(long *)(in_FS_OFFSET + 0x28);\n  quoting_options_from_style(auStack_58);\n  quotearg_n_options(param_1,param_3,0xffffffffffffffff,auStack_58);\n  if (local_20 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "00115090": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid bindtextdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* bindtextdomain@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00102000": "\nint _init(EVP_PKEY_CTX *ctx)\n\n{\n  undefined *puVar1;\n  \n  puVar1 = PTR___gmon_start___00113fe8;\n  if (PTR___gmon_start___00113fe8 != (undefined *)0x0) {\n    puVar1 = (undefined *)(*(code *)PTR___gmon_start___00113fe8)();\n  }\n  return (int)puVar1;\n}\n\n", 
    "0010a830": "\nvoid version_etc_ar(void)\n\n{\n  long lVar1;\n  long *in_R8;\n  long lVar2;\n  \n  lVar2 = 0;\n  lVar1 = *in_R8;\n  while (lVar1 != 0) {\n    lVar2 = lVar2 + 1;\n    lVar1 = in_R8[lVar2];\n  }\n  version_etc_arn();\n  return;\n}\n\n", 
    "00103ba0": "\nvoid separator_string(char *param_1)\n\n{\n  undefined4 uVar1;\n  size_t sVar2;\n  undefined4 *extraout_RDX;\n  \n  sVar2 = strlen(param_1);\n  if (sVar2 < 0x80000000) {\n    col_sep_string = param_1;\n    col_sep_length = (int)sVar2;\n    return;\n  }\n  integer_overflow();\n  uVar1 = xdectoimax();\n  *extraout_RDX = uVar1;\n  return;\n}\n\n", 
    "001028a0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid exit(int __status)\n\n{\n  (*(code *)PTR_exit_00113f98)();\n  return;\n}\n\n", 
    "0010b1d0": "\nundefined8 bkm_scale(long *param_1,int param_2)\n\n{\n  long lVar1;\n  long lVar2;\n  long lVar3;\n  \n  lVar3 = -0x8000000000000000;\n  lVar2 = (long)param_2;\n  lVar1 = *param_1;\n  if ((SUB168((SEXT816(-0x8000000000000000) & (undefined  [16])0xffffffffffffffff |\n              ZEXT816(0x8000000000000000)) / SEXT816(lVar2),0) <= lVar1) &&\n     (lVar3 = 0x7fffffffffffffff,\n     lVar1 <= SUB168((SEXT816(0x7fffffffffffffff) & (undefined  [16])0xffffffffffffffff |\n                     ZEXT816(0x7fffffffffffffff)) / SEXT816(lVar2),0))) {\n    *param_1 = lVar2 * lVar1;\n    return 0;\n  }\n  *param_1 = lVar3;\n  return 1;\n}\n\n", 
    "0010aa40": "\nvoid xnmalloc(ulong param_1,ulong param_2)\n\n{\n  if ((-1 < SUB168(ZEXT816(param_1) * ZEXT816(param_2),0)) &&\n     (SUB168(ZEXT816(param_1) * ZEXT816(param_2) >> 0x40,0) == 0)) {\n    xmalloc();\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  xalloc_die();\n}\n\n", 
    "0010ac80": "\nlong xnumtoimax(undefined8 param_1,undefined4 param_2,long param_3,long param_4,undefined8 param_5,\n               undefined8 param_6,int param_7)\n\n{\n  int iVar1;\n  int *piVar2;\n  undefined8 uVar3;\n  long in_FS_OFFSET;\n  long local_48;\n  long local_40;\n  \n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  iVar1 = xstrtoimax(param_1,0,param_2,&local_48);\n  if (iVar1 == 0) {\n    if ((param_3 <= local_48) && (local_48 <= param_4)) {\n      if (local_40 == *(long *)(in_FS_OFFSET + 0x28)) {\n        return local_48;\n      }\n                    /* WARNING: Subroutine does not return */\n      __stack_chk_fail();\n    }\n    piVar2 = __errno_location();\n    if (local_48 < 0x40000000) {\n      iVar1 = 0x22;\n      if (local_48 < -0x40000000) {\n        iVar1 = 0x4b;\n      }\n      *piVar2 = iVar1;\n      goto LAB_0010acf1;\n    }\n  }\n  else {\n    piVar2 = __errno_location();\n    if (iVar1 != 1) {\n      if (iVar1 == 3) {\n        *piVar2 = 0;\n      }\n      goto LAB_0010acf1;\n    }\n  }\n  *piVar2 = 0x4b;\nLAB_0010acf1:\n  uVar3 = quote(param_1);\n  iVar1 = *piVar2;\n  if (iVar1 == 0x16) {\n    iVar1 = 0;\n  }\n  if (param_7 == 0) {\n    param_7 = 1;\n  }\n                    /* WARNING: Subroutine does not return */\n  error(param_7,iVar1,\"%s: %s\",param_6,uVar3);\n}\n\n", 
    "00105070": "\nundefined8 read_line(FILE **param_1)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  int iVar3;\n  undefined8 uVar4;\n  FILE *__stream;\n  long lVar5;\n  long lVar6;\n  undefined4 unaff_R13D;\n  long lVar7;\n  \n  iVar1 = getc_unlocked(*param_1);\n  iVar3 = input_position;\n  if (iVar1 == 0xc) {\n    __stream = *param_1;\n    if (*(char *)((long)param_1 + 0x39) == '\\0') {\nLAB_00105286:\n      iVar3 = getc_unlocked(__stream);\n      if (iVar3 != 10) {\n        ungetc(iVar3,*param_1);\n      }\n      FF_only = 1;\n      if ((print_a_header == '\\0') || (FF_only = 1, storing_columns != '\\0')) {\nLAB_001052af:\n        if (keep_FF != '\\0') {\n          print_a_FF = 1;\n        }\n      }\n      else {\n        pad_vertically = 1;\n        print_header();\n      }\n      hold_file_isra_0(param_1 + 2,param_1 + 6);\n      return 1;\n    }\n    iVar1 = getc_unlocked(__stream);\n    if (iVar1 == 10) {\n      iVar1 = getc_unlocked(*param_1);\n      *(undefined *)((long)param_1 + 0x39) = 0;\n      if (iVar1 == 10) goto LAB_001050b6;\n    }\n    else {\n      *(undefined *)((long)param_1 + 0x39) = 0;\n    }\n    if (iVar1 == 0xc) {\n      __stream = *param_1;\n      goto LAB_00105286;\n    }\n  }\n  else {\n    *(undefined *)((long)param_1 + 0x39) = 0;\n    if (iVar1 == 10) goto LAB_001050b6;\n  }\n  if (iVar1 == -1) {\nLAB_00105180:\n    close_file(param_1);\n    return 1;\n  }\n  unaff_R13D = char_to_clump((int)(char)iVar1);\nLAB_001050b6:\n  if ((truncate_lines == '\\0') || (input_position <= chars_per_column)) {\n    if (param_1[4] != (FILE *)store_char) {\n      pad_vertically = 1;\n      if ((print_a_header != '\\0') && (storing_columns == '\\0')) {\n        print_header();\n      }\n      iVar3 = separators_not_printed;\n      if ((parallel_files != '\\0') && (align_empty_cols != '\\0')) {\n        separators_not_printed = 0;\n        if (0 < iVar3) {\n          lVar7 = ((ulong)(iVar3 - 1) + 1) * 0x40 + column_vector;\n          lVar5 = column_vector;\n          do {\n            lVar6 = lVar5 + 0x40;\n            align_column(lVar5);\n            separators_not_printed = separators_not_printed + 1;\n            lVar5 = lVar6;\n          } while (lVar6 != lVar7);\n        }\n        align_empty_cols = '\\0';\n        padding_not_printed = *(int *)((long)param_1 + 0x34);\n        spaces_not_printed = chars_per_column;\n        if (truncate_lines == '\\0') {\n          spaces_not_printed = 0;\n        }\n      }\n      if (col_sep_length < padding_not_printed) {\n        pad_across_to(padding_not_printed - col_sep_length);\n        padding_not_printed = 0;\n      }\n      if (use_col_separator != '\\0') {\n        print_sep_string();\n      }\n    }\n    if (*(char *)(param_1 + 7) != '\\0') {\n      add_line_number_isra_0(param_1 + 4);\n    }\n    empty_line = 0;\n    uVar4 = 1;\n    if (iVar1 != 10) {\n      print_clump_isra_0(param_1 + 4,unaff_R13D,clump_buff);\n      while (iVar1 = getc_unlocked(*param_1), iVar3 = input_position, iVar1 != 10) {\n        if (iVar1 == 0xc) {\n          iVar3 = getc_unlocked(*param_1);\n          if (iVar3 != 10) {\n            ungetc(iVar3,*param_1);\n          }\n          goto LAB_001052af;\n        }\n        if (iVar1 == -1) goto LAB_00105180;\n        uVar2 = char_to_clump((int)(char)iVar1);\n        if ((truncate_lines != '\\0') && (chars_per_column < input_position)) goto LAB_001051b2;\n        print_clump_isra_0(param_1 + 4,uVar2,clump_buff);\n      }\n      uVar4 = 1;\n    }\n  }\n  else {\nLAB_001051b2:\n    uVar4 = 0;\n    input_position = iVar3;\n  }\n  return uVar4;\n}\n\n", 
    "001066a0": "\nlong memcpy_lowcase(long param_1,long param_2,long param_3)\n\n{\n  __int32_t **pp_Var1;\n  \n  if (param_3 != 0) {\n    param_3 = param_3 + -1;\n    pp_Var1 = __ctype_tolower_loc();\n    do {\n      *(char *)(param_1 + param_3) = (char)(*pp_Var1)[*(byte *)(param_2 + param_3)];\n      param_3 = param_3 + -1;\n    } while (param_3 != -1);\n  }\n  return param_1;\n}\n\n", 
    "00103d30": "\nchar * timetostr(ulong param_1,long param_2)\n\n{\n  ulong uVar1;\n  char *pcVar2;\n  char *pcVar3;\n  \n  *(undefined *)(param_2 + 0x14) = 0;\n  pcVar2 = (char *)(param_2 + 0x14);\n  if ((long)param_1 < 0) {\n    do {\n      pcVar3 = pcVar2;\n      uVar1 = (long)param_1 / 10;\n      pcVar3[-1] = ((char)uVar1 * '\\n' + '0') - (char)param_1;\n      param_1 = uVar1;\n      pcVar2 = pcVar3 + -1;\n    } while (uVar1 != 0);\n    pcVar3[-2] = '-';\n    return pcVar3 + -2;\n  }\n  do {\n    pcVar2 = pcVar2 + -1;\n    uVar1 = param_1 / 10;\n    *pcVar2 = (char)param_1 + (char)uVar1 * -10 + '0';\n    param_1 = uVar1;\n  } while (uVar1 != 0);\n  return pcVar2;\n}\n\n", 
    "00109ff0": "\nvoid quotearg_n_mem(void)\n\n{\n  quotearg_n_options();\n  return;\n}\n\n", 
    "00109db0": "\nvoid quotearg_buffer(undefined8 param_1,undefined8 param_2,undefined8 param_3,undefined8 param_4,\n                    undefined1 *param_5)\n\n{\n  int iVar1;\n  int *piVar2;\n  \n  if ((undefined4 *)param_5 == (undefined4 *)0x0) {\n    param_5 = default_quoting_options;\n  }\n  piVar2 = __errno_location();\n  iVar1 = *piVar2;\n  quotearg_buffer_restyled\n            (param_1,param_2,param_3,param_4,*(undefined4 *)param_5,\n             *(undefined4 *)((long)param_5 + 4),(undefined4 *)((long)param_5 + 8),\n             *(undefined8 *)((long)param_5 + 0x28),*(undefined8 *)((long)param_5 + 0x30));\n  *piVar2 = iVar1;\n  return;\n}\n\n", 
    "0010c450": "\nbool c_isascii(uint param_1)\n\n{\n  return param_1 < 0x80;\n}\n\n", 
    "00102910": "\nvoid __sprintf_chk(void)\n\n{\n  (*(code *)PTR___sprintf_chk_00113fd0)();\n  return;\n}\n\n", 
    "0010a390": "\nvoid quote_mem(undefined8 param_1,undefined8 param_2)\n\n{\n  quote_n_mem(0,param_1,param_2);\n  return;\n}\n\n", 
    "0010c210": "\nundefined4 revert_tz(long param_1)\n\n{\n  undefined4 uVar1;\n  int *piVar2;\n  int iVar3;\n  \n  uVar1 = 1;\n  if (param_1 != 1) {\n    piVar2 = __errno_location();\n    iVar3 = *piVar2;\n    uVar1 = change_env(param_1);\n    if ((char)uVar1 == '\\0') {\n      iVar3 = *piVar2;\n    }\n    tzfree(param_1);\n    *piVar2 = iVar3;\n  }\n  return uVar1;\n}\n\n", 
    "00102670": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint gettimeofday(timeval *__tv,__timezone_ptr_t __tz)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_gettimeofday_00113e80)();\n  return iVar1;\n}\n\n", 
    "00102550": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint getc_unlocked(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_getc_unlocked_00113df0)();\n  return iVar1;\n}\n\n", 
    "00102790": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nchar * nl_langinfo(nl_item __item)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = (char *)(*(code *)PTR_nl_langinfo_00113f10)();\n  return pcVar1;\n}\n\n", 
    "00106110": "\nvoid close_stdout_set_ignore_EPIPE(undefined param_1)\n\n{\n  ignore_EPIPE = param_1;\n  return;\n}\n\n", 
    "0010a1d0": "\nvoid quotearg_colon(undefined8 param_1)\n\n{\n  quotearg_char(param_1,0x3a);\n  return;\n}\n\n", 
    "0010c4d0": "\nbool c_isprint(int param_1)\n\n{\n  return param_1 - 0x20U < 0x5f;\n}\n\n", 
    "001025f0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = (*(code *)PTR_strlen_00113e40)();\n  return sVar1;\n}\n\n", 
    "00115078": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint setenv(char *__name,char *__value,int __replace)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* setenv@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "001024d0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid free(void *__ptr)\n\n{\n  (*(code *)PTR_free_00113db0)();\n  return;\n}\n\n", 
    "00115198": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint __fxstat(int __ver,int __fildes,stat *__stat_buf)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __fxstat@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "0010c780": "\nint fstat(int __fd,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = __fxstat(1,__fd,__buf);\n  return iVar1;\n}\n\n", 
    "00115070": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint clock_gettime(clockid_t __clock_id,timespec *__tp)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* clock_gettime@@GLIBC_2.17 */\n  halt_baddata();\n}\n\n", 
    "0010a360": "\nvoid quotearg_custom_mem(undefined8 param_1,undefined8 param_2,undefined8 param_3,undefined8 param_4\n                        )\n\n{\n  quotearg_n_custom_mem(0,param_1,param_2,param_3,param_4);\n  return;\n}\n\n", 
    "00103a80": "\nsize_t first_last_page(undefined4 param_1,char param_2,char *param_3)\n\n{\n  char cVar1;\n  uint uVar2;\n  size_t sVar3;\n  undefined4 *extraout_RDX;\n  char *pcVar4;\n  long in_FS_OFFSET;\n  char *local_48;\n  ulong local_40;\n  ulong local_38;\n  long local_30;\n  \n  local_30 = *(long *)(in_FS_OFFSET + 0x28);\n  local_38 = 0xffffffffffffffff;\n  uVar2 = xstrtoumax(param_3,&local_48,10,&local_40,&DAT_0010d018);\n  if ((uVar2 & 0xfffffffd) != 0) {\nLAB_00103b86:\n    pcVar4 = (char *)(ulong)uVar2;\n    xstrtol_fatal(pcVar4,param_1,(int)param_2,long_options,param_3);\n    sVar3 = strlen(pcVar4);\n    if (sVar3 < 0x80000000) {\n      col_sep_string = pcVar4;\n      col_sep_length = (int)sVar3;\n      return sVar3;\n    }\n    integer_overflow();\n    sVar3 = xdectoimax();\n    *extraout_RDX = (int)sVar3;\n    return sVar3;\n  }\n  if ((local_48 != param_3) && (local_40 != 0)) {\n    cVar1 = *local_48;\n    if (cVar1 == ':') {\n      pcVar4 = local_48 + 1;\n      uVar2 = xstrtoumax(pcVar4,&local_48,10,&local_38,&DAT_0010d018);\n      if (uVar2 != 0) goto LAB_00103b86;\n      if ((local_48 == pcVar4) || (local_38 < local_40)) goto LAB_00103b18;\n      cVar1 = *local_48;\n    }\n    if (cVar1 == '\\0') {\n      first_page_number = local_40;\n      last_page_number = local_38;\n      sVar3 = 1;\n      goto LAB_00103b1a;\n    }\n  }\nLAB_00103b18:\n  sVar3 = 0;\nLAB_00103b1a:\n  if (local_30 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return sVar3;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "0010a000": "\nvoid quotearg(undefined8 param_1)\n\n{\n  quotearg_n(0,param_1);\n  return;\n}\n\n", 
    "0010bcc0": "\nvoid clear_ungetc_buffer_preserving_position(uint *param_1)\n\n{\n  if ((*param_1 & 0x100) == 0) {\n    return;\n  }\n  rpl_fseeko(param_1,0,1);\n  return;\n}\n\n", 
    "0010a120": "\nvoid quotearg_char_mem(undefined8 param_1,undefined8 param_2,char param_3,undefined8 param_4)\n\n{\n  undefined8 *puVar1;\n  long in_FS_OFFSET;\n  undefined8 local_48;\n  undefined8 uStack_40;\n  undefined8 local_38;\n  undefined8 uStack_30;\n  undefined8 local_28;\n  undefined8 uStack_20;\n  undefined8 local_18;\n  long local_10;\n  \n  puVar1 = &local_48;\n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  local_48 = default_quoting_options._0_8_;\n  uStack_40 = default_quoting_options._8_8_;\n  local_38 = default_quoting_options._16_8_;\n  uStack_30 = default_quoting_options._24_8_;\n  local_28 = default_quoting_options._32_8_;\n  uStack_20 = default_quoting_options._40_8_;\n  local_18 = default_quoting_options._48_8_;\n  set_char_quoting(&local_48,(int)param_3,1,param_4,param_1,param_2);\n  quotearg_n_options(0,param_1,param_2,puVar1);\n  if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "00115190": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint ungetc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ungetc@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00102780": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_fflush_00113f08)();\n  return iVar1;\n}\n\n", 
    "00102660": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = (*(code *)PTR_lseek_00113e78)();\n  return _Var1;\n}\n\n", 
    "00102540": "\nvoid __fpending(void)\n\n{\n  (*(code *)PTR___fpending_00113de8)();\n  return;\n}\n\n", 
    "00106100": "\nvoid close_stdout_set_file_name(undefined8 param_1)\n\n{\n  file_name = param_1;\n  return;\n}\n\n", 
    "0010a1e0": "\nvoid quotearg_colon_mem(undefined8 param_1,undefined8 param_2)\n\n{\n  quotearg_char_mem(param_1,param_2,0x3a);\n  return;\n}\n\n", 
    "0010c4e0": "\nulong c_ispunct(int param_1)\n\n{\n  ulong in_RAX;\n  \n  if (0x60 < param_1) {\n    return in_RAX & 0xffffffffffffff00 | (ulong)(param_1 - 0x7bU < 4);\n  }\n  if (param_1 < 0x5b) {\n    if (param_1 < 0x30) {\n      return in_RAX & 0xffffffffffffff00 | (ulong)(0x20 < param_1);\n    }\n    return in_RAX & 0xffffffffffffff00 | (ulong)(param_1 - 0x3aU < 7);\n  }\n  return 1;\n}\n\n", 
    "00104040": "\nvoid pad_down(int param_1)\n\n{\n  if (use_form_feed == '\\0') {\n    if (param_1 != 0) {\n      do {\n        putchar_unlocked(10);\n        param_1 = param_1 + -1;\n      } while (param_1 != 0);\n    }\n    return;\n  }\n  putchar_unlocked(0xc);\n  return;\n}\n\n", 
    "00109f20": "\nvoid quotearg_alloc(undefined8 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  quotearg_alloc_mem(param_1,param_2,0,param_3);\n  return;\n}\n\n", 
    "00103f10": "\nvoid pad_across_to(int param_1)\n\n{\n  int iVar1;\n  \n  if (tabify_output == '\\0') {\n    iVar1 = output_position + 1;\n    if (iVar1 <= param_1) {\n      do {\n        iVar1 = iVar1 + 1;\n        putchar_unlocked(0x20);\n      } while (param_1 + 1 != iVar1);\n    }\n    output_position = param_1;\n    return;\n  }\n  spaces_not_printed = param_1 - output_position;\n  return;\n}\n\n", 
    "0010aa20": "\nvoid xmalloc(size_t param_1)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(param_1);\n  if ((pvVar1 == (void *)0x0) && (param_1 != 0)) {\n                    /* WARNING: Subroutine does not return */\n    xalloc_die();\n  }\n  return;\n}\n\n", 
    "001025e0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nsize_t __ctype_get_mb_cur_max(void)\n\n{\n  size_t sVar1;\n  \n  sVar1 = (*(code *)PTR___ctype_get_mb_cur_max_00113e38)();\n  return sVar1;\n}\n\n", 
    "001059d0": "\nvoid print_files(undefined4 param_1,undefined8 param_2)\n\n{\n  char cVar1;\n  \n  init_parameters();\n  cVar1 = init_fps(param_1,param_2);\n  if (cVar1 == '\\0') {\n    return;\n  }\n  if (storing_columns != '\\0') {\n    init_store_cols();\n  }\n  if (first_page_number < 2) {\n    page_number = 1;\n  }\n  else {\n    cVar1 = skip_to_page();\n    if (cVar1 == '\\0') {\n      return;\n    }\n    page_number = first_page_number;\n  }\n  init_funcs();\n  line_number = line_count;\n  do {\n    cVar1 = print_page();\n  } while (cVar1 != '\\0');\n  return;\n}\n\n", 
    "001024c0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nchar * getenv(char *__name)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = (char *)(*(code *)PTR_getenv_00113da8)();\n  return pcVar1;\n}\n\n", 
    "001035b0": "\nvoid balance(int param_1)\n\n{\n  int iVar1;\n  long lVar2;\n  int iVar3;\n  int iVar4;\n  int iVar5;\n  int iVar6;\n  \n  if (0 < columns) {\n    iVar4 = 0;\n    iVar3 = 1;\n    iVar1 = param_1 / columns;\n    param_1 = param_1 % columns;\n    iVar6 = columns + 1;\n    lVar2 = column_vector;\n    do {\n      *(int *)(lVar2 + 0x28) = iVar4;\n      iVar5 = iVar1;\n      if (iVar3 <= param_1) {\n        iVar5 = iVar1 + 1;\n      }\n      iVar3 = iVar3 + 1;\n      *(int *)(lVar2 + 0x2c) = iVar5;\n      iVar4 = iVar4 + iVar5;\n      lVar2 = lVar2 + 0x40;\n    } while (iVar6 != iVar3);\n  }\n  return;\n}\n\n", 
    "00104a40": "\nvoid hold_file_isra_0(undefined4 *param_1,undefined4 *param_2)\n\n{\n  long lVar1;\n  long lVar2;\n  bool bVar3;\n  \n  if (parallel_files == '\\0') {\n    if (columns != 0) {\n      bVar3 = storing_columns == '\\0';\n      lVar2 = ((ulong)(columns - 1) + 1) * 0x40 + column_vector;\n      lVar1 = column_vector;\n      do {\n        *(uint *)(lVar1 + 0x10) = ~-(uint)bVar3 + 2;\n        lVar1 = lVar1 + 0x40;\n      } while (lVar1 != lVar2);\n    }\n    files_ready_to_read = files_ready_to_read + -1;\n    *param_2 = 0;\n    return;\n  }\n  *param_1 = 2;\n  files_ready_to_read = files_ready_to_read + -1;\n  *param_2 = 0;\n  return;\n}\n\n", 
    "00115088": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint fclose(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fclose@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00104c80": "\nuint skip_to_page(ulong param_1)\n\n{\n  int iVar1;\n  long lVar2;\n  undefined8 uVar3;\n  long lVar4;\n  int iVar5;\n  int iVar6;\n  ulong uVar7;\n  int iVar8;\n  \n  if (param_1 < 2) {\n    return files_ready_to_read & 0xffffff00 | (uint)(0 < (int)files_ready_to_read);\n  }\n  uVar7 = 1;\n  do {\n    iVar8 = 1;\n    lVar4 = column_vector;\n    iVar1 = columns;\n    if (1 < lines_per_body) {\n      do {\n        if (0 < iVar1) {\n          lVar2 = lVar4;\n          iVar6 = 1;\n          do {\n            while (*(int *)(lVar2 + 0x10) != 0) {\n              iVar6 = iVar6 + 1;\n              lVar2 = lVar2 + 0x40;\n              lVar4 = column_vector;\n              if (iVar1 < iVar6) goto LAB_00104d04;\n            }\n            iVar5 = iVar6 + 1;\n            skip_read(lVar2,iVar6);\n            lVar4 = column_vector;\n            lVar2 = lVar2 + 0x40;\n            iVar1 = columns;\n            iVar6 = iVar5;\n          } while (iVar5 <= columns);\n        }\nLAB_00104d04:\n        iVar8 = iVar8 + 1;\n      } while (iVar8 < lines_per_body);\n    }\n    last_line = 1;\n    if (0 < iVar1) {\n      iVar8 = 1;\n      do {\n        while (*(int *)(lVar4 + 0x10) != 0) {\n          iVar8 = iVar8 + 1;\n          lVar4 = lVar4 + 0x40;\n          if (iVar1 < iVar8) goto LAB_00104d55;\n        }\n        iVar6 = iVar8 + 1;\n        skip_read(lVar4,iVar8);\n        lVar4 = lVar4 + 0x40;\n        iVar1 = columns;\n        iVar8 = iVar6;\n      } while (iVar6 <= columns);\nLAB_00104d55:\n      if ((storing_columns != '\\0') && (0 < iVar1)) {\n        lVar2 = ((ulong)(iVar1 - 1) + 1) * 0x40 + column_vector;\n        lVar4 = column_vector;\n        do {\n          if (*(int *)(lVar4 + 0x10) != 3) {\n            *(undefined4 *)(lVar4 + 0x10) = 2;\n          }\n          lVar4 = lVar4 + 0x40;\n        } while (lVar2 != lVar4);\n      }\n    }\n    reset_status();\n    last_line = 0;\n    if ((int)files_ready_to_read < 1) {\n      uVar3 = dcgettext(0,\"starting page number %lu exceeds page count %lu\",5);\n                    /* WARNING: Subroutine does not return */\n      error(0,0,uVar3,param_1,uVar7);\n    }\n    uVar7 = uVar7 + 1;\n    if (param_1 == uVar7) {\n      return files_ready_to_read & 0xffffff00 | (uint)(0 < (int)files_ready_to_read);\n    }\n  } while( true );\n}\n\n", 
    "00109fd0": "\nvoid quotearg_n(undefined8 param_1,undefined8 param_2)\n\n{\n  quotearg_n_options(param_1,param_2,0xffffffffffffffff,default_quoting_options);\n  return;\n}\n\n", 
    "0010c310": "\ntime_t mktime_z(long param_1,tm *param_2)\n\n{\n  char cVar1;\n  int iVar2;\n  long lVar3;\n  tm *ptVar4;\n  time_t tVar5;\n  long in_FS_OFFSET;\n  time_t local_70;\n  tm local_68;\n  long local_30;\n  \n  local_30 = *(long *)(in_FS_OFFSET + 0x28);\n  if (param_1 == 0) {\n    tVar5 = timegm(param_2);\n    goto LAB_0010c382;\n  }\n  lVar3 = set_tz();\n  if (lVar3 != 0) {\n    local_70 = mktime(param_2);\n    if (local_70 == -1) {\n      ptVar4 = localtime_r(&local_70,&local_68);\n      if ((ptVar4 != (tm *)0x0) && (iVar2 = equal_tm(param_2,&local_68), iVar2 != 0))\n      goto LAB_0010c362;\n    }\n    else {\nLAB_0010c362:\n      cVar1 = save_abbr(param_1,param_2);\n      if (cVar1 == '\\0') {\n        local_70 = -1;\n      }\n    }\n    cVar1 = revert_tz(lVar3);\n    tVar5 = local_70;\n    if (cVar1 != '\\0') goto LAB_0010c382;\n  }\n  tVar5 = -1;\nLAB_0010c382:\n  if (local_30 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return tVar5;\n}\n\n", 
    "0010c794": "\nvoid _fini(void)\n\n{\n  return;\n}\n\n", 
    "0010aac0": "\nvoid xnrealloc(undefined8 param_1,ulong param_2,ulong param_3)\n\n{\n  if ((-1 < SUB168(ZEXT816(param_2) * ZEXT816(param_3),0)) &&\n     (SUB168(ZEXT816(param_2) * ZEXT816(param_3) >> 0x40,0) == 0)) {\n    xrealloc();\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  xalloc_die();\n}\n\n", 
    "0010c430": "\nbool c_isalpha(int param_1)\n\n{\n  if (param_1 < 0x5b) {\n    return 0x40 < param_1;\n  }\n  return param_1 - 0x61U < 0x1a;\n}\n\n", 
    "0010a010": "\nvoid quotearg_mem(undefined8 param_1,undefined8 param_2)\n\n{\n  quotearg_n_mem(0,param_1,param_2);\n  return;\n}\n\n", 
    "0010b220": "\nuint bkm_scale_by_power(undefined8 param_1,uint param_2,int param_3)\n\n{\n  uint uVar1;\n  uint uVar2;\n  ulong uVar3;\n  \n  uVar3 = (ulong)param_2;\n  param_3 = param_3 + -1;\n  uVar2 = 0;\n  do {\n    uVar1 = bkm_scale(param_1,uVar3 & 0xffffffff);\n    param_3 = param_3 + -1;\n    uVar2 = uVar2 | uVar1;\n  } while (param_3 != -1);\n  return uVar2;\n}\n\n", 
    "0010c550": "\nbool c_isupper(int param_1)\n\n{\n  return param_1 - 0x41U < 0x1a;\n}\n\n", 
    "00115080": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid textdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* textdomain@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00109c90": "\nvoid clone_quoting_options(undefined1 *param_1)\n\n{\n  int iVar1;\n  int *piVar2;\n  \n  piVar2 = __errno_location();\n  iVar1 = *piVar2;\n  if (param_1 == (undefined1 *)0x0) {\n    param_1 = default_quoting_options;\n  }\n  xmemdup(param_1,0x38);\n  *piVar2 = iVar1;\n  return;\n}\n\n", 
    "001150f8": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid * memset(void *__s,int __c,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memset@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00103300": "\nvoid frame_dummy(void)\n\n{\n  register_tm_clones();\n  return;\n}\n\n", 
    "0010c400": "\nulong c_isalnum(int param_1)\n\n{\n  ulong in_RAX;\n  ulong uVar1;\n  \n  if (param_1 < 0x5b) {\n    uVar1 = 1;\n    if (param_1 < 0x41) {\n      return (ulong)(param_1 - 0x30U < 10);\n    }\n  }\n  else {\n    uVar1 = in_RAX & 0xffffffffffffff00 | (ulong)(param_1 - 0x61U < 0x1a);\n  }\n  return uVar1;\n}\n\n", 
    "00102690": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid * memset(void *__s,int __c,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = (void *)(*(code *)PTR_memset_00113e90)();\n  return pvVar1;\n}\n\n", 
    "00106010": "\nvoid getoptarg(char *param_1,char param_2,char *param_3,undefined4 *param_4)\n\n{\n  char cVar1;\n  int iVar2;\n  undefined8 uVar3;\n  undefined8 uVar4;\n  int *piVar5;\n  long in_FS_OFFSET;\n  long local_38;\n  long local_30;\n  \n  cVar1 = *param_1;\n  local_30 = *(long *)(in_FS_OFFSET + 0x28);\n  if (9 < (int)cVar1 - 0x30U) {\n    *param_3 = cVar1;\n    cVar1 = param_1[1];\n    param_1 = param_1 + 1;\n  }\n  if (cVar1 == '\\0') {\nLAB_0010604e:\n    if (local_30 == *(long *)(in_FS_OFFSET + 0x28)) {\n      return;\n    }\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  iVar2 = xstrtol(param_1,0,10,&local_38,&DAT_0010d018);\n  if (iVar2 == 0) {\n    if (local_38 - 1U < 0x7fffffff) {\n      *param_4 = (int)local_38;\n      goto LAB_0010604e;\n    }\n  }\n  uVar3 = quote(param_1);\n  uVar4 = dcgettext(0,\"\\'-%c\\' extra characters or invalid number in the argument: %s\",5);\n  iVar2 = 0x4b;\n  if (local_38 < 0x80000000) {\n    piVar5 = __errno_location();\n    iVar2 = *piVar5;\n  }\n                    /* WARNING: Subroutine does not return */\n  error(0,iVar2,uVar4,(int)param_2,uVar3);\n}\n\n", 
    "00102570": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint fcntl(int __fd,int __cmd,...)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_fcntl_00113e00)();\n  return iVar1;\n}\n\n", 
    "001150f0": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __assert_fail@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00106370": "\nchar * imaxtostr(ulong param_1,long param_2)\n\n{\n  ulong uVar1;\n  char *pcVar2;\n  char *pcVar3;\n  \n  *(undefined *)(param_2 + 0x14) = 0;\n  pcVar2 = (char *)(param_2 + 0x14);\n  if ((long)param_1 < 0) {\n    do {\n      pcVar3 = pcVar2;\n      uVar1 = (long)param_1 / 10;\n      pcVar3[-1] = ((char)uVar1 * '\\n' + '0') - (char)param_1;\n      param_1 = uVar1;\n      pcVar2 = pcVar3 + -1;\n    } while (uVar1 != 0);\n    pcVar3[-2] = '-';\n    return pcVar3 + -2;\n  }\n  do {\n    pcVar2 = pcVar2 + -1;\n    uVar1 = param_1 / 10;\n    *pcVar2 = (char)param_1 + (char)uVar1 * -10 + '0';\n    param_1 = uVar1;\n  } while (uVar1 != 0);\n  return pcVar2;\n}\n\n", 
    "0010bd20": "\nint rpl_fseeko(FILE *param_1,__off_t param_2,int param_3)\n\n{\n  int iVar1;\n  __off_t _Var2;\n  \n  if (((param_1->_IO_read_end == param_1->_IO_read_ptr) &&\n      (param_1->_IO_write_ptr == param_1->_IO_write_base)) &&\n     (param_1->_IO_save_base == (char *)0x0)) {\n    iVar1 = fileno(param_1);\n    _Var2 = lseek(iVar1,param_2,param_3);\n    if (_Var2 == -1) {\n      iVar1 = -1;\n    }\n    else {\n      param_1->_flags = param_1->_flags & 0xffffffef;\n      param_1->_offset = _Var2;\n      iVar1 = 0;\n    }\n    return iVar1;\n  }\n  iVar1 = fseeko(param_1,param_2,param_3);\n  return iVar1;\n}\n\n", 
    "0010c4b0": "\nbool c_isgraph(int param_1)\n\n{\n  return param_1 - 0x21U < 0x5e;\n}\n\n", 
    "0010c5d0": "\nint c_strcasecmp(undefined *param_1,undefined *param_2)\n\n{\n  byte bVar1;\n  byte bVar2;\n  int iVar3;\n  \n  iVar3 = 0;\n  if (param_1 != param_2) {\n    do {\n      bVar1 = c_tolower(*param_1);\n      bVar2 = c_tolower(*param_2);\n      if (bVar1 == 0) break;\n      param_1 = param_1 + 1;\n      param_2 = param_2 + 1;\n    } while (bVar1 == bVar2);\n    iVar3 = (uint)bVar1 - (uint)bVar2;\n  }\n  return iVar3;\n}\n\n", 
    "0010a1b0": "\nvoid quotearg_char(undefined8 param_1,char param_2)\n\n{\n  quotearg_char_mem(param_1,0xffffffffffffffff,(int)param_2);\n  return;\n}\n\n", 
    "00115178": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid * malloc(size_t __size)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* malloc@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00115058": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint getc_unlocked(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getc_unlocked@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "001024f0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid abort(void)\n\n{\n  (*(code *)PTR_abort_00113dc0)();\n  return;\n}\n\n", 
    "001061d0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint fdadvise(int __fd,__off_t __offset,__off_t __len,int __advise)\n\n{\n  int iVar1;\n  \n  iVar1 = posix_fadvise(__fd,__offset,__len,__advise);\n  return iVar1;\n}\n\n", 
    "001084d0": "\nundefined8\nstrcaseeq3(long param_1,undefined8 param_2,byte param_3,char param_4,char param_5,char param_6,\n          char param_7)\n\n{\n  char cVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  \n  cVar1 = c_isupper((int)(char)param_3);\n  bVar2 = *(byte *)(param_1 + 3);\n  if (cVar1 != '\\0') {\n    bVar2 = bVar2 & 0xdf;\n  }\n  if (param_3 != bVar2) {\n    return 0;\n  }\n  if (param_3 == 0) {\n    return 1;\n  }\n  uVar3 = strcaseeq4(param_1,param_2,(int)param_4,(int)param_5,(int)param_6,(int)param_7);\n  return uVar3;\n}\n\n", 
    "00115170": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint wcwidth(wchar_t __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* wcwidth@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00115050": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid __fpending(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __fpending@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "0010abb0": "\nvoid xcalloc(size_t param_1,ulong param_2)\n\n{\n  void *pvVar1;\n  \n  if ((-1 < SUB168(ZEXT816(param_1) * ZEXT816(param_2),0)) &&\n     (SUB168(ZEXT816(param_1) * ZEXT816(param_2) >> 0x40,0) == 0)) {\n    pvVar1 = calloc(param_1,param_2);\n    if (pvVar1 != (void *)0x0) {\n      return;\n    }\n  }\n                    /* WARNING: Subroutine does not return */\n  xalloc_die();\n}\n\n", 
    "0010a100": "\nvoid quotearg_style_mem(undefined4 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  quotearg_n_style_mem(0,param_1,param_2,param_3);\n  return;\n}\n\n", 
    "0010c760": "\nint atexit(__func *__func)\n\n{\n  int iVar1;\n  \n  iVar1 = __cxa_atexit(__func,0,__dso_handle);\n  return iVar1;\n}\n\n", 
    "0010a340": "\nvoid quotearg_custom(undefined8 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  quotearg_n_custom(0,param_1,param_2,param_3);\n  return;\n}\n\n", 
    "00102560": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint iswcntrl(wint_t __wc)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_iswcntrl_00113df8)();\n  return iVar1;\n}\n\n", 
    "00103530": "\nvoid reset_status(void)\n\n{\n  bool bVar1;\n  long lVar2;\n  long lVar3;\n  uint uVar4;\n  long lVar5;\n  \n  lVar2 = column_vector;\n  if (columns != 0) {\n    bVar1 = false;\n    lVar5 = ((ulong)(columns - 1) + 1) * 0x40 + column_vector;\n    lVar3 = column_vector;\n    uVar4 = files_ready_to_read;\n    do {\n      if (*(int *)(lVar3 + 0x10) == 2) {\n        *(undefined4 *)(lVar3 + 0x10) = 0;\n        uVar4 = uVar4 + 1;\n        bVar1 = true;\n      }\n      lVar3 = lVar3 + 0x40;\n    } while (lVar3 != lVar5);\n    if (bVar1) {\n      files_ready_to_read = uVar4;\n    }\n  }\n  if (storing_columns != '\\0') {\n    files_ready_to_read = (uint)(*(int *)(lVar2 + 0x10) != 3);\n  }\n  return;\n}\n\n", 
    "00106120": "\nvoid close_stdout(void)\n\n{\n  int iVar1;\n  int *piVar2;\n  undefined8 uVar3;\n  undefined8 uVar4;\n  \n  iVar1 = close_stream(stdout);\n  if (iVar1 != 0) {\n    piVar2 = __errno_location();\n    if ((ignore_EPIPE == '\\0') || (*piVar2 != 0x20)) {\n      uVar3 = dcgettext(0,\"write error\",5);\n      if (file_name != 0) {\n        uVar4 = quotearg_colon();\n                    /* WARNING: Subroutine does not return */\n        error(0,*piVar2,\"%s: %s\",uVar4,uVar3);\n      }\n                    /* WARNING: Subroutine does not return */\n      error(0,*piVar2,\"%s\",uVar3);\n    }\n  }\n  iVar1 = close_stream(stderr);\n  if (iVar1 == 0) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  _exit(exit_failure);\n}\n\n", 
    "00108420": "\nundefined8\nstrcaseeq4(long param_1,undefined8 param_2,byte param_3,char param_4,char param_5,char param_6,\n          char param_7)\n\n{\n  char cVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  \n  cVar1 = c_isupper((int)(char)param_3);\n  bVar2 = *(byte *)(param_1 + 4);\n  if (cVar1 != '\\0') {\n    bVar2 = bVar2 & 0xdf;\n  }\n  if (param_3 != bVar2) {\n    return 0;\n  }\n  if (param_3 == 0) {\n    return 1;\n  }\n  uVar3 = strcaseeq5(param_1,param_2,(int)param_4,(int)param_5,(int)param_6,(int)param_7);\n  return uVar3;\n}\n\n", 
    "00102680": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\n\n{\n  (*(code *)PTR___assert_fail_00113e88)();\n  return;\n}\n\n", 
    "00108660": "\nundefined8\nstrcaseeq1(long param_1,undefined8 param_2,byte param_3,char param_4,char param_5,char param_6,\n          char param_7)\n\n{\n  char cVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  \n  cVar1 = c_isupper((int)(char)param_3);\n  bVar2 = *(byte *)(param_1 + 1);\n  if (cVar1 != '\\0') {\n    bVar2 = bVar2 & 0xdf;\n  }\n  if (param_3 != bVar2) {\n    return 0;\n  }\n  if (param_3 == 0) {\n    return 1;\n  }\n  uVar3 = strcaseeq2(param_1,param_2,(int)param_4,(int)param_5,(int)param_6,(int)param_7);\n  return uVar3;\n}\n\n", 
    "00105030": "\nvoid print_clump_isra_0(code **param_1,int param_2,char *param_3)\n\n{\n  char *pcVar1;\n  char *pcVar2;\n  \n  if (param_2 != 0) {\n    pcVar2 = param_3;\n    do {\n      pcVar1 = pcVar2 + 1;\n      (**param_1)((int)*pcVar2);\n      pcVar2 = pcVar1;\n    } while (pcVar1 != param_3 + (ulong)(param_2 - 1) + 1);\n    return;\n  }\n  return;\n}\n\n", 
    "0010be50": "\nbool equal_tm(uint *param_1,uint *param_2,undefined8 param_3,undefined8 param_4)\n\n{\n  byte bVar1;\n  uint uVar2;\n  \n  uVar2 = *param_1 ^ *param_2 | param_1[1] ^ param_2[1] | param_1[2] ^ param_2[2] |\n          param_1[3] ^ param_2[3] | param_1[4] ^ param_2[4] | param_1[5] ^ param_2[5];\n  bVar1 = isdst_differ(param_1[8],param_2[8],param_3,param_4,uVar2);\n  return (bVar1 | uVar2) == 0;\n}\n\n", 
    "0010c4c0": "\nbool c_islower(int param_1)\n\n{\n  return param_1 - 0x61U < 0x1a;\n}\n\n", 
    "0010ac40": "\nvoid xalloc_die(void)\n\n{\n  undefined8 uVar1;\n  \n  uVar1 = dcgettext(0,\"memory exhausted\",5);\n                    /* WARNING: Subroutine does not return */\n  error(exit_failure,0,\"%s\",uVar1);\n}\n\n", 
    "001024e0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nintmax_t strtoimax(char *__nptr,char **__endptr,int __base)\n\n{\n  intmax_t iVar1;\n  \n  iVar1 = (*(code *)PTR_strtoimax_00113db8)();\n  return iVar1;\n}\n\n", 
    "00115188": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nchar * nl_langinfo(nl_item __item)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* nl_langinfo@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "001036f0": "\nvoid init_store_cols(int param_1)\n\n{\n  int iVar1;\n  undefined8 uVar2;\n  int iVar3;\n  uint uVar4;\n  long lVar5;\n  \n  iVar3 = (int)((long)lines_per_body * (long)columns);\n  if (((((long)iVar3 == (long)lines_per_body * (long)columns) && (!SCARRY4(iVar3,1))) &&\n      (!SCARRY4(chars_per_column,1))) &&\n     (lVar5 = (long)(chars_per_column + 1) * (long)iVar3, iVar1 = (int)lVar5, iVar1 == lVar5)) {\n    free(line_vector);\n    line_vector = (void *)xnmalloc((long)(iVar3 + 1),4);\n    free(end_vector);\n    end_vector = (void *)xnmalloc((long)iVar3,4);\n    free(buff);\n    buff = (void *)xnmalloc((long)iVar1,(ulong)use_col_separator + 1);\n    buff_allocated = (long)iVar1 * ((ulong)use_col_separator + 1);\n    return;\n  }\n  integer_overflow();\n  lines_per_body = lines_per_page + -10;\n  if (lines_per_body < 1) {\n    extremities = '\\0';\n    keep_FF = 1;\nLAB_001039ce:\n    lines_per_body = lines_per_page;\n  }\n  else if (extremities == '\\0') goto LAB_001039ce;\n  if (double_space != '\\0') {\n    lines_per_body = lines_per_body / 2;\n  }\n  if (param_1 == 0) {\n    parallel_files = '\\0';\n  }\n  else if (parallel_files != '\\0') {\n    columns = param_1;\n  }\n  if (storing_columns != '\\0') {\n    balance_columns = 1;\n  }\n  if (columns < 2) {\n    storing_columns = '\\0';\n  }\n  else {\n    if (use_col_separator == 0) {\n      col_sep_string = &DAT_0010d015;\n      col_sep_length = 1;\n      if (join_lines != '\\0') {\n        col_sep_string = &DAT_0010d017;\n      }\n      use_col_separator = 1;\n    }\n    else if (((join_lines == '\\0') && (col_sep_length == 1)) && (*col_sep_string == '\\t')) {\n      col_sep_string = &DAT_0010d015;\n    }\n    truncate_lines = 1;\n    tabify_output = 1;\n  }\n  if (join_lines != '\\0') {\n    truncate_lines = 0;\n  }\n  if (numbered_lines != '\\0') {\n    line_count = start_line_num;\n    iVar3 = chars_per_number + 1;\n    if (number_separator == '\\t') {\n      uVar4 = (uint)((int)chars_per_number >> 0x1f) >> 0x1d;\n      iVar3 = chars_per_number + 8 + (uVar4 - (chars_per_number + uVar4 & 7));\n    }\n    number_width = iVar3;\n    if (parallel_files != '\\0') goto LAB_001038e8;\n  }\n  iVar3 = 0;\nLAB_001038e8:\n  lVar5 = (long)(columns + -1) * (long)col_sep_length;\n  iVar1 = (int)lVar5;\n  if (iVar1 != lVar5) {\n    iVar1 = 0x7fffffff;\n  }\n  if (SBORROW4(chars_per_line - iVar3,iVar1)) {\n    chars_per_column = 0;\n  }\n  else {\n    chars_per_column = ((chars_per_line - iVar3) - iVar1) / columns;\n    if (0 < chars_per_column) {\n      if (numbered_lines != '\\0') {\n        free(number_buff);\n        lVar5 = (long)(int)chars_per_number + 1;\n        if (chars_per_number < 0xc) {\n          lVar5 = 0xc;\n        }\n        number_buff = (void *)xmalloc(lVar5);\n      }\n      free(clump_buff);\n      iVar3 = 8;\n      if (7 < chars_per_input_tab) {\n        iVar3 = chars_per_input_tab;\n      }\n      clump_buff = (void *)xmalloc((long)iVar3);\n      return;\n    }\n  }\n  uVar2 = dcgettext(0,\"page width too narrow\",5);\n                    /* WARNING: Subroutine does not return */\n  error(1,0,uVar2);\n}\n\n", 
    "00115068": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint fcntl(int __fd,int __cmd,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fcntl@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00115180": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint fflush(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fflush@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00115060": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint iswcntrl(wint_t __wc)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* iswcntrl@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00104610": "\nvoid emit_stdin_note(void)\n\n{\n  char *__s;\n  FILE *__stream;\n  \n  __stream = stdout;\n  __s = (char *)dcgettext(0,\"\\nWith no FILE, or when FILE is -, read standard input.\\n\",5);\n  fputs_unlocked(__s,__stream);\n  return;\n}\n\n", 
    "0010c530": "\nbool c_isspace(int param_1)\n\n{\n  if (param_1 < 0xe) {\n    return 8 < param_1;\n  }\n  return param_1 == 0x20;\n}\n\n", 
    "0010bef0": "\nbool change_env(long param_1)\n\n{\n  int iVar1;\n  long lVar2;\n  \n  lVar2 = param_1 + 9;\n  if (*(char *)(param_1 + 8) == '\\0') {\n    lVar2 = 0;\n  }\n  iVar1 = setenv_TZ(lVar2);\n  if (iVar1 == 0) {\n    tzset();\n  }\n  return iVar1 == 0;\n}\n\n", 
    "00102870": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nuintmax_t strtoumax(char *__nptr,char **__endptr,int __base)\n\n{\n  uintmax_t uVar1;\n  \n  uVar1 = (*(code *)PTR_strtoumax_00113f80)();\n  return uVar1;\n}\n\n", 
    "001151f8": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nuintmax_t strtoumax(char *__nptr,char **__endptr,int __base)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strtoumax@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00102750": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint fileno(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_fileno_00113ef0)();\n  return iVar1;\n}\n\n", 
    "0010bda0": "\nsize_t rpl_mbrtowc(wchar_t *param_1,byte *param_2,size_t param_3,mbstate_t *param_4)\n\n{\n  char cVar1;\n  size_t sVar2;\n  long in_FS_OFFSET;\n  wchar_t local_34;\n  long local_30;\n  \n  local_30 = *(long *)(in_FS_OFFSET + 0x28);\n  if (param_1 == (wchar_t *)0x0) {\n    param_1 = &local_34;\n  }\n  sVar2 = mbrtowc(param_1,(char *)param_2,param_3,param_4);\n  if ((0xfffffffffffffffd < sVar2) && (param_3 != 0)) {\n    cVar1 = hard_locale(0);\n    if (cVar1 == '\\0') {\n      sVar2 = 1;\n      *param_1 = (uint)*param_2;\n    }\n  }\n  if (local_30 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return sVar2;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "001150d8": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\ntm * gmtime_r(time_t *__timer,tm *__tp)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* gmtime_r@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00104ac0": "\nvoid skip_read(FILE **param_1,int param_2)\n\n{\n  FILE *__stream;\n  char cVar1;\n  int iVar2;\n  long lVar3;\n  long lVar4;\n  char cVar5;\n  \n  __stream = *param_1;\n  iVar2 = getc_unlocked(__stream);\n  cVar5 = last_line;\n  if (iVar2 == 0xc) {\n    if (*(char *)((long)param_1 + 0x39) == '\\0') {\n      if (last_line == '\\0') {\n        cVar5 = '\\x01';\n        iVar2 = getc_unlocked(__stream);\n      }\n      else {\n        *(undefined *)((long)param_1 + 0x39) = 1;\n        lVar3 = column_vector;\n        cVar1 = cVar5;\njoined_r0x00104b88:\n        column_vector = lVar3;\n        if (cVar1 != '\\0') {\n          if (parallel_files == '\\0') {\n            if (columns != 0) {\n              lVar4 = ((ulong)(columns - 1) + 1) * 0x40 + lVar3;\n              do {\n                *(undefined *)(lVar3 + 0x39) = 0;\n                lVar3 = lVar3 + 0x40;\n              } while (lVar3 != lVar4);\n            }\n          }\n          else {\n            *(undefined *)((long)param_1 + 0x39) = 0;\n          }\n        }\n        iVar2 = getc_unlocked(__stream);\n      }\n      if (iVar2 == 10) {\n        hold_file_isra_0(param_1 + 2,param_1 + 6);\n      }\n      else {\n        ungetc(iVar2,__stream);\n        hold_file_isra_0(param_1 + 2,param_1 + 6);\n      }\n      goto LAB_00104b23;\n    }\n    iVar2 = getc_unlocked(__stream);\n    if (iVar2 == 10) {\n      iVar2 = getc_unlocked(__stream);\n    }\n    cVar5 = iVar2 == 0xc;\n    *(undefined *)((long)param_1 + 0x39) = 0;\n  }\n  else {\n    *(undefined *)((long)param_1 + 0x39) = 0;\n    cVar5 = false;\n  }\n  if (last_line != '\\0') {\n    *(undefined *)((long)param_1 + 0x39) = 1;\n  }\n  while (iVar2 != 10) {\n    lVar3 = column_vector;\n    cVar1 = last_line;\n    if (iVar2 == 0xc) goto joined_r0x00104b88;\n    if (iVar2 == -1) {\n      close_file(param_1);\n      break;\n    }\n    iVar2 = getc_unlocked(__stream);\n  }\nLAB_00104b23:\n  if ((skip_count != '\\0') && (((parallel_files != '\\x01' || (param_2 == 1)) && (cVar5 == '\\0')))) {\n    line_count = line_count + 1;\n  }\n  return;\n}\n\n", 
    "001151f0": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fopen@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00103280": "\n/* WARNING: Removing unreachable block (ram,0x001032a4) */\n/* WARNING: Removing unreachable block (ram,0x001032b0) */\n\nvoid register_tm_clones(void)\n\n{\n  return;\n}\n\n", 
    "001150d0": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nchar * strrchr(char *__s,int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strrchr@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "001025b0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_fclose_00113e20)();\n  return iVar1;\n}\n\n", 
    "001036a0": "\nvoid cleanup(EVP_PKEY_CTX *ctx)\n\n{\n  free(number_buff);\n  free(clump_buff);\n  free(column_vector);\n  free(line_vector);\n  free(end_vector);\n  free(buff);\n  return;\n}\n\n", 
    "0010ae50": "\nuint xstrtoimax(char *param_1,char **param_2,uint param_3,intmax_t *param_4,char *param_5)\n\n{\n  char cVar1;\n  char cVar2;\n  uint uVar3;\n  int *piVar4;\n  intmax_t iVar5;\n  char *pcVar6;\n  char *pcVar7;\n  undefined8 uVar8;\n  uint uVar9;\n  int iVar10;\n  long in_FS_OFFSET;\n  char *local_50;\n  intmax_t local_48;\n  long local_40;\n  \n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  if (0x24 < param_3) {\n                    /* WARNING: Subroutine does not return */\n    __assert_fail(\"0 <= strtol_base && strtol_base <= 36\",\"lib/xstrtol.c\",0x60,\"xstrtoimax\");\n  }\n  if (param_2 == (char **)0x0) {\n    param_2 = &local_50;\n  }\n  piVar4 = __errno_location();\n  *piVar4 = 0;\n  iVar5 = strtoimax(param_1,param_2,param_3);\n  pcVar7 = *param_2;\n  local_48 = iVar5;\n  if (pcVar7 == param_1) {\n    if (param_5 == (char *)0x0) {\n      uVar9 = 4;\n      goto LAB_0010aedf;\n    }\n    cVar1 = *pcVar7;\n    uVar9 = 4;\n    if (cVar1 == '\\0') goto LAB_0010aedf;\n    iVar10 = (int)cVar1;\n    pcVar6 = strchr(param_5,iVar10);\n    if (pcVar6 == (char *)0x0) goto LAB_0010aedf;\n    local_48 = 1;\n    uVar9 = 0;\nLAB_0010af62:\n    pcVar6 = strchr(param_5,iVar10);\n    if (pcVar6 == (char *)0x0) {\nswitchD_0010afc3_caseD_43:\n      uVar9 = uVar9 | 2;\n      *param_4 = local_48;\n      goto LAB_0010aedf;\n    }\n    switch(cVar1) {\n    case 'E':\n    case 'G':\n    case 'K':\n    case 'M':\n    case 'P':\n    case 'T':\n    case 'Y':\n    case 'Z':\n    case 'g':\n    case 'k':\n    case 'm':\n    case 't':\n      pcVar6 = strchr(param_5,0x30);\n      if (pcVar6 == (char *)0x0) goto switchD_0010af9a_caseD_46;\n      cVar2 = pcVar7[1];\n      if (cVar2 == 'D') {\n        iVar10 = 2;\n        uVar8 = 1000;\n      }\n      else if (cVar2 == 'i') {\n        uVar8 = 0x400;\n        iVar10 = (pcVar7[2] == 'B') + 1 + (uint)(pcVar7[2] == 'B');\n      }\n      else {\n        iVar10 = (cVar2 == 'B') + 1;\n        uVar8 = 1000;\n        if (cVar2 != 'B') {\n          uVar8 = 0x400;\n        }\n      }\n      break;\n    default:\nswitchD_0010af9a_caseD_46:\n      iVar10 = 1;\n      uVar8 = 0x400;\n    }\n    switch(cVar1) {\n    case 'B':\n      uVar3 = bkm_scale(&local_48,0x400);\n      pcVar7 = *param_2;\n      uVar9 = uVar9 | uVar3;\n      break;\n    default:\n      goto switchD_0010afc3_caseD_43;\n    case 'E':\n      uVar3 = bkm_scale_by_power(&local_48,uVar8,6);\n      pcVar7 = *param_2;\n      uVar9 = uVar9 | uVar3;\n      break;\n    case 'G':\n    case 'g':\n      uVar3 = bkm_scale_by_power(&local_48,uVar8,3);\n      pcVar7 = *param_2;\n      uVar9 = uVar9 | uVar3;\n      break;\n    case 'K':\n    case 'k':\n      uVar3 = bkm_scale_by_power(&local_48,uVar8,1);\n      pcVar7 = *param_2;\n      uVar9 = uVar9 | uVar3;\n      break;\n    case 'M':\n    case 'm':\n      uVar3 = bkm_scale_by_power(&local_48,uVar8,2);\n      pcVar7 = *param_2;\n      uVar9 = uVar9 | uVar3;\n      break;\n    case 'P':\n      uVar3 = bkm_scale_by_power(&local_48,uVar8,5);\n      pcVar7 = *param_2;\n      uVar9 = uVar9 | uVar3;\n      break;\n    case 'T':\n    case 't':\n      uVar3 = bkm_scale_by_power(&local_48,uVar8,4);\n      pcVar7 = *param_2;\n      uVar9 = uVar9 | uVar3;\n      break;\n    case 'Y':\n      uVar3 = bkm_scale_by_power(&local_48,uVar8,8);\n      pcVar7 = *param_2;\n      uVar9 = uVar9 | uVar3;\n      break;\n    case 'Z':\n      uVar3 = bkm_scale_by_power(&local_48,uVar8,7);\n      pcVar7 = *param_2;\n      uVar9 = uVar9 | uVar3;\n      break;\n    case 'b':\n      uVar3 = bkm_scale(&local_48,0x200);\n      pcVar7 = *param_2;\n      uVar9 = uVar9 | uVar3;\n      break;\n    case 'c':\n      break;\n    case 'w':\n      uVar3 = bkm_scale(&local_48,2);\n      pcVar7 = *param_2;\n      uVar9 = uVar9 | uVar3;\n    }\n    iVar5 = local_48;\n    *param_2 = pcVar7 + iVar10;\n    if (pcVar7[iVar10] != '\\0') {\n      uVar9 = uVar9 | 2;\n    }\n  }\n  else {\n    if (*piVar4 == 0) {\n      uVar9 = 0;\n    }\n    else {\n      uVar9 = 4;\n      if (*piVar4 != 0x22) goto LAB_0010aedf;\n      uVar9 = 1;\n    }\n    if ((param_5 != (char *)0x0) && (cVar1 = *pcVar7, cVar1 != '\\0')) {\n      iVar10 = (int)cVar1;\n      goto LAB_0010af62;\n    }\n  }\n  *param_4 = iVar5;\nLAB_0010aedf:\n  if (local_40 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return uVar9;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "0010c5b0": "\nint c_toupper(int param_1)\n\n{\n  if (param_1 - 0x61U < 0x1a) {\n    param_1 = param_1 + -0x20;\n  }\n  return param_1;\n}\n\n", 
    "00115148": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strtol@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "001037c0": "\nvoid init_parameters(int param_1)\n\n{\n  undefined8 uVar1;\n  int iVar2;\n  uint uVar3;\n  int iVar4;\n  long lVar5;\n  \n  lines_per_body = lines_per_page + -10;\n  if (lines_per_body < 1) {\n    extremities = '\\0';\n    keep_FF = 1;\nLAB_001039ce:\n    lines_per_body = lines_per_page;\n  }\n  else if (extremities == '\\0') goto LAB_001039ce;\n  if (double_space != '\\0') {\n    lines_per_body = lines_per_body / 2;\n  }\n  if (param_1 == 0) {\n    parallel_files = '\\0';\n  }\n  else if (parallel_files != '\\0') {\n    columns = param_1;\n  }\n  if (storing_columns != '\\0') {\n    balance_columns = 1;\n  }\n  if (columns < 2) {\n    storing_columns = '\\0';\n  }\n  else {\n    if (use_col_separator == '\\0') {\n      col_sep_string = &DAT_0010d015;\n      col_sep_length = 1;\n      if (join_lines != '\\0') {\n        col_sep_string = &DAT_0010d017;\n      }\n      use_col_separator = '\\x01';\n    }\n    else if (((join_lines == '\\0') && (col_sep_length == 1)) && (*col_sep_string == '\\t')) {\n      col_sep_string = &DAT_0010d015;\n    }\n    truncate_lines = 1;\n    tabify_output = 1;\n  }\n  if (join_lines != '\\0') {\n    truncate_lines = 0;\n  }\n  if (numbered_lines != '\\0') {\n    line_count = start_line_num;\n    iVar4 = chars_per_number + 1;\n    if (number_separator == '\\t') {\n      uVar3 = (uint)((int)chars_per_number >> 0x1f) >> 0x1d;\n      iVar4 = chars_per_number + 8 + (uVar3 - (chars_per_number + uVar3 & 7));\n    }\n    number_width = iVar4;\n    if (parallel_files != '\\0') goto LAB_001038e8;\n  }\n  iVar4 = 0;\nLAB_001038e8:\n  lVar5 = (long)(columns + -1) * (long)col_sep_length;\n  iVar2 = (int)lVar5;\n  if (iVar2 != lVar5) {\n    iVar2 = 0x7fffffff;\n  }\n  if (SBORROW4(chars_per_line - iVar4,iVar2)) {\n    chars_per_column = 0;\n  }\n  else {\n    chars_per_column = ((chars_per_line - iVar4) - iVar2) / columns;\n    if (0 < chars_per_column) {\n      if (numbered_lines != '\\0') {\n        free(number_buff);\n        lVar5 = (long)(int)chars_per_number + 1;\n        if (chars_per_number < 0xc) {\n          lVar5 = 0xc;\n        }\n        number_buff = (void *)xmalloc(lVar5);\n      }\n      free(clump_buff);\n      iVar4 = 8;\n      if (7 < chars_per_input_tab) {\n        iVar4 = chars_per_input_tab;\n      }\n      clump_buff = (void *)xmalloc((long)iVar4);\n      return;\n    }\n  }\n  uVar1 = dcgettext(0,\"page width too narrow\",5);\n                    /* WARNING: Subroutine does not return */\n  error(1,0,uVar1);\n}\n\n", 
    "00115028": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint * __errno_location(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __errno_location@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "001027f0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nFILE * fdopen(int __fd,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = (FILE *)(*(code *)PTR_fdopen_00113f40)();\n  return pFVar1;\n}\n\n", 
    "001026d0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint fputs_unlocked(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_fputs_unlocked_00113eb0)();\n  return iVar1;\n}\n\n", 
    "0010bf30": "\nundefined8 * tzalloc(char *param_1)\n\n{\n  ulong uVar1;\n  size_t sVar2;\n  undefined8 *puVar3;\n  ulong uVar4;\n  \n  if (param_1 == (char *)0x0) {\n    puVar3 = (undefined8 *)malloc(0x80);\n    if (puVar3 != (undefined8 *)0x0) {\n      *puVar3 = 0;\n      *(undefined2 *)(puVar3 + 1) = 0;\n      return puVar3;\n    }\n  }\n  else {\n    sVar2 = strlen(param_1);\n    uVar1 = sVar2 + 1;\n    uVar4 = 0x76;\n    if (0x75 < uVar1) {\n      uVar4 = uVar1;\n    }\n    puVar3 = (undefined8 *)malloc(uVar4 + 0x11 & 0xfffffffffffffff8);\n    if (puVar3 != (undefined8 *)0x0) {\n      *puVar3 = 0;\n      *(undefined2 *)(puVar3 + 1) = 1;\n      extend_abbrs((long)puVar3 + 9,param_1,uVar1);\n    }\n  }\n  return puVar3;\n}\n\n", 
    "00115158": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint putchar_unlocked(int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* putchar_unlocked@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00105d40": "\nvoid usage(int param_1)\n\n{\n  FILE *pFVar1;\n  undefined8 uVar2;\n  undefined8 uVar3;\n  char *pcVar4;\n  \n  uVar2 = program_name;\n  if (param_1 == 0) {\n    uVar3 = dcgettext(0,\"Usage: %s [OPTION]... [FILE]...\\n\",5);\n    __printf_chk(1,uVar3,uVar2);\n    pFVar1 = stdout;\n    pcVar4 = (char *)dcgettext(0,\"Paginate or columnate FILE(s) for printing.\\n\",5);\n    fputs_unlocked(pcVar4,pFVar1);\n    emit_stdin_note();\n    emit_mandatory_arg_note();\n    pFVar1 = stdout;\n    pcVar4 = (char *)dcgettext(0,\n                               \"  +FIRST_PAGE[:LAST_PAGE], --pages=FIRST_PAGE[:LAST_PAGE]\\n                    begin [stop] printing with page FIRST_[LAST_]PAGE\\n  -COLUMN, --columns=COLUMN\\n                    output COLUMN columns and print columns down,\\n                    unless -a is used. Balance number of lines in the\\n                    columns on each page\\n\"\n                               ,5);\n    fputs_unlocked(pcVar4,pFVar1);\n    pFVar1 = stdout;\n    pcVar4 = (char *)dcgettext(0,\n                               \"  -a, --across      print columns across rather than down, used together\\n                    with -COLUMN\\n  -c, --show-control-chars\\n                    use hat notation (^G) and octal backslash notation\\n  -d, --double-space\\n                    double space the output\\n\"\n                               ,5);\n    fputs_unlocked(pcVar4,pFVar1);\n    pFVar1 = stdout;\n    pcVar4 = (char *)dcgettext(0,\n                               \"  -D, --date-format=FORMAT\\n                    use FORMAT for the header date\\n  -e[CHAR[WIDTH]], --expand-tabs[=CHAR[WIDTH]]\\n                    expand input CHARs (TABs) to tab WIDTH (8)\\n  -F, -f, --form-feed\\n                    use form feeds instead of newlines to separate pages\\n                    (by a 3-line page header with -F or a 5-line header\\n                    and trailer without -F)\\n\"\n                               ,5);\n    fputs_unlocked(pcVar4,pFVar1);\n    pFVar1 = stdout;\n    pcVar4 = (char *)dcgettext(0,\n                               \"  -h, --header=HEADER\\n                    use a centered HEADER instead of filename in page header,\\n                    -h \\\"\\\" prints a blank line, don\\'t use -h\\\"\\\"\\n  -i[CHAR[WIDTH]], --output-tabs[=CHAR[WIDTH]]\\n                    replace spaces with CHARs (TABs) to tab WIDTH (8)\\n  -J, --join-lines  merge full lines, turns off -W line truncation, no column\\n                    alignment, --sep-string[=STRING] sets separators\\n\"\n                               ,5);\n    fputs_unlocked(pcVar4,pFVar1);\n    pFVar1 = stdout;\n    pcVar4 = (char *)dcgettext(0,\n                               \"  -l, --length=PAGE_LENGTH\\n                    set the page length to PAGE_LENGTH (66) lines\\n                    (default number of lines of text 56, and with -F 63).\\n                    implies -t if PAGE_LENGTH <= 10\\n\"\n                               ,5);\n    fputs_unlocked(pcVar4,pFVar1);\n    pFVar1 = stdout;\n    pcVar4 = (char *)dcgettext(0,\n                               \"  -m, --merge       print all files in parallel, one in each column,\\n                    truncate lines, but join lines of full length with -J\\n\"\n                               ,5);\n    fputs_unlocked(pcVar4,pFVar1);\n    pFVar1 = stdout;\n    pcVar4 = (char *)dcgettext(0,\n                               \"  -n[SEP[DIGITS]], --number-lines[=SEP[DIGITS]]\\n                    number lines, use DIGITS (5) digits, then SEP (TAB),\\n                    default counting starts with 1st line of input file\\n  -N, --first-line-number=NUMBER\\n                    start counting with NUMBER at 1st line of first\\n                    page printed (see +FIRST_PAGE)\\n\"\n                               ,5);\n    fputs_unlocked(pcVar4,pFVar1);\n    pFVar1 = stdout;\n    pcVar4 = (char *)dcgettext(0,\n                               \"  -o, --indent=MARGIN\\n                    offset each line with MARGIN (zero) spaces, do not\\n                    affect -w or -W, MARGIN will be added to PAGE_WIDTH\\n  -r, --no-file-warnings\\n                    omit warning when a file cannot be opened\\n\"\n                               ,5);\n    fputs_unlocked(pcVar4,pFVar1);\n    pFVar1 = stdout;\n    pcVar4 = (char *)dcgettext(0,\n                               \"  -s[CHAR], --separator[=CHAR]\\n                    separate columns by a single character, default for CHAR\\n                    is the <TAB> character without -w and \\'no char\\' with -w.\\n                    -s[CHAR] turns off line truncation of all 3 column\\n                    options (-COLUMN|-a -COLUMN|-m) except -w is set\\n\"\n                               ,5);\n    fputs_unlocked(pcVar4,pFVar1);\n    pFVar1 = stdout;\n    pcVar4 = (char *)dcgettext(0,\n                               \"  -S[STRING], --sep-string[=STRING]\\n                    separate columns by STRING,\\n                    without -S: Default separator <TAB> with -J and <space>\\n                    otherwise (same as -S\\\" \\\"), no effect on column options\\n\"\n                               ,5);\n    fputs_unlocked(pcVar4,pFVar1);\n    pFVar1 = stdout;\n    pcVar4 = (char *)dcgettext(0,\n                               \"  -t, --omit-header  omit page headers and trailers;\\n                     implied if PAGE_LENGTH <= 10\\n\"\n                               ,5);\n    fputs_unlocked(pcVar4,pFVar1);\n    pFVar1 = stdout;\n    pcVar4 = (char *)dcgettext(0,\n                               \"  -T, --omit-pagination\\n                    omit page headers and trailers, eliminate any pagination\\n                    by form feeds set in input files\\n  -v, --show-nonprinting\\n                    use octal backslash notation\\n  -w, --width=PAGE_WIDTH\\n                    set page width to PAGE_WIDTH (72) characters for\\n                    multiple text-column output only, -s[char] turns off (72)\\n\"\n                               ,5);\n    fputs_unlocked(pcVar4,pFVar1);\n    pFVar1 = stdout;\n    pcVar4 = (char *)dcgettext(0,\n                               \"  -W, --page-width=PAGE_WIDTH\\n                    set page width to PAGE_WIDTH (72) characters always,\\n                    truncate lines, except -J option is set, no interference\\n                    with -S or -s\\n\"\n                               ,5);\n    fputs_unlocked(pcVar4,pFVar1);\n    pFVar1 = stdout;\n    pcVar4 = (char *)dcgettext(0,\"      --help     display this help and exit\\n\",5);\n    fputs_unlocked(pcVar4,pFVar1);\n    pFVar1 = stdout;\n    pcVar4 = (char *)dcgettext(0,\"      --version  output version information and exit\\n\",5);\n    fputs_unlocked(pcVar4,pFVar1);\n    emit_ancillary_info_constprop_0();\n  }\n  else {\n    uVar3 = dcgettext(0,\"Try \\'%s --help\\' for more information.\\n\",5);\n    __fprintf_chk(stderr,1,uVar3,uVar2);\n  }\n                    /* WARNING: Subroutine does not return */\n  exit(param_1);\n}\n\n", 
    "00115030": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint strncmp(char *__s1,char *__s2,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strncmp@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00115150": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memcpy@@GLIBC_2.14 */\n  halt_baddata();\n}\n\n", 
    "00102740": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid tzset(void)\n\n{\n  (*(code *)PTR_tzset_00113ee8)();\n  return;\n}\n\n", 
    "0010bec0": "\nvoid setenv_TZ(char *param_1)\n\n{\n  if (param_1 != (char *)0x0) {\n    setenv(\"TZ\",param_1,1);\n    return;\n  }\n  unsetenv(\"TZ\");\n  return;\n}\n\n", 
    "00102620": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nsize_t mbrtowc(wchar_t *__pwc,char *__s,size_t __n,mbstate_t *__p)\n\n{\n  size_t sVar1;\n  \n  sVar1 = (*(code *)PTR_mbrtowc_00113e58)();\n  return sVar1;\n}\n\n", 
    "0010add0": "\nundefined8 bkm_scale(long *param_1,int param_2)\n\n{\n  long lVar1;\n  long lVar2;\n  long lVar3;\n  \n  lVar3 = -0x8000000000000000;\n  lVar2 = (long)param_2;\n  lVar1 = *param_1;\n  if ((SUB168((SEXT816(-0x8000000000000000) & (undefined  [16])0xffffffffffffffff |\n              ZEXT816(0x8000000000000000)) / SEXT816(lVar2),0) <= lVar1) &&\n     (lVar3 = 0x7fffffffffffffff,\n     lVar1 <= SUB168((SEXT816(0x7fffffffffffffff) & (undefined  [16])0xffffffffffffffff |\n                     ZEXT816(0x7fffffffffffffff)) / SEXT816(lVar2),0))) {\n    *param_1 = lVar2 * lVar1;\n    return 0;\n  }\n  *param_1 = lVar3;\n  return 1;\n}\n\n", 
    "00102500": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = (int *)(*(code *)PTR___errno_location_00113dc8)();\n  return piVar1;\n}\n\n", 
    "001150e8": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint gettimeofday(timeval *__tv,__timezone_ptr_t __tz)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* gettimeofday@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00102860": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = (FILE *)(*(code *)PTR_fopen_00113f78)();\n  return pFVar1;\n}\n\n", 
    "00106660": "\nint iso_week_days(int param_1,int param_2)\n\n{\n  int iVar1;\n  \n  iVar1 = (param_1 - param_2) + 0x17e;\n  return (param_1 - iVar1) + 3 + (iVar1 / 7) * 7;\n}\n\n", 
    "00105690": "\nundefined8 print_page(void)\n\n{\n  char cVar1;\n  int iVar2;\n  int iVar3;\n  int iVar4;\n  long lVar5;\n  long lVar6;\n  byte bVar7;\n  byte bVar8;\n  \n  init_page();\n  iVar2 = cols_ready_to_print();\n  if (iVar2 == 0) {\n    return 0;\n  }\n  if (extremities != '\\0') {\n    print_a_header = 1;\n  }\n  pad_vertically = 0;\n  iVar2 = lines_per_body;\n  if (double_space != '\\0') {\n    iVar2 = lines_per_body * 2;\n  }\n  bVar8 = 0;\n  if (iVar2 < 1) {\n    if ((iVar2 == 0) && (0 < columns)) goto LAB_00105870;\n  }\n  else {\n    do {\n      iVar3 = cols_ready_to_print();\n      pad_vertically = bVar8;\n      if (iVar3 == 0) goto LAB_00105897;\n      output_position = 0;\n      pad_vertically = 0;\n      spaces_not_printed = 0;\n      separators_not_printed = 0;\n      align_empty_cols = 0;\n      empty_line = '\\x01';\n      if (0 < columns) {\n        iVar3 = 1;\n        lVar6 = column_vector;\n        do {\n          input_position = 0;\n          if ((*(int *)(lVar6 + 0x30) < 1) && (*(int *)(lVar6 + 0x10) != 1)) {\n            if (parallel_files != '\\0') {\n              if (empty_line == '\\0') {\nLAB_00105918:\n                align_column(lVar6);\n              }\n              else {\nLAB_00105810:\n                align_empty_cols = 1;\n              }\n            }\n          }\n          else {\n            padding_not_printed = *(undefined4 *)(lVar6 + 0x34);\n            FF_only = '\\0';\n            cVar1 = (**(code **)(lVar6 + 0x18))(lVar6);\n            if (cVar1 == '\\0') {\n              read_rest_of_line(lVar6);\n            }\n            bVar7 = pad_vertically;\n            iVar4 = *(int *)(lVar6 + 0x30) + -1;\n            bVar8 = bVar8 | pad_vertically;\n            *(int *)(lVar6 + 0x30) = iVar4;\n            if ((iVar4 < 1) && (iVar4 = cols_ready_to_print(), iVar4 == 0)) {\n              if (bVar7 == 0) goto LAB_00105836;\n              goto LAB_00105931;\n            }\n            if ((parallel_files != '\\0') && (iVar4 = *(int *)(lVar6 + 0x10), iVar4 != 0)) {\n              if (empty_line != '\\0') goto LAB_00105810;\n              if ((iVar4 == 3) || ((iVar4 == 2 && (FF_only != '\\0')))) goto LAB_00105918;\n            }\n          }\n          if (use_col_separator != '\\0') {\n            separators_not_printed = separators_not_printed + 1;\n          }\n          iVar3 = iVar3 + 1;\n          lVar6 = lVar6 + 0x40;\n        } while (iVar3 <= columns);\n        if (pad_vertically != 0) {\nLAB_00105931:\n          iVar2 = iVar2 + -1;\n          putchar_unlocked(10);\n        }\n      }\n      iVar3 = cols_ready_to_print();\n      if (iVar3 == 0) {\nLAB_00105836:\n        if (extremities == '\\0') break;\n      }\n      if ((double_space != '\\0') && (bVar8 != 0)) {\n        iVar2 = iVar2 + -1;\n        putchar_unlocked(10);\n      }\n    } while (0 < iVar2);\n    pad_vertically = bVar8;\n    if ((iVar2 == 0) && (bVar8 = pad_vertically, 0 < columns)) {\nLAB_00105870:\n      pad_vertically = bVar8;\n      lVar5 = ((ulong)(columns - 1) + 1) * 0x40 + column_vector;\n      lVar6 = column_vector;\n      do {\n        if (*(int *)(lVar6 + 0x10) == 0) {\n          *(undefined *)(lVar6 + 0x39) = 1;\n        }\n        lVar6 = lVar6 + 0x40;\n      } while (lVar6 != lVar5);\n      iVar2 = 0;\n    }\nLAB_00105897:\n    if ((pad_vertically != 0) && (extremities != '\\0')) {\n      pad_down(iVar2 + 5);\n      goto LAB_001058c6;\n    }\n  }\n  if ((keep_FF != '\\0') && (print_a_FF != '\\0')) {\n    putchar_unlocked(0xc);\n    print_a_FF = '\\0';\n  }\nLAB_001058c6:\n  page_number = page_number + 1;\n  if (last_page_number < page_number) {\n    return 0;\n  }\n  reset_status();\n  return 1;\n}\n\n", 
    "00104480": "\nundefined8 print_stored(long param_1)\n\n{\n  int iVar1;\n  long lVar2;\n  long lVar3;\n  long lVar4;\n  long lVar5;\n  char *pcVar6;\n  long lVar7;\n  \n  lVar2 = buff;\n  lVar7 = (long)*(int *)(param_1 + 0x28);\n  pad_vertically = 1;\n  *(int *)(param_1 + 0x28) = *(int *)(param_1 + 0x28) + 1;\n  iVar1 = *(int *)(line_vector + 4 + lVar7 * 4);\n  pcVar6 = (char *)(*(int *)(line_vector + lVar7 * 4) + lVar2);\n  if (print_a_header != '\\0') {\n    print_header();\n  }\n  lVar3 = column_vector;\n  if (*(int *)(param_1 + 0x10) == 1) {\n    if (0 < columns) {\n      lVar5 = ((ulong)(columns - 1) + 1) * 0x40 + column_vector;\n      lVar4 = column_vector;\n      do {\n        *(undefined4 *)(lVar4 + 0x10) = 2;\n        lVar4 = lVar4 + 0x40;\n      } while (lVar4 != lVar5);\n    }\n    if (*(int *)(lVar3 + 0x30) < 1) {\n      if (extremities != '\\0') {\n        return 1;\n      }\n      pad_vertically = 0;\n      return 1;\n    }\n  }\n  if (col_sep_length < padding_not_printed) {\n    pad_across_to(padding_not_printed - col_sep_length);\n    padding_not_printed = 0;\n  }\n  if (use_col_separator != '\\0') {\n    print_sep_string();\n  }\n  for (; pcVar6 != (char *)(lVar2 + iVar1); pcVar6 = pcVar6 + 1) {\n    print_char((int)*pcVar6);\n  }\n  if ((spaces_not_printed == 0) &&\n     (output_position = *(int *)(end_vector + lVar7 * 4) + *(int *)(param_1 + 0x34),\n     *(int *)(param_1 + 0x34) - col_sep_length == chars_per_margin)) {\n    output_position = output_position - col_sep_length;\n    return 1;\n  }\n  return 1;\n}\n\n", 
    "001150e0": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* lseek@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "001026c0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint memcmp(void *__s1,void *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_memcmp_00113ea8)();\n  return iVar1;\n}\n\n", 
    "0010be30": "\nuint isdst_differ(uint param_1,uint param_2)\n\n{\n  uint uVar1;\n  \n  uVar1 = 0;\n  if ((param_1 == 0) != (param_2 == 0)) {\n    uVar1 = (~param_1 & ~param_2) >> 0x1f;\n  }\n  return uVar1;\n}\n\n", 
    "0010c4a0": "\nbool c_isdigit(int param_1)\n\n{\n  return param_1 - 0x30U < 10;\n}\n\n", 
    "00115038": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid _ITM_deregisterTMCloneTable(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "001025a0": "\nvoid textdomain(void)\n\n{\n  (*(code *)PTR_textdomain_00113e18)();\n  return;\n}\n\n", 
    "0010ac20": "\nvoid xstrdup(char *param_1)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(param_1);\n  xmemdup(param_1,sVar1 + 1);\n  return;\n}\n\n", 
    "0010a3e0": "\nundefined8\nversion_etc_arn(FILE *param_1,long param_2,undefined8 param_3,undefined8 param_4,undefined8 *param_5\n               ,undefined8 param_6)\n\n{\n  undefined8 uVar1;\n  char *pcVar2;\n  undefined8 uVar3;\n  undefined8 uVar4;\n  undefined8 uVar5;\n  undefined8 uVar6;\n  undefined8 local_60;\n  undefined8 local_58;\n  undefined8 local_50;\n  undefined8 local_48;\n  \n  if (param_2 == 0) {\n    __fprintf_chk(param_1,1,\"%s %s\\n\",param_3,param_4);\n  }\n  else {\n    __fprintf_chk(param_1,1,\"%s (%s) %s\\n\",param_2,param_3,param_4);\n  }\n  uVar1 = dcgettext(0,&DAT_0010f19b,5);\n  __fprintf_chk(param_1,1,\"Copyright %s %d Free Software Foundation, Inc.\",uVar1,0x7e2);\n  pcVar2 = (char *)dcgettext(0,\n                             \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\"\n                             ,5);\n  fputs_unlocked(pcVar2,param_1);\n  switch(param_6) {\n  case 0:\n                    /* WARNING: Subroutine does not return */\n    abort();\n  case 1:\n    uVar1 = *param_5;\n    uVar4 = dcgettext(0,\"Written by %s.\\n\",5);\n    uVar1 = __fprintf_chk(param_1,1,uVar4,uVar1);\n    return uVar1;\n  case 2:\n    uVar1 = param_5[1];\n    uVar4 = *param_5;\n    uVar5 = dcgettext(0,\"Written by %s and %s.\\n\",5);\n    uVar1 = __fprintf_chk(param_1,1,uVar5,uVar4,uVar1);\n    return uVar1;\n  case 3:\n    uVar1 = param_5[2];\n    uVar4 = param_5[1];\n    uVar5 = *param_5;\n    uVar6 = dcgettext(0,\"Written by %s, %s, and %s.\\n\",5);\n    uVar1 = __fprintf_chk(param_1,1,uVar6,uVar5,uVar4,uVar1);\n    return uVar1;\n  case 4:\n    uVar1 = param_5[3];\n    uVar4 = param_5[2];\n    uVar5 = param_5[1];\n    uVar6 = *param_5;\n    uVar3 = dcgettext(0,\"Written by %s, %s, %s,\\nand %s.\\n\",5);\n    goto LAB_0010a6a9;\n  case 5:\n    uVar1 = param_5[3];\n    uVar4 = param_5[2];\n    uVar5 = param_5[1];\n    uVar6 = *param_5;\n    uVar3 = dcgettext(0,\"Written by %s, %s, %s,\\n%s, and %s.\\n\",5);\nLAB_0010a6a9:\n    __fprintf_chk(param_1,1,uVar3,uVar6,uVar5,uVar4);\n    return uVar1;\n  case 6:\n    local_58 = param_5[5];\n    local_60 = param_5[4];\n    uVar1 = param_5[3];\n    uVar4 = param_5[2];\n    uVar5 = param_5[1];\n    uVar6 = *param_5;\n    uVar3 = dcgettext(0,\"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\",5);\n    goto LAB_0010a74b;\n  case 7:\n    local_58 = param_5[5];\n    local_60 = param_5[4];\n    uVar1 = param_5[3];\n    uVar4 = param_5[2];\n    uVar5 = param_5[1];\n    uVar6 = *param_5;\n    uVar3 = dcgettext(0,\"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\",5);\nLAB_0010a74b:\n    uVar1 = __fprintf_chk(param_1,1,uVar3,uVar6,uVar5,uVar4,uVar1,local_60,local_58);\n    return uVar1;\n  case 8:\n    local_48 = param_5[7];\n    local_50 = param_5[6];\n    local_58 = param_5[5];\n    local_60 = param_5[4];\n    uVar1 = param_5[3];\n    uVar4 = param_5[2];\n    uVar5 = param_5[1];\n    uVar6 = *param_5;\n    uVar3 = dcgettext(0,\"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\",5);\n    goto LAB_0010a4fd;\n  case 9:\n    local_48 = param_5[7];\n    pcVar2 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n    local_50 = param_5[6];\n    local_58 = param_5[5];\n    local_60 = param_5[4];\n    uVar1 = param_5[3];\n    uVar4 = param_5[2];\n    uVar5 = param_5[1];\n    uVar6 = *param_5;\n    break;\n  default:\n    local_48 = param_5[7];\n    pcVar2 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n    local_50 = param_5[6];\n    local_58 = param_5[5];\n    local_60 = param_5[4];\n    uVar1 = param_5[3];\n    uVar4 = param_5[2];\n    uVar5 = param_5[1];\n    uVar6 = *param_5;\n  }\n  uVar3 = dcgettext(0,pcVar2,5);\nLAB_0010a4fd:\n  uVar1 = __fprintf_chk(param_1,1,uVar3,uVar6,uVar5,uVar4,uVar1,local_60,local_58,local_50,local_48)\n  ;\n  return uVar1;\n}\n\n", 
    "0010c6e0": "\nvoid __libc_csu_init(EVP_PKEY_CTX *param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  long lVar1;\n  \n  _init(param_1);\n  lVar1 = 0;\n  do {\n    (*(code *)(&__frame_dummy_init_array_entry)[lVar1])((ulong)param_1 & 0xffffffff,param_2,param_3)\n    ;\n    lVar1 = lVar1 + 1;\n  } while (lVar1 != 1);\n  return;\n}\n\n", 
    "00109af0": "\nundefined1 *\nquotearg_n_options(int param_1,undefined8 param_2,undefined8 param_3,undefined4 *param_4)\n\n{\n  long lVar1;\n  int iVar2;\n  uint uVar3;\n  undefined4 uVar4;\n  ulong uVar5;\n  int *piVar6;\n  undefined1 (*pauVar7) [16];\n  ulong uVar8;\n  undefined1 *__ptr;\n  \n  piVar6 = __errno_location();\n  iVar2 = *piVar6;\n  if (param_1 < 0) {\n                    /* WARNING: Subroutine does not return */\n    abort();\n  }\n  pauVar7 = (undefined1 (*) [16])slotvec;\n  if (nslots <= param_1) {\n    if (param_1 == 0x7fffffff) {\n                    /* WARNING: Subroutine does not return */\n      xalloc_die();\n    }\n    if (slotvec == slotvec0) {\n      pauVar7 = (undefined1 (*) [16])xrealloc(0);\n      slotvec = (undefined *)pauVar7;\n      *pauVar7 = slotvec0;\n    }\n    else {\n      pauVar7 = (undefined1 (*) [16])xrealloc(slotvec);\n      slotvec = (undefined *)pauVar7;\n    }\n    memset(pauVar7[nslots],0,(long)((param_1 + 1) - nslots) << 4);\n    nslots = param_1 + 1;\n  }\n  uVar3 = param_4[1];\n  pauVar7 = pauVar7[param_1];\n  uVar5 = *(ulong *)*pauVar7;\n  __ptr = *(undefined1 **)(*pauVar7 + 8);\n  uVar8 = quotearg_buffer_restyled\n                    (__ptr,uVar5,param_2,param_3,*param_4,uVar3 | 1,param_4 + 2,\n                     *(undefined8 *)(param_4 + 10),*(undefined8 *)(param_4 + 0xc));\n  if (uVar5 <= uVar8) {\n    lVar1 = uVar8 + 1;\n    *(long *)*pauVar7 = lVar1;\n    if (__ptr != slot0) {\n      free(__ptr);\n    }\n    __ptr = (undefined1 *)xcharalloc(lVar1);\n    uVar4 = *param_4;\n    *(undefined1 **)(*pauVar7 + 8) = __ptr;\n    quotearg_buffer_restyled\n              (__ptr,lVar1,param_2,param_3,uVar4,uVar3 | 1,param_4 + 2,*(undefined8 *)(param_4 + 10)\n               ,*(undefined8 *)(param_4 + 0xc));\n  }\n  *piVar6 = iVar2;\n  return __ptr;\n}\n\n", 
    "00115168": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint fileno(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fileno@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "001027e0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid * realloc(void *__ptr,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = (void *)(*(code *)PTR_realloc_00113f38)();\n  return pvVar1;\n}\n\n", 
    "00115048": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid _exit(int __status)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* _exit@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00115160": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid tzset(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* tzset@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00115040": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\ntm * localtime_r(time_t *__timer,tm *__tp)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* localtime_r@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00102850": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint fseeko(FILE *__stream,__off_t __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_fseeko_00113f70)();\n  return iVar1;\n}\n\n", 
    "0010a330": "\nvoid quotearg_n_custom(void)\n\n{\n  quotearg_n_custom_mem();\n  return;\n}\n\n", 
    "0010c630": "\nulong close_stream(FILE *param_1)\n\n{\n  int iVar1;\n  long lVar2;\n  ulong uVar3;\n  int *piVar4;\n  \n  lVar2 = __fpending();\n  iVar1 = ferror_unlocked(param_1);\n  uVar3 = rpl_fclose(param_1);\n  if (iVar1 == 0) {\n    if ((int)uVar3 == 0) {\n      return uVar3;\n    }\n    if (lVar2 == 0) {\n      piVar4 = __errno_location();\n      return (ulong)-(uint)(*piVar4 != 9);\n    }\n  }\n  else if ((int)uVar3 == 0) {\n    piVar4 = __errno_location();\n    *piVar4 = 0;\n    return 0xffffffff;\n  }\n  return 0xffffffff;\n}\n\n", 
    "00102730": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint putchar_unlocked(int __c)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_putchar_unlocked_00113ee0)();\n  return iVar1;\n}\n\n", 
    "0010c750": "\nvoid __libc_csu_fini(void)\n\n{\n  return;\n}\n\n", 
    "00102610": "\nvoid getopt_long(void)\n\n{\n  (*(code *)PTR_getopt_long_00113e50)();\n  return;\n}\n\n", 
    "00102890": "\nvoid __cxa_atexit(void)\n\n{\n  (*(code *)PTR___cxa_atexit_00113f90)();\n  return;\n}\n\n", 
    "00102770": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = (void *)(*(code *)PTR_malloc_00113f00)();\n  return pvVar1;\n}\n\n", 
    "00102650": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\ntm * gmtime_r(time_t *__timer,tm *__tp)\n\n{\n  tm *ptVar1;\n  \n  ptVar1 = (tm *)(*(code *)PTR_gmtime_r_00113e70)();\n  return ptVar1;\n}\n\n", 
    "0010bea0": "\nvoid extend_abbrs(void *param_1,void *param_2,size_t param_3)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(param_1,param_2,param_3);\n  *(undefined *)((long)pvVar1 + param_3) = 0;\n  return;\n}\n\n", 
    "00102530": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid _exit(int __status)\n\n{\n  (*(code *)PTR__exit_00113de0)();\n  return;\n}\n\n", 
    "00109d70": "\nvoid set_custom_quoting(undefined1 *param_1,long param_2,long param_3)\n\n{\n  if ((undefined4 *)param_1 == (undefined4 *)0x0) {\n    param_1 = default_quoting_options;\n  }\n  *(undefined4 *)param_1 = 10;\n  if ((param_2 != 0) && (param_3 != 0)) {\n    *(long *)((long)param_1 + 0x28) = param_2;\n    *(long *)((long)param_1 + 0x30) = param_3;\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n", 
    "00106210": "\nFILE * fopen_safer(char *param_1,char *param_2)\n\n{\n  uint uVar1;\n  int iVar2;\n  int iVar3;\n  FILE *__stream;\n  FILE *pFVar4;\n  int *piVar5;\n  \n  __stream = fopen(param_1,param_2);\n  pFVar4 = __stream;\n  if ((__stream != (FILE *)0x0) && (uVar1 = fileno(__stream), uVar1 < 3)) {\n    iVar2 = dup_safer(uVar1);\n    if (iVar2 < 0) {\n      piVar5 = __errno_location();\n      pFVar4 = (FILE *)0x0;\n      iVar2 = *piVar5;\n      rpl_fclose(__stream);\n      *piVar5 = iVar2;\n    }\n    else {\n      iVar3 = rpl_fclose(__stream);\n      if ((iVar3 == 0) && (pFVar4 = fdopen(iVar2,param_2), pFVar4 != (FILE *)0x0)) {\n        return pFVar4;\n      }\n      piVar5 = __errno_location();\n      iVar3 = *piVar5;\n      close(iVar2);\n      *piVar5 = iVar3;\n      pFVar4 = (FILE *)0x0;\n    }\n  }\n  return pFVar4;\n}\n\n", 
    "001151d0": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\ntime_t timegm(tm *__tp)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* timegm@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "001150b0": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid __stack_chk_fail(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __stack_chk_fail@@GLIBC_2.4 */\n  halt_baddata();\n}\n\n", 
    "00108750": "\nundefined8\nstrcaseeq0_constprop_0\n          (byte *param_1,undefined8 param_2,byte param_3,char param_4,char param_5,char param_6,\n          char param_7,char param_8,char param_9)\n\n{\n  char cVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  \n  cVar1 = c_isupper((int)(char)param_3);\n  bVar2 = *param_1;\n  if (cVar1 != '\\0') {\n    bVar2 = bVar2 & 0xdf;\n  }\n  uVar3 = 0;\n  if (bVar2 == param_3) {\n    uVar3 = strcaseeq1(param_1,param_2,(int)param_4,(int)param_5,(int)param_6,(int)param_7,\n                       (int)param_8,(int)param_9,0,0);\n  }\n  return uVar3;\n}\n\n", 
    "0010a3b0": "\nvoid quote(undefined8 param_1)\n\n{\n  quote_n(0,param_1);\n  return;\n}\n\n", 
    "00115248": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nushort ** __ctype_b_loc(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __ctype_b_loc@@GLIBC_2.3 */\n  halt_baddata();\n}\n\n", 
    "00115128": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint ferror_unlocked(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ferror_unlocked@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00108070": "\nvoid nstrftime(void)\n\n{\n  long lVar1;\n  long in_FS_OFFSET;\n  \n  lVar1 = *(long *)(in_FS_OFFSET + 0x28);\n  __strftime_internal();\n  if (lVar1 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "00115008": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nchar * getenv(char *__name)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getenv@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "001026f0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid * calloc(size_t __nmemb,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = (void *)(*(code *)PTR_calloc_00113ec0)();\n  return pvVar1;\n}\n\n", 
    "001025d0": "\nvoid dcgettext(void)\n\n{\n  (*(code *)PTR_dcgettext_00113e30)();\n  return;\n}\n\n", 
    "0010a3a0": "\nvoid quote_n(undefined8 param_1,undefined8 param_2)\n\n{\n  quote_n_mem(param_1,param_2,0xffffffffffffffff);\n  return;\n}\n\n", 
    "0010c6a0": "\nchar * locale_charset(void)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = nl_langinfo(0xe);\n  if (pcVar1 != (char *)0x0) {\n    if (*pcVar1 == '\\0') {\n      pcVar1 = \"ASCII\";\n    }\n    return pcVar1;\n  }\n  return \"ASCII\";\n}\n\n", 
    "001024b0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\n__int32_t ** __ctype_toupper_loc(void)\n\n{\n  __int32_t **pp_Var1;\n  \n  pp_Var1 = (__int32_t **)(*(code *)PTR___ctype_toupper_loc_00113da0)();\n  return pp_Var1;\n}\n\n", 
    "0010ae20": "\nuint bkm_scale_by_power(undefined8 param_1,uint param_2,int param_3)\n\n{\n  uint uVar1;\n  uint uVar2;\n  ulong uVar3;\n  \n  uVar3 = (ulong)param_2;\n  param_3 = param_3 + -1;\n  uVar2 = 0;\n  do {\n    uVar1 = bkm_scale(param_1,uVar3 & 0xffffffff);\n    param_3 = param_3 + -1;\n    uVar2 = uVar2 | uVar1;\n  } while (param_3 != -1);\n  return uVar2;\n}\n\n", 
    "0010c160": "\nlong set_tz(long param_1)\n\n{\n  char cVar1;\n  int iVar2;\n  char *__s2;\n  long lVar3;\n  int *piVar4;\n  long lVar5;\n  \n  __s2 = (char *)getenv_TZ();\n  if (__s2 == (char *)0x0) {\n    if (*(char *)(param_1 + 8) == '\\0') {\n      return 1;\n    }\n  }\n  else if (*(char *)(param_1 + 8) != '\\0') {\n    iVar2 = strcmp((char *)(param_1 + 9),__s2);\n    if (iVar2 == 0) {\n      return 1;\n    }\n  }\n  lVar3 = tzalloc(__s2);\n  lVar5 = lVar3;\n  if (lVar3 != 0) {\n    cVar1 = change_env(param_1);\n    if (cVar1 == '\\0') {\n      piVar4 = __errno_location();\n      lVar5 = 0;\n      iVar2 = *piVar4;\n      tzfree(lVar3);\n      *piVar4 = iVar2;\n    }\n  }\n  return lVar5;\n}\n\n", 
    "00115250": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid __sprintf_chk(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __sprintf_chk@@GLIBC_2.3.4 */\n  halt_baddata();\n}\n\n", 
    "00115130": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid * calloc(size_t __nmemb,size_t __size)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* calloc@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00115010": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid free(void *__ptr)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* free@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "001062b0": "\nvoid gettime(timespec *param_1)\n\n{\n  int iVar1;\n  long in_FS_OFFSET;\n  timeval local_28;\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  iVar1 = clock_gettime(0,param_1);\n  if (iVar1 != 0) {\n    gettimeofday(&local_28,(__timezone_ptr_t)0x0);\n    param_1->tv_sec = local_28.tv_sec;\n    param_1->tv_nsec = local_28.tv_usec * 1000;\n  }\n  if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "00102520": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\ntm * localtime_r(time_t *__timer,tm *__tp)\n\n{\n  tm *ptVar1;\n  \n  ptVar1 = (tm *)(*(code *)PTR_localtime_r_00113dd8)();\n  return ptVar1;\n}\n\n", 
    "00103610": "\nvoid store_char(undefined param_1)\n\n{\n  if (buff_current < buff_allocated) {\n    *(undefined *)(buff + (ulong)buff_current) = param_1;\n    buff_current = buff_current + 1;\n    return;\n  }\n  buff = x2realloc(buff,&buff_allocated);\n  *(undefined *)(buff + (ulong)buff_current) = param_1;\n  buff_current = buff_current + 1;\n  return;\n}\n\n", 
    "001151d8": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nsize_t strftime(char *__s,size_t __maxsize,char *__format,tm *__tp)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strftime@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "001150b8": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid getopt_long(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getopt_long@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00102880": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint unsetenv(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_unsetenv_00113f88)();\n  return iVar1;\n}\n\n", 
    "00102760": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint wcwidth(wchar_t __c)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_wcwidth_00113ef8)();\n  return iVar1;\n}\n\n", 
    "00102640": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = (char *)(*(code *)PTR_strrchr_00113e68)();\n  return pcVar1;\n}\n\n", 
    "0010beb0": "\nvoid getenv_TZ(void)\n\n{\n  getenv(\"TZ\");\n  return;\n}\n\n", 
    "001151e8": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint fseeko(FILE *__stream,__off_t __off,int __whence)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fseeko@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00106320": "\nbool hard_locale(int param_1)\n\n{\n  byte *pbVar1;\n  long lVar2;\n  byte *pbVar3;\n  bool bVar4;\n  bool bVar5;\n  byte bVar6;\n  \n  bVar6 = 0;\n  pbVar1 = (byte *)setlocale(param_1,(char *)0x0);\n  bVar4 = true;\n  if (pbVar1 != (byte *)0x0) {\n    bVar4 = *pbVar1 < 0x43;\n    bVar5 = *pbVar1 == 0x43;\n    if (bVar5) {\n      bVar4 = false;\n      bVar5 = pbVar1[1] == 0;\n      if (bVar5) {\n        return false;\n      }\n    }\n    lVar2 = 6;\n    pbVar3 = (byte *)\"POSIX\";\n    do {\n      if (lVar2 == 0) break;\n      lVar2 = lVar2 + -1;\n      bVar4 = *pbVar1 < *pbVar3;\n      bVar5 = *pbVar1 == *pbVar3;\n      pbVar1 = pbVar1 + (ulong)bVar6 * -2 + 1;\n      pbVar3 = pbVar3 + (ulong)bVar6 * -2 + 1;\n    } while (bVar5);\n    bVar4 = (!bVar4 && !bVar5) != bVar4;\n  }\n  return bVar4;\n}\n\n", 
    "001150c0": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nsize_t mbrtowc(wchar_t *__pwc,char *__s,size_t __n,mbstate_t *__p)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* mbrtowc@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "001151e0": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid error(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* error@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "001024a0": "\nvoid __cxa_finalize(void)\n\n{\n  (*(code *)PTR___cxa_finalize_00113ff8)();\n  return;\n}\n\n", 
    "0010a3c0": "\nvoid dup_safer(undefined8 param_1)\n\n{\n  rpl_fcntl(param_1,0,3);\n  return;\n}\n\n", 
    "0010b5d0": "\nvoid xstrtol_error(uint param_1,int param_2,undefined param_3,long param_4,undefined8 param_5,\n                  undefined4 param_6)\n\n{\n  undefined8 uVar1;\n  char *pcVar2;\n  undefined *puVar3;\n  undefined *puVar4;\n  long in_FS_OFFSET;\n  undefined local_32;\n  undefined local_31;\n  undefined8 local_30;\n  \n  local_30 = *(undefined8 *)(in_FS_OFFSET + 0x28);\n  if (param_1 < 4) {\n    if (param_1 < 2) {\n      if (param_1 != 1) {\n                    /* WARNING: Subroutine does not return */\n        xstrtol_error_cold();\n      }\n      pcVar2 = \"%s%s argument \\'%s\\' too large\";\n    }\n    else {\n      pcVar2 = \"invalid suffix in %s%s argument \\'%s\\'\";\n    }\n  }\n  else {\n    if (param_1 != 4) {\n                    /* WARNING: Subroutine does not return */\n      abort();\n    }\n    pcVar2 = \"invalid %s%s argument \\'%s\\'\";\n  }\n  if (param_2 < 0) {\n    puVar4 = &local_32;\n    local_31 = 0;\n    puVar3 = &DAT_0010f8dd + -(long)param_2;\n    local_32 = param_3;\n  }\n  else {\n    puVar3 = &DAT_0010f8dd;\n    puVar4 = *(undefined **)(param_4 + (long)param_2 * 0x20);\n  }\n  uVar1 = dcgettext(0,pcVar2,5);\n                    /* WARNING: Subroutine does not return */\n  error(param_6,0,uVar1,puVar3,puVar4,param_5);\n}\n\n", 
    "00115258": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid __cxa_finalize(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __cxa_finalize@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00115138": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint strcmp(char *__s1,char *__s2)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcmp@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00115018": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nintmax_t strtoimax(char *__nptr,char **__endptr,int __base)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strtoimax@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00108180": "\nint * quoting_options_from_style(int *param_1,int param_2)\n\n{\n  if (param_2 != 10) {\n    *param_1 = param_2;\n    param_1[1] = 0;\n    *(undefined8 *)(param_1 + 2) = 0;\n    *(undefined8 *)(param_1 + 4) = 0;\n    *(undefined8 *)(param_1 + 6) = 0;\n    *(undefined8 *)(param_1 + 8) = 0;\n    *(undefined8 *)(param_1 + 10) = 0;\n    *(undefined8 *)(param_1 + 0xc) = 0;\n    return param_1;\n  }\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n", 
    "001026e0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint ferror_unlocked(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_ferror_unlocked_00113eb8)();\n  return iVar1;\n}\n\n", 
    "001025c0": "\nvoid bindtextdomain(void)\n\n{\n  (*(code *)PTR_bindtextdomain_00113e28)();\n  return;\n}\n\n", 
    "00115140": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid __gmon_start__(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "00115020": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid abort(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* abort@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "001053f0": "\nvoid store_columns(void)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined4 *puVar3;\n  char cVar4;\n  long lVar5;\n  ulong uVar6;\n  long lVar7;\n  int iVar8;\n  long lVar9;\n  uint uVar10;\n  int iVar11;\n  int iVar12;\n  int iVar13;\n  \n  lVar9 = column_vector;\n  buff_current = 0;\n  if (balance_columns == '\\0') {\n    iVar13 = columns + -1;\n    if (columns + -1 < 1) {\n      *line_vector = 0;\n      return;\n    }\n  }\n  else {\n    iVar13 = columns;\n    if (columns < 1) {\n      uVar10 = 0;\n      *line_vector = 0;\n      goto LAB_0010556d;\n    }\n  }\n  lVar7 = ((ulong)(iVar13 - 1) + 1) * 0x40 + column_vector;\n  lVar5 = column_vector;\n  do {\n    *(undefined4 *)(lVar5 + 0x2c) = 0;\n    lVar5 = lVar5 + 0x40;\n  } while (lVar7 != lVar5);\n  iVar11 = 0;\n  uVar10 = 0;\n  iVar12 = 1;\n  do {\n    iVar8 = lines_per_body;\n    if (files_ready_to_read == 0) break;\n    *(uint *)(lVar9 + 0x28) = uVar10;\n    iVar1 = iVar8;\n    while (iVar1 != 0) {\n      if (*(int *)(lVar9 + 0x10) == 0) {\n        input_position = 0;\n        cVar4 = read_line(lVar9);\n        if (cVar4 == '\\0') {\n          read_rest_of_line(lVar9);\n        }\n        iVar1 = buff_current;\n        puVar3 = line_vector;\n        if ((*(int *)(lVar9 + 0x10) == 0) || (buff_current != iVar11)) {\n          uVar6 = (ulong)uVar10;\n          *(int *)(lVar9 + 0x2c) = *(int *)(lVar9 + 0x2c) + 1;\n          uVar2 = input_position;\n          uVar10 = uVar10 + 1;\n          puVar3[uVar6] = iVar11;\n          *(undefined4 *)(end_vector + uVar6 * 4) = uVar2;\n          iVar11 = iVar1;\n        }\n      }\n      if (iVar8 == 1) break;\n      iVar8 = iVar8 + -1;\n      iVar1 = files_ready_to_read;\n    }\n    iVar12 = iVar12 + 1;\n    lVar9 = lVar9 + 0x40;\n  } while (iVar12 <= iVar13);\n  cVar4 = balance_columns;\n  line_vector[uVar10] = iVar11;\n  if (cVar4 == '\\0') {\n    return;\n  }\nLAB_0010556d:\n  balance(uVar10);\n  return;\n}\n\n", 
    "00102630": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = (char *)(*(code *)PTR_strchr_00113e60)();\n  return pcVar1;\n}\n\n", 
    "0010bfd0": "\nundefined8 save_abbr(long *param_1,char *param_2)\n\n{\n  char *__s2;\n  long *plVar1;\n  int iVar2;\n  size_t sVar3;\n  ulong uVar4;\n  int *piVar5;\n  long lVar6;\n  char *__s1;\n  \n  __s2 = *(char **)(param_2 + 0x30);\n  if (__s2 == (char *)0x0) {\n    return 1;\n  }\n  if ((__s2 < param_2) || (param_2 + 0x38 <= __s2)) {\n    __s1 = (char *)((long)param_1 + 9);\n    if (*__s2 != '\\0') {\n      do {\n        iVar2 = strcmp(__s1,__s2);\n        while( true ) {\n          if (iVar2 == 0) goto LAB_0010c068;\n          if ((*__s1 == '\\0') &&\n             (((char *)((long)param_1 + 9) != __s1 || (*(char *)(param_1 + 1) == '\\0')))) {\n            sVar3 = strlen(__s2);\n            uVar4 = (long)__s1 - (long)(char *)((long)param_1 + 9);\n            if (~uVar4 < sVar3 + 1) {\n              piVar5 = __errno_location();\n              *piVar5 = 0xc;\n              return 0;\n            }\n            if (uVar4 + sVar3 + 1 < 0x77) {\n              extend_abbrs(__s1,__s2);\n            }\n            else {\n              lVar6 = tzalloc(__s2);\n              *param_1 = lVar6;\n              if (lVar6 == 0) {\n                return 0;\n              }\n              *(undefined *)(lVar6 + 8) = 0;\n              __s1 = (char *)(lVar6 + 9);\n            }\n            goto LAB_0010c068;\n          }\n          sVar3 = strlen(__s1);\n          __s1 = __s1 + sVar3 + 1;\n          if ((*__s1 != '\\0') || (plVar1 = (long *)*param_1, plVar1 == (long *)0x0)) break;\n          __s1 = (char *)((long)plVar1 + 9);\n          iVar2 = strcmp(__s1,__s2);\n          param_1 = plVar1;\n        }\n      } while( true );\n    }\n    __s1 = \"\";\nLAB_0010c068:\n    *(char **)(param_2 + 0x30) = __s1;\n  }\n  return 1;\n}\n\n", 
    "001150c8": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nchar * strchr(char *__s,int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strchr@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00102510": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint strncmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_strncmp_00113dd0)();\n  return iVar1;\n}\n\n"
}