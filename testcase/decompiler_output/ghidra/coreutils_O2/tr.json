{
    "00103000": "\nbool is_equiv_class_member(char param_1,char param_2)\n\n{\n  return param_1 == param_2;\n}\n\n", 
    "00103360": "\nundefined8 unquote(byte *param_1,long *param_2)\n\n{\n  int iVar1;\n  uint uVar2;\n  size_t sVar3;\n  long lVar4;\n  ulong uVar5;\n  undefined8 uVar6;\n  byte bVar7;\n  byte bVar8;\n  uint uVar9;\n  uint uVar10;\n  ulong uVar11;\n  ulong uVar12;\n  \n  sVar3 = strlen((char *)param_1);\n  lVar4 = xmalloc(sVar3);\n  *param_2 = lVar4;\n  lVar4 = xcalloc(sVar3,1);\n  param_2[1] = lVar4;\n  bVar7 = *param_1;\n  if (bVar7 == 0) {\n    uVar12 = 0;\n  }\n  else {\n    uVar5 = 0;\n    uVar11 = 0;\n    do {\n      while( true ) {\n        iVar1 = (int)uVar5;\n        uVar5 = (ulong)(iVar1 + 1);\n        uVar12 = (ulong)((int)uVar11 + 1);\n        if (bVar7 != 0x5c) break;\n        *(undefined *)(param_2[1] + uVar11) = 1;\n        bVar7 = param_1[uVar5];\n        if (bVar7 == 0) {\n          uVar6 = dcgettext(0,\"warning: an unescaped backslash at end of string is not portable\",5);\n          error(0,0,uVar6);\n          bVar8 = 0x5c;\n          *(undefined *)(param_2[1] + uVar11) = 0;\n          uVar2 = iVar1 + 1;\n        }\n        else {\n          uVar9 = bVar7 - 0x30;\n          bVar8 = (byte)uVar9;\n          switch(uVar9 & 0xff) {\n          case 0:\n          case 1:\n          case 2:\n          case 3:\n          case 4:\n          case 5:\n          case 6:\n          case 7:\n            uVar2 = iVar1 + 2;\n            if ((int)(char)param_1[uVar2] - 0x30U < 8) {\n              uVar9 = ((int)(char)param_1[uVar2] - 0x30U) + uVar9 * 8;\n              bVar8 = (byte)uVar9;\n              uVar2 = iVar1 + 3;\n              uVar10 = (int)(char)param_1[iVar1 + 3] - 0x30;\n              if (uVar10 < 8) {\n                if ((int)(uVar10 + (uVar9 & 0xff) * 8) < 0x100) {\n                  bVar8 = (char)uVar10 + bVar8 * '\\b';\n                  uVar2 = iVar1 + 4;\n                }\n                else {\n                  uVar6 = dcgettext(0,\n                                    \"warning: the ambiguous octal escape \\\\%c%c%c is being\\n\\tinterpreted as the 2-byte sequence \\\\0%c%c, %c\"\n                                    ,5);\n                  error(0,0,uVar6);\n                  uVar2 = iVar1 + 3;\n                }\n              }\n            }\n            break;\n          case 0x2c:\n            bVar8 = 0x5c;\n            uVar2 = iVar1 + 2;\n            break;\n          case 0x31:\n            bVar7 = 7;\n          default:\n            bVar8 = bVar7;\n            uVar2 = iVar1 + 2;\n            break;\n          case 0x32:\n            bVar8 = 8;\n            uVar2 = iVar1 + 2;\n            break;\n          case 0x36:\n            bVar8 = 0xc;\n            uVar2 = iVar1 + 2;\n            break;\n          case 0x3e:\n            bVar8 = 10;\n            uVar2 = iVar1 + 2;\n            break;\n          case 0x42:\n            bVar8 = 0xd;\n            uVar2 = iVar1 + 2;\n            break;\n          case 0x44:\n            bVar8 = 9;\n            uVar2 = iVar1 + 2;\n            break;\n          case 0x46:\n            bVar8 = 0xb;\n            uVar2 = iVar1 + 2;\n          }\n        }\n        uVar5 = (ulong)uVar2;\n        *(byte *)(*param_2 + uVar11) = bVar8;\n        bVar7 = param_1[uVar5];\n        uVar11 = uVar12;\n        if (bVar7 == 0) goto LAB_00103430;\n      }\n      *(byte *)(*param_2 + uVar11) = bVar7;\n      bVar7 = param_1[uVar5];\n      uVar11 = uVar12;\n    } while (bVar7 != 0);\n  }\nLAB_00103430:\n  param_2[2] = uVar12;\n  return 1;\n}\n\n", 
    "00102390": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = (int *)(*(code *)PTR___errno_location_0010ee50)();\n  return piVar1;\n}\n\n", 
    "00108490": "\nulong c_isxdigit(int param_1)\n\n{\n  ulong uVar1;\n  \n  if (param_1 - 0x30U < 0x37) {\n    uVar1 = 1L << ((byte)(param_1 - 0x30U) & 0x3f);\n    return uVar1 & 0xffffffffffffff00 | (ulong)((uVar1 & 0x7e0000007e03ff) != 0);\n  }\n  return 0;\n}\n\n", 
    "00103a00": "\nushort is_char_class_member(undefined4 param_1,uint param_2)\n\n{\n  ushort uVar1;\n  ushort **ppuVar2;\n  \n  switch(param_1) {\n  case 0:\n    ppuVar2 = __ctype_b_loc();\n    uVar1 = (*ppuVar2)[param_2 & 0xff] & 8;\n    break;\n  case 1:\n    ppuVar2 = __ctype_b_loc();\n    uVar1 = (*ppuVar2)[param_2 & 0xff] & 0x400;\n    break;\n  case 2:\n    ppuVar2 = __ctype_b_loc();\n    uVar1 = (*ppuVar2)[param_2 & 0xff] & 1;\n    break;\n  case 3:\n    ppuVar2 = __ctype_b_loc();\n    uVar1 = (*ppuVar2)[param_2 & 0xff] & 2;\n    break;\n  case 4:\n    ppuVar2 = __ctype_b_loc();\n    uVar1 = (*ppuVar2)[param_2 & 0xff] & 0x800;\n    break;\n  case 5:\n    ppuVar2 = __ctype_b_loc();\n    uVar1 = (*ppuVar2)[param_2 & 0xff] & 0x8000;\n    break;\n  case 6:\n    ppuVar2 = __ctype_b_loc();\n    uVar1 = (*ppuVar2)[param_2 & 0xff] & 0x200;\n    break;\n  case 7:\n    ppuVar2 = __ctype_b_loc();\n    uVar1 = (*ppuVar2)[param_2 & 0xff] & 0x4000;\n    break;\n  case 8:\n    ppuVar2 = __ctype_b_loc();\n    uVar1 = (*ppuVar2)[param_2 & 0xff] & 4;\n    break;\n  case 9:\n    ppuVar2 = __ctype_b_loc();\n    uVar1 = (*ppuVar2)[param_2 & 0xff] & 0x2000;\n    break;\n  case 10:\n    ppuVar2 = __ctype_b_loc();\n    uVar1 = (*ppuVar2)[param_2 & 0xff] & 0x100;\n    break;\n  case 0xb:\n    ppuVar2 = __ctype_b_loc();\n    uVar1 = (*ppuVar2)[param_2 & 0xff] & 0x1000;\n    break;\n  default:\n                    /* WARNING: Subroutine does not return */\n    abort();\n  }\n  return uVar1 & 0xff00 | (ushort)(uVar1 != 0);\n}\n\n", 
    "001032e0": "\nulong look_up_char_class(char *param_1,size_t param_2)\n\n{\n  int iVar1;\n  size_t sVar2;\n  ulong uVar3;\n  char *__s2;\n  \n  __s2 = \"alnum\";\n  uVar3 = 0;\n  while( true ) {\n    iVar1 = strncmp(param_1,__s2,param_2);\n    if ((iVar1 == 0) && (sVar2 = strlen(__s2), sVar2 == param_2)) break;\n    uVar3 = uVar3 + 1;\n    if (uVar3 == 0xc) {\n      return 9999;\n    }\n    __s2 = *(char **)(char_class_name + uVar3 * 8);\n  }\n  return uVar3 & 0xffffffff;\n}\n\n", 
    "00112088": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nsize_t mbrtowc(wchar_t *__pwc,char *__s,size_t __n,mbstate_t *__p)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* mbrtowc@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "001054c0": "\nundefined8 strcaseeq6(long param_1,undefined8 param_2,byte param_3,char param_4,char param_5)\n\n{\n  char cVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  \n  cVar1 = c_isupper((int)(char)param_3);\n  bVar2 = *(byte *)(param_1 + 6);\n  if (cVar1 != '\\0') {\n    bVar2 = bVar2 & 0xdf;\n  }\n  if (param_3 != bVar2) {\n    return 0;\n  }\n  if (param_3 == 0) {\n    return 1;\n  }\n  uVar3 = strcaseeq7(param_1,param_2,(int)param_4,(int)param_5);\n  return uVar3;\n}\n\n", 
    "00112080": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid getopt_long(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getopt_long@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00105770": "\nundefined8\nstrcaseeq2(long param_1,undefined8 param_2,byte param_3,char param_4,char param_5,char param_6,\n          char param_7)\n\n{\n  char cVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  \n  cVar1 = c_isupper((int)(char)param_3);\n  bVar2 = *(byte *)(param_1 + 2);\n  if (cVar1 != '\\0') {\n    bVar2 = bVar2 & 0xdf;\n  }\n  if (param_3 != bVar2) {\n    return 0;\n  }\n  if (param_3 == 0) {\n    return 1;\n  }\n  uVar3 = strcaseeq3(param_1,param_2,(int)param_4,(int)param_5,(int)param_6,(int)param_7);\n  return uVar3;\n}\n\n", 
    "00102380": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid abort(void)\n\n{\n  (*(code *)PTR_abort_0010ee48)();\n  return;\n}\n\n", 
    "00102020": "\nvoid FUN_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)PTR_0010ee38)();\n  return;\n}\n\n", 
    "00108360": "\nbool c_isalpha(int param_1)\n\n{\n  if (param_1 < 0x5b) {\n    return 0x40 < param_1;\n  }\n  return param_1 - 0x61U < 0x1a;\n}\n\n", 
    "00108480": "\nbool c_isupper(int param_1)\n\n{\n  return param_1 - 0x41U < 0x1a;\n}\n\n", 
    "00107390": "\nvoid quotearg_char(undefined8 param_1,char param_2)\n\n{\n  quotearg_char_mem(param_1,0xffffffffffffffff,(int)param_2);\n  return;\n}\n\n", 
    "001044e0": "\nundefined8 build_spec_list(long *param_1,long param_2)\n\n{\n  long lVar1;\n  long lVar2;\n  char cVar3;\n  int iVar4;\n  long lVar5;\n  undefined8 uVar6;\n  void *__ptr;\n  void *pvVar7;\n  undefined8 extraout_RDX;\n  undefined8 extraout_RDX_00;\n  ulong uVar8;\n  ulong uVar9;\n  char *pcVar10;\n  char *pcVar11;\n  ulong uVar12;\n  long in_FS_OFFSET;\n  undefined local_51;\n  long local_50;\n  long local_48;\n  long local_40;\n  \n  uVar9 = 0;\n  lVar2 = *param_1;\n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  if (2 < (ulong)param_1[2]) {\n    uVar12 = 2;\n    uVar8 = uVar9;\n    do {\n      uVar9 = uVar8 + 1;\n      cVar3 = es_match(param_1,uVar8,0x5b);\n      if (cVar3 == '\\0') {\nLAB_0010464a:\n        cVar3 = es_match(param_1,uVar9,0x2d);\n        if (cVar3 == '\\0') {\n          append_normal_char(param_2);\n        }\n        else {\n          uVar6 = append_range(param_2,*(undefined *)(lVar2 + uVar8),*(undefined *)(lVar2 + uVar12))\n          ;\n          if ((char)uVar6 == '\\0') goto LAB_0010469c;\n          uVar9 = uVar8 + 3;\n        }\n      }\n      else {\n        cVar3 = es_match();\n        if ((cVar3 == '\\0') && (cVar3 = es_match(), cVar3 == '\\0')) {\nLAB_00104628:\n          iVar4 = find_bracketed_repeat(param_1,uVar9,&local_51,&local_48,&local_50);\n          if (iVar4 != 0) {\n            if (iVar4 == -1) goto LAB_0010464a;\nLAB_0010474d:\n            uVar6 = 0;\n            goto LAB_0010469c;\n          }\n          append_repeated_char(param_2,local_51,local_48);\n          uVar9 = local_50 + 1;\n        }\n        else {\n          pcVar11 = (char *)(lVar2 + uVar9);\n          cVar3 = find_closing_delim(param_1,uVar12,(int)*pcVar11);\n          if (cVar3 == '\\0') goto LAB_00104628;\n          lVar1 = lVar2 + uVar12;\n          lVar5 = (local_48 + -2) - uVar8;\n          if (lVar5 == 0) {\n            pcVar10 = \"missing character class name \\'[::]\\'\";\n            if (*pcVar11 != ':') {\n              pcVar10 = \"missing equivalence class character \\'[==]\\'\";\n            }\n            uVar6 = dcgettext(0,pcVar10,5);\n            error(0,0,uVar6);\n            uVar6 = 0;\n            goto LAB_0010469c;\n          }\n          if (*pcVar11 == ':') {\n            cVar3 = append_char_class_isra_0(param_2 + 8,lVar2 + uVar12,lVar5);\n            if (cVar3 != '\\0') goto LAB_00104758;\n            cVar3 = star_digits_closebracket(param_1,uVar12);\n            if (cVar3 != '\\0') goto LAB_00104628;\n            __ptr = (void *)make_printable_str(lVar1,lVar5,extraout_RDX_00,&local_48);\n            pvVar7 = (void *)quote(__ptr);\n            uVar6 = dcgettext(0,\"invalid character class %s\",5);\nLAB_0010473a:\n            error(0,0,uVar6,pvVar7);\n            free(__ptr);\n            goto LAB_0010474d;\n          }\n          cVar3 = append_equiv_class_isra_0(param_2 + 8,lVar1);\n          if (cVar3 == '\\0') {\n            cVar3 = star_digits_closebracket(param_1,uVar12);\n            if (cVar3 == '\\0') {\n              pvVar7 = (void *)make_printable_str(lVar1,lVar5,extraout_RDX,&local_48);\n              uVar6 = dcgettext(0,\"%s: equivalence class operand must be a single character\",5);\n              __ptr = pvVar7;\n              goto LAB_0010473a;\n            }\n            goto LAB_00104628;\n          }\nLAB_00104758:\n          uVar9 = local_48 + 2;\n        }\n      }\n      uVar12 = uVar9 + 2;\n      uVar8 = uVar9;\n    } while (uVar12 < (ulong)param_1[2]);\n  }\n  for (; uVar9 <= (ulong)param_1[2] && param_1[2] != uVar9; uVar9 = uVar9 + 1) {\n    append_normal_char(param_2,*(undefined *)(lVar2 + uVar9));\n  }\n  uVar6 = 1;\nLAB_0010469c:\n  if (local_40 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return uVar6;\n}\n\n", 
    "00112098": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nchar * strrchr(char *__s,int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strrchr@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00107c70": "\nvoid xnmalloc(ulong param_1,ulong param_2)\n\n{\n  if ((-1 < SUB168(ZEXT816(param_1) * ZEXT816(param_2),0)) &&\n     (SUB168(ZEXT816(param_1) * ZEXT816(param_2) >> 0x40,0) == 0)) {\n    xmalloc();\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  xalloc_die();\n}\n\n", 
    "001071f0": "\nvoid quotearg_mem(undefined8 param_1,undefined8 param_2)\n\n{\n  quotearg_n_mem(0,param_1,param_2);\n  return;\n}\n\n", 
    "00112090": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nchar * strchr(char *__s,int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strchr@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00108710": "\nvoid rpl_fflush(FILE *param_1)\n\n{\n  int iVar1;\n  \n  if (param_1 != (FILE *)0x0) {\n    iVar1 = __freading();\n    if (iVar1 != 0) {\n      clear_ungetc_buffer_preserving_position(param_1);\n      fflush(param_1);\n      return;\n    }\n  }\n  fflush(param_1);\n  return;\n}\n\n", 
    "001026b9": "\nvoid quotearg_buffer_restyled_cold(void)\n\n{\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n", 
    "001026b4": "\nvoid quoting_options_from_style_cold(void)\n\n{\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n", 
    "00112178": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid exit(int __status)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* exit@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00112058": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nchar * stpcpy(char *__dest,char *__src)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* stpcpy@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00108390": "\nuint c_isblank(int param_1,undefined8 param_2,uint param_3)\n\n{\n  uint in_EAX;\n  \n  return in_EAX & 0xffffff00 | (uint)(param_1 == 0x20) | param_3 & 0xffffff00 | (uint)(param_1 == 9)\n  ;\n}\n\n", 
    "00112060": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid dcgettext(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* dcgettext@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00106f30": "\nundefined4 set_quoting_flags(undefined1 *param_1,undefined4 param_2)\n\n{\n  undefined4 uVar1;\n  \n  if (param_1 == (undefined1 *)0x0) {\n    param_1 = default_quoting_options;\n  }\n  uVar1 = *(undefined4 *)(param_1 + 4);\n  *(undefined4 *)(param_1 + 4) = param_2;\n  return uVar1;\n}\n\n", 
    "001075a0": "\nssize_t safe_read(int param_1,void *param_2,ulong param_3)\n\n{\n  ssize_t sVar1;\n  int *piVar2;\n  \n  while( true ) {\n    do {\n      sVar1 = read(param_1,param_2,param_3);\n      if (-1 < sVar1) {\n        return sVar1;\n      }\n      piVar2 = __errno_location();\n    } while (*piVar2 == 4);\n    if (param_3 < 0x7ff00001) break;\n    if (*piVar2 != 0x16) {\n      return sVar1;\n    }\n    param_3 = 0x7ff00000;\n  }\n  return sVar1;\n}\n\n", 
    "00104d50": "\nvoid emit_ancillary_info_constprop_0(void)\n\n{\n  int iVar1;\n  char *pcVar2;\n  undefined8 uVar3;\n  undefined **ppuVar4;\n  undefined *puVar5;\n  long in_FS_OFFSET;\n  undefined *local_98;\n  char *local_90;\n  char *local_88;\n  char *local_80 [5];\n  char *local_58;\n  char *local_50;\n  char *local_48;\n  char *local_40;\n  undefined8 local_38;\n  undefined8 local_30;\n  long local_20;\n  \n  local_20 = *(long *)(in_FS_OFFSET + 0x28);\n  local_80[0] = \"Multi-call invocation\";\n  local_98 = &DAT_001090e2;\n  local_90 = \"test invocation\";\n  local_80[1] = \"sha224sum\";\n  local_88 = \"coreutils\";\n  local_38 = 0;\n  local_30 = 0;\n  local_80[3] = \"sha256sum\";\n  local_80[2] = \"sha2 utilities\";\n  local_80[4] = \"sha2 utilities\";\n  local_58 = \"sha384sum\";\n  local_50 = \"sha2 utilities\";\n  local_48 = \"sha512sum\";\n  local_40 = \"sha2 utilities\";\n  pcVar2 = \"coreutils\";\n  ppuVar4 = &local_98;\n  while ((pcVar2 != (char *)0x0 && (((*pcVar2 != 't' || (pcVar2[1] != 'r')) || (pcVar2[2] != '\\0')))\n         )) {\n    pcVar2 = *(char **)((long)ppuVar4 + 0x20);\n    ppuVar4 = (undefined **)((long)ppuVar4 + 0x10);\n  }\n  puVar5 = *(undefined **)((long)ppuVar4 + 0x18);\n  if (puVar5 == (undefined *)0x0) {\n    uVar3 = dcgettext(0,\"\\n%s online help: <%s>\\n\",5);\n    __printf_chk(1,uVar3,\"GNU coreutils\",\"https://www.gnu.org/software/coreutils/\");\n    pcVar2 = setlocale(5,(char *)0x0);\n    if (pcVar2 != (char *)0x0) {\n      iVar1 = strncmp(pcVar2,\"en_\",3);\n      if (iVar1 != 0) {\n        puVar5 = &DAT_001090df;\n        goto LAB_00104f8e;\n      }\n    }\n    uVar3 = dcgettext(0,\"Full documentation at: <%s%s>\\n\",5);\n    puVar5 = &DAT_001090df;\n    __printf_chk(1,uVar3,\"https://www.gnu.org/software/coreutils/\",&DAT_001090df);\n    pcVar2 = \" invocation\";\n  }\n  else {\n    uVar3 = dcgettext(0,\"\\n%s online help: <%s>\\n\",5);\n    __printf_chk(1,uVar3,\"GNU coreutils\",\"https://www.gnu.org/software/coreutils/\");\n    pcVar2 = setlocale(5,(char *)0x0);\n    if (pcVar2 != (char *)0x0) {\n      iVar1 = strncmp(pcVar2,\"en_\",3);\n      if (iVar1 != 0) {\nLAB_00104f8e:\n        uVar3 = dcgettext(0,\"Report %s translation bugs to <https://translationproject.org/team/>\\n\"\n                          ,5);\n        __printf_chk(1,uVar3,&DAT_001090df);\n      }\n    }\n    uVar3 = dcgettext(0,\"Full documentation at: <%s%s>\\n\",5);\n    __printf_chk(1,uVar3,\"https://www.gnu.org/software/coreutils/\",&DAT_001090df);\n    pcVar2 = \" invocation\";\n    if (puVar5 != &DAT_001090df) {\n      pcVar2 = \"\";\n    }\n  }\n  uVar3 = dcgettext(0,\"or available locally via: info \\'(coreutils) %s%s\\'\\n\",5);\n  if (local_20 == *(long *)(in_FS_OFFSET + 0x28)) {\n    __printf_chk(1,uVar3,puVar5,pcVar2);\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "001052a0": "\nvoid set_program_name(char *param_1)\n\n{\n  char *pcVar1;\n  long lVar2;\n  ulong uVar3;\n  byte *pbVar4;\n  byte *pbVar5;\n  bool bVar6;\n  bool bVar7;\n  byte bVar8;\n  \n  bVar8 = 0;\n  if (param_1 == (char *)0x0) {\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\",1,0x37,stderr);\n                    /* WARNING: Subroutine does not return */\n    abort();\n  }\n  pcVar1 = strrchr(param_1,0x2f);\n  if (pcVar1 != (char *)0x0) {\n    program_name = pcVar1 + 1;\n    uVar3 = (long)program_name - (long)param_1;\n    bVar6 = uVar3 < 6;\n    bVar7 = uVar3 == 6;\n    if (6 < (long)uVar3) {\n      lVar2 = 7;\n      pbVar4 = (byte *)(pcVar1 + -6);\n      pbVar5 = (byte *)\"/.libs/\";\n      do {\n        if (lVar2 == 0) break;\n        lVar2 = lVar2 + -1;\n        bVar6 = *pbVar4 < *pbVar5;\n        bVar7 = *pbVar4 == *pbVar5;\n        pbVar4 = pbVar4 + (ulong)bVar8 * -2 + 1;\n        pbVar5 = pbVar5 + (ulong)bVar8 * -2 + 1;\n      } while (bVar7);\n      if ((!bVar6 && !bVar7) == bVar6) {\n        if (((pcVar1[1] != 'l') || (pcVar1[2] != 't')) || (pcVar1[3] != '-')) {\n          program_invocation_name = program_name;\n          return;\n        }\n        param_1 = pcVar1 + 4;\n        program_invocation_short_name = param_1;\n      }\n    }\n  }\n  program_name = param_1;\n  program_invocation_name = param_1;\n  return;\n}\n\n", 
    "00112188": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid __fprintf_chk(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __fprintf_chk@@GLIBC_2.3.4 */\n  halt_baddata();\n}\n\n", 
    "00107a60": "\nvoid version_etc_ar(void)\n\n{\n  long lVar1;\n  long *in_R8;\n  long lVar2;\n  \n  lVar2 = 0;\n  lVar1 = *in_R8;\n  while (lVar1 != 0) {\n    lVar2 = lVar2 + 1;\n    lVar1 = in_R8[lVar2];\n  }\n  version_etc_arn();\n  return;\n}\n\n", 
    "00112180": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fwrite@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00102600": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint fseeko(FILE *__stream,__off_t __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_fseeko_0010ef88)();\n  return iVar1;\n}\n\n", 
    "00107610": "\nundefined8\nversion_etc_arn(FILE *param_1,long param_2,undefined8 param_3,undefined8 param_4,undefined8 *param_5\n               ,undefined8 param_6)\n\n{\n  undefined8 uVar1;\n  char *pcVar2;\n  undefined8 uVar3;\n  undefined8 uVar4;\n  undefined8 uVar5;\n  undefined8 uVar6;\n  undefined8 local_60;\n  undefined8 local_58;\n  undefined8 local_50;\n  undefined8 local_48;\n  \n  if (param_2 == 0) {\n    __fprintf_chk(param_1,1,\"%s %s\\n\",param_3,param_4);\n  }\n  else {\n    __fprintf_chk(param_1,1,\"%s (%s) %s\\n\",param_2,param_3,param_4);\n  }\n  uVar1 = dcgettext(0,&DAT_0010ac9b,5);\n  __fprintf_chk(param_1,1,\"Copyright %s %d Free Software Foundation, Inc.\",uVar1,0x7e2);\n  pcVar2 = (char *)dcgettext(0,\n                             \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\"\n                             ,5);\n  fputs_unlocked(pcVar2,param_1);\n  switch(param_6) {\n  case 0:\n                    /* WARNING: Subroutine does not return */\n    abort();\n  case 1:\n    uVar1 = *param_5;\n    uVar4 = dcgettext(0,\"Written by %s.\\n\",5);\n    uVar1 = __fprintf_chk(param_1,1,uVar4,uVar1);\n    return uVar1;\n  case 2:\n    uVar1 = param_5[1];\n    uVar4 = *param_5;\n    uVar5 = dcgettext(0,\"Written by %s and %s.\\n\",5);\n    uVar1 = __fprintf_chk(param_1,1,uVar5,uVar4,uVar1);\n    return uVar1;\n  case 3:\n    uVar1 = param_5[2];\n    uVar4 = param_5[1];\n    uVar5 = *param_5;\n    uVar6 = dcgettext(0,\"Written by %s, %s, and %s.\\n\",5);\n    uVar1 = __fprintf_chk(param_1,1,uVar6,uVar5,uVar4,uVar1);\n    return uVar1;\n  case 4:\n    uVar1 = param_5[3];\n    uVar4 = param_5[2];\n    uVar5 = param_5[1];\n    uVar6 = *param_5;\n    uVar3 = dcgettext(0,\"Written by %s, %s, %s,\\nand %s.\\n\",5);\n    goto LAB_001078d9;\n  case 5:\n    uVar1 = param_5[3];\n    uVar4 = param_5[2];\n    uVar5 = param_5[1];\n    uVar6 = *param_5;\n    uVar3 = dcgettext(0,\"Written by %s, %s, %s,\\n%s, and %s.\\n\",5);\nLAB_001078d9:\n    __fprintf_chk(param_1,1,uVar3,uVar6,uVar5,uVar4);\n    return uVar1;\n  case 6:\n    local_58 = param_5[5];\n    local_60 = param_5[4];\n    uVar1 = param_5[3];\n    uVar4 = param_5[2];\n    uVar5 = param_5[1];\n    uVar6 = *param_5;\n    uVar3 = dcgettext(0,\"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\",5);\n    goto LAB_0010797b;\n  case 7:\n    local_58 = param_5[5];\n    local_60 = param_5[4];\n    uVar1 = param_5[3];\n    uVar4 = param_5[2];\n    uVar5 = param_5[1];\n    uVar6 = *param_5;\n    uVar3 = dcgettext(0,\"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\",5);\nLAB_0010797b:\n    uVar1 = __fprintf_chk(param_1,1,uVar3,uVar6,uVar5,uVar4,uVar1,local_60,local_58);\n    return uVar1;\n  case 8:\n    local_48 = param_5[7];\n    local_50 = param_5[6];\n    local_58 = param_5[5];\n    local_60 = param_5[4];\n    uVar1 = param_5[3];\n    uVar4 = param_5[2];\n    uVar5 = param_5[1];\n    uVar6 = *param_5;\n    uVar3 = dcgettext(0,\"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\",5);\n    goto LAB_0010772d;\n  case 9:\n    local_48 = param_5[7];\n    pcVar2 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n    local_50 = param_5[6];\n    local_58 = param_5[5];\n    local_60 = param_5[4];\n    uVar1 = param_5[3];\n    uVar4 = param_5[2];\n    uVar5 = param_5[1];\n    uVar6 = *param_5;\n    break;\n  default:\n    local_48 = param_5[7];\n    pcVar2 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n    local_50 = param_5[6];\n    local_58 = param_5[5];\n    local_60 = param_5[4];\n    uVar1 = param_5[3];\n    uVar4 = param_5[2];\n    uVar5 = param_5[1];\n    uVar6 = *param_5;\n  }\n  uVar3 = dcgettext(0,pcVar2,5);\nLAB_0010772d:\n  uVar1 = __fprintf_chk(param_1,1,uVar3,uVar6,uVar5,uVar4,uVar1,local_60,local_58,local_50,local_48)\n  ;\n  return uVar1;\n}\n\n", 
    "00106eb0": "\nundefined4 get_quoting_style(undefined1 *param_1)\n\n{\n  if ((undefined4 *)param_1 == (undefined4 *)0x0) {\n    param_1 = default_quoting_options;\n  }\n  return *(undefined4 *)param_1;\n}\n\n", 
    "00104460": "\nundefined8 append_char_class_isra_0(long *param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  long lVar1;\n  int iVar2;\n  undefined4 *puVar3;\n  \n  iVar2 = look_up_char_class(param_2,param_3);\n  if (iVar2 == 9999) {\n    return 0;\n  }\n  puVar3 = (undefined4 *)xmalloc(0x20);\n  lVar1 = *param_1;\n  *(undefined8 *)(puVar3 + 2) = 0;\n  *puVar3 = 2;\n  puVar3[4] = iVar2;\n  if (lVar1 != 0) {\n    *(undefined4 **)(lVar1 + 8) = puVar3;\n    *param_1 = (long)puVar3;\n    return 1;\n  }\n                    /* WARNING: Subroutine does not return */\n  __assert_fail(\"list->tail\",\"src/tr.c\",699,\"append_char_class\");\n}\n\n", 
    "00105550": "\nundefined8\nstrcaseeq5(long param_1,undefined8 param_2,byte param_3,char param_4,char param_5,char param_6)\n\n{\n  char cVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  \n  cVar1 = c_isupper((int)(char)param_3);\n  bVar2 = *(byte *)(param_1 + 5);\n  if (cVar1 != '\\0') {\n    bVar2 = bVar2 & 0xdf;\n  }\n  if (param_3 != bVar2) {\n    return 0;\n  }\n  if (param_3 == 0) {\n    return 1;\n  }\n  uVar3 = strcaseeq6(param_1,param_2,(int)param_4,(int)param_5,(int)param_6);\n  return uVar3;\n}\n\n", 
    "00105430": "\nundefined8 strcaseeq7(long param_1,undefined8 param_2,byte param_3,char param_4)\n\n{\n  char cVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  \n  cVar1 = c_isupper((int)(char)param_3);\n  bVar2 = *(byte *)(param_1 + 7);\n  if (cVar1 != '\\0') {\n    bVar2 = bVar2 & 0xdf;\n  }\n  if (param_3 != bVar2) {\n    return 0;\n  }\n  if (param_3 == 0) {\n    return 1;\n  }\n  uVar3 = strcaseeq8(param_1,param_2,(int)param_4);\n  return uVar3;\n}\n\n", 
    "00103010": "\nundefined8 find_closing_delim(long *param_1,ulong param_2,char param_3,ulong *param_4)\n\n{\n  ulong uVar1;\n  \n  if (param_2 < param_1[2] - 1U) {\n    do {\n      uVar1 = param_2 + 1;\n      if ((((*(char *)(*param_1 + param_2) == param_3) && (*(char *)(*param_1 + uVar1) == ']')) &&\n          (*(char *)(param_1[1] + param_2) == '\\0')) && (*(char *)(param_1[1] + uVar1) == '\\0')) {\n        *param_4 = param_2;\n        return 1;\n      }\n      param_2 = uVar1;\n    } while (uVar1 < param_1[2] - 1U);\n  }\n  return 0;\n}\n\n", 
    "00103130": "\nulong read_and_delete(long param_1)\n\n{\n  byte bVar1;\n  ulong uVar2;\n  undefined *puVar3;\n  long extraout_RDX;\n  ulong uVar5;\n  undefined uVar6;\n  undefined *puVar7;\n  ulong uVar4;\n  \n  do {\n    uVar2 = plain_read(param_1);\n    if (uVar2 == 0) {\n      return 0;\n    }\n    uVar4 = 0;\n    do {\n      uVar5 = uVar4;\n      bVar1 = to_uchar((int)*(char *)(param_1 + uVar5));\n      uVar4 = uVar5 + 1;\n      if (in_delete_set[bVar1] != '\\0') {\n        if (uVar4 < uVar2) goto LAB_00103179;\n        goto LAB_001031a3;\n      }\n    } while (uVar2 != uVar4);\n    uVar4 = uVar5 + 2;\n    uVar5 = uVar2;\n    if (uVar2 <= uVar4) {\n      return uVar2;\n    }\nLAB_00103179:\n    puVar3 = (undefined *)(uVar4 + param_1);\n    puVar7 = (undefined *)(uVar2 + param_1);\n    do {\n      uVar6 = *puVar3;\n      bVar1 = to_uchar();\n      if (in_delete_set[bVar1] == '\\0') {\n        *(undefined *)(param_1 + uVar5) = uVar6;\n        uVar5 = uVar5 + 1;\n      }\n      puVar3 = (undefined *)(extraout_RDX + 1);\n    } while (puVar7 != puVar3);\nLAB_001031a3:\n    if (uVar5 != 0) {\n      return uVar5;\n    }\n  } while( true );\n}\n\n", 
    "00112068": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nsize_t __ctype_get_mb_cur_max(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __ctype_get_mb_cur_max@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "001026a5": "\nvoid get_spec_stats_cold(void)\n\n{\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n", 
    "00108380": "\nbool c_isascii(uint param_1)\n\n{\n  return param_1 < 0x80;\n}\n\n", 
    "001026a0": "\nvoid is_char_class_member_cold(void)\n\n{\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n", 
    "001031d0": "\nlong read_and_xlate(char *param_1)\n\n{\n  byte bVar1;\n  long lVar2;\n  undefined1 *puVar3;\n  char *pcVar4;\n  char *pcVar5;\n  \n  lVar2 = plain_read();\n  if (lVar2 != 0) {\n    pcVar5 = param_1 + lVar2;\n    puVar3 = xlate;\n    do {\n      pcVar4 = param_1 + 1;\n      bVar1 = to_uchar((int)*param_1);\n      *param_1 = puVar3[bVar1];\n      param_1 = pcVar4;\n    } while (pcVar5 != pcVar4);\n  }\n  return lVar2;\n}\n\n", 
    "001043e0": "\nundefined8 append_equiv_class_isra_0(long *param_1,undefined *param_2,long param_3)\n\n{\n  undefined uVar1;\n  long lVar2;\n  undefined4 *puVar3;\n  \n  if (param_3 != 1) {\n    return 0;\n  }\n  puVar3 = (undefined4 *)xmalloc(0x20);\n  uVar1 = *param_2;\n  *(undefined8 *)(puVar3 + 2) = 0;\n  *(undefined *)(puVar3 + 4) = uVar1;\n  lVar2 = *param_1;\n  *puVar3 = 3;\n  if (lVar2 != 0) {\n    *(undefined4 **)(lVar2 + 8) = puVar3;\n    *param_1 = (long)puVar3;\n    return 1;\n  }\n                    /* WARNING: Subroutine does not return */\n  __assert_fail(\"list->tail\",\"src/tr.c\",0x2e5,\"append_equiv_class\");\n}\n\n", 
    "00112198": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint mbsinit(mbstate_t *__ps)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* mbsinit@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "001053b0": "\nbool strcaseeq9(long param_1,long param_2)\n\n{\n  int iVar1;\n  \n  iVar1 = c_strcasecmp(param_1 + 9,param_2 + 9);\n  return iVar1 == 0;\n}\n\n", 
    "00112078": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid __stack_chk_fail(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __stack_chk_fail@@GLIBC_2.4 */\n  halt_baddata();\n}\n\n", 
    "00103d70": "\nulong get_next(long *param_1,undefined4 *param_2)\n\n{\n  byte bVar1;\n  char cVar2;\n  long lVar3;\n  long lVar4;\n  uint uVar5;\n  int iVar6;\n  ulong uVar7;\n  uint uVar8;\n  ulong uVar9;\n  uint *puVar10;\n  \n  lVar3 = param_1[2];\nLAB_00103d86:\n  if (param_2 != (undefined4 *)0x0) {\n    *param_2 = 2;\n  }\n  if (lVar3 == -2) {\n    puVar10 = *(uint **)(*param_1 + 8);\n    param_1[2] = -1;\n    param_1[1] = (long)puVar10;\n  }\n  else {\n    puVar10 = (uint *)param_1[1];\n  }\n  if (puVar10 == (uint *)0x0) {\n    return 0xffffffff;\n  }\n  if (4 < *puVar10) {\n                    /* WARNING: Subroutine does not return */\n    abort();\n  }\n  switch(*puVar10) {\n  default:\n    lVar3 = *(long *)(puVar10 + 2);\n    bVar1 = *(byte *)(puVar10 + 4);\n    param_1[2] = -1;\n    param_1[1] = lVar3;\n    return (ulong)bVar1;\n  case 1:\n    uVar7 = param_1[2] + 1;\n    if (param_1[2] == -1) {\n      uVar7 = (ulong)*(byte *)(puVar10 + 4);\n    }\n    bVar1 = *(byte *)((long)puVar10 + 0x11);\n    param_1[2] = uVar7;\n    uVar9 = uVar7 & 0xffffffff;\n    if (bVar1 != uVar7) {\n      return uVar9;\n    }\n    goto LAB_00103ec7;\n  case 2:\n    uVar8 = puVar10[4];\n    if (param_2 != (undefined4 *)0x0) {\n      if (uVar8 == 6) {\n        *param_2 = 0;\n        uVar8 = puVar10[4];\n      }\n      else if (uVar8 == 10) {\n        *param_2 = 1;\n        uVar8 = puVar10[4];\n      }\n    }\n    uVar7 = param_1[2];\n    if (uVar7 == 0xffffffffffffffff) {\n      iVar6 = 0;\n      while (cVar2 = is_char_class_member(uVar8,iVar6), cVar2 == '\\0') {\n        iVar6 = iVar6 + 1;\n        if (iVar6 == 0x100) {\n                    /* WARNING: Subroutine does not return */\n          __assert_fail(\"i < N_CHARS\",\"src/tr.c\",0x434,\"get_next\");\n        }\n      }\n      uVar7 = (ulong)iVar6;\n      param_1[2] = uVar7;\n    }\n    cVar2 = is_char_class_member(uVar8,uVar7 & 0xff);\n    if (cVar2 == '\\0') {\n                    /* WARNING: Subroutine does not return */\n      __assert_fail(\"is_char_class_member (p->u.char_class, s->state)\",\"src/tr.c\",0x437,\"get_next\");\n    }\n    uVar9 = uVar7 & 0xffffffff;\n    uVar5 = (int)uVar7 + 1;\n    if ((int)uVar5 < 0x100) {\n      do {\n        cVar2 = is_char_class_member(uVar8,uVar5 & 0xff);\n        if (cVar2 != '\\0') {\n          param_1[2] = (long)(int)uVar5;\n          return uVar9;\n        }\n        uVar5 = uVar5 + 1;\n      } while (uVar5 != 0x100);\n    }\n    goto LAB_00103ec7;\n  case 4:\n    break;\n  }\n  lVar3 = *(long *)(puVar10 + 6);\n  if (lVar3 != 0) {\n    uVar9 = (ulong)*(byte *)(puVar10 + 4);\n    lVar4 = param_1[2] + 1;\n    if (param_1[2] == -1) {\n      lVar4 = 1;\n    }\n    param_1[2] = lVar4;\n    if (lVar3 != lVar4) {\n      return uVar9;\n    }\nLAB_00103ec7:\n    lVar3 = *(long *)(puVar10 + 2);\n    param_1[2] = -1;\n    param_1[1] = lVar3;\n    return uVar9;\n  }\n  lVar3 = *(long *)(puVar10 + 2);\n  param_1[2] = -1;\n  param_1[1] = lVar3;\n  lVar3 = -1;\n  goto LAB_00103d86;\n}\n\n", 
    "00112190": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid _ITM_registerTMCloneTable(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "00112070": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nsize_t strlen(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strlen@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "001120e0": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint fputs_unlocked(char *__s,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fputs_unlocked@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00102590": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nchar * nl_langinfo(nl_item __item)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = (char *)(*(code *)PTR_nl_langinfo_0010ef50)();\n  return pcVar1;\n}\n\n", 
    "00102470": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nsize_t mbrtowc(wchar_t *__pwc,char *__s,size_t __n,mbstate_t *__p)\n\n{\n  size_t sVar1;\n  \n  sVar1 = (*(code *)PTR_mbrtowc_0010eec0)();\n  return sVar1;\n}\n\n", 
    "00108330": "\nulong c_isalnum(int param_1)\n\n{\n  ulong in_RAX;\n  ulong uVar1;\n  \n  if (param_1 < 0x5b) {\n    uVar1 = 1;\n    if (param_1 < 0x41) {\n      return (ulong)(param_1 - 0x30U < 10);\n    }\n  }\n  else {\n    uVar1 = in_RAX & 0xffffffffffffff00 | (ulong)(param_1 - 0x61U < 0x1a);\n  }\n  return uVar1;\n}\n\n", 
    "00112158": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid error(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* error@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00112038": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint toupper(int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* toupper@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00107cf0": "\nvoid xnrealloc(undefined8 param_1,ulong param_2,ulong param_3)\n\n{\n  if ((-1 < SUB168(ZEXT816(param_2) * ZEXT816(param_3),0)) &&\n     (SUB168(ZEXT816(param_2) * ZEXT816(param_3) >> 0x40,0) == 0)) {\n    xrealloc();\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  xalloc_die();\n}\n\n", 
    "00112040": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid textdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* textdomain@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00112160": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint fseeko(FILE *__stream,__off_t __off,int __whence)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fseeko@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "001023f0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_fclose_0010ee80)();\n  return iVar1;\n}\n\n", 
    "001083d0": "\nbool c_isdigit(int param_1)\n\n{\n  return param_1 - 0x30U < 10;\n}\n\n", 
    "001072e0": "\nvoid quotearg_style_mem(undefined4 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  quotearg_n_style_mem(0,param_1,param_2,param_3);\n  return;\n}\n\n", 
    "001120e8": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint ferror_unlocked(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ferror_unlocked@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "001120f0": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid * calloc(size_t __nmemb,size_t __size)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* calloc@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00102580": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_fflush_0010ef48)();\n  return iVar1;\n}\n\n", 
    "00102460": "\nvoid getopt_long(void)\n\n{\n  (*(code *)PTR_getopt_long_0010eeb8)();\n  return;\n}\n\n", 
    "00107110": "\nvoid quotearg_free(void)\n\n{\n  void **ppvVar1;\n  void *__ptr;\n  undefined *__ptr_00;\n  void **ppvVar2;\n  \n  __ptr_00 = slotvec;\n  if (1 < nslots) {\n    ppvVar2 = (void **)(slotvec + 0x18);\n    ppvVar1 = (void **)(slotvec + (ulong)(nslots - 2) * 0x10 + 0x28);\n    do {\n      __ptr = *ppvVar2;\n      ppvVar2 = ppvVar2 + 2;\n      free(__ptr);\n    } while (ppvVar2 != ppvVar1);\n  }\n  if (*(undefined1 **)(__ptr_00 + 8) != slot0) {\n    free(*(undefined1 **)(__ptr_00 + 8));\n    slotvec0._8_8_ = slot0;\n    slotvec0._0_8_ = 0x100;\n  }\n  if (__ptr_00 != slotvec0) {\n    free(__ptr_00);\n    slotvec = slotvec0;\n  }\n  nslots = 1;\n  return;\n}\n\n", 
    "00107bc0": "\nvoid emit_bug_reporting_address(void)\n\n{\n  FILE *__stream;\n  undefined8 uVar1;\n  char *__s;\n  \n  uVar1 = dcgettext(0,\"\\nReport bugs to: %s\\n\",5);\n  __printf_chk(1,uVar1,\"bug-coreutils@gnu.org\");\n  uVar1 = dcgettext(0,\"%s home page: <%s>\\n\",5);\n  __printf_chk(1,uVar1,\"GNU coreutils\",\"https://www.gnu.org/software/coreutils/\");\n  __stream = stdout;\n  __s = (char *)dcgettext(0,\"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\",5);\n  fputs_unlocked(__s,__stream);\n  return;\n}\n\n", 
    "00112048": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint fclose(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fclose@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00108560": "\nulong close_stream(FILE *param_1)\n\n{\n  int iVar1;\n  long lVar2;\n  ulong uVar3;\n  int *piVar4;\n  \n  lVar2 = __fpending();\n  iVar1 = ferror_unlocked(param_1);\n  uVar3 = rpl_fclose(param_1);\n  if (iVar1 == 0) {\n    if ((int)uVar3 == 0) {\n      return uVar3;\n    }\n    if (lVar2 == 0) {\n      piVar4 = __errno_location();\n      return (ulong)-(uint)(*piVar4 != 9);\n    }\n  }\n  else if ((int)uVar3 == 0) {\n    piVar4 = __errno_location();\n    *piVar4 = 0;\n    return 0xffffffff;\n  }\n  return 0xffffffff;\n}\n\n", 
    "00107470": "\nvoid quotearg_n_custom_mem\n               (undefined4 param_1,undefined8 param_2,undefined8 param_3,undefined8 param_4,\n               undefined8 param_5)\n\n{\n  long in_FS_OFFSET;\n  undefined8 local_68;\n  undefined8 uStack_60;\n  undefined8 local_58;\n  undefined8 uStack_50;\n  undefined8 local_48;\n  undefined8 uStack_40;\n  undefined8 local_38;\n  long local_30;\n  \n  local_30 = *(long *)(in_FS_OFFSET + 0x28);\n  local_68 = default_quoting_options._0_8_;\n  uStack_60 = default_quoting_options._8_8_;\n  local_38 = default_quoting_options._48_8_;\n  local_58 = default_quoting_options._16_8_;\n  uStack_50 = default_quoting_options._24_8_;\n  local_48 = default_quoting_options._32_8_;\n  uStack_40 = default_quoting_options._40_8_;\n  set_custom_quoting(&local_68);\n  quotearg_n_options(param_1,param_4,param_5,&local_68);\n  if (local_30 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "00107590": "\nvoid quote(undefined8 param_1)\n\n{\n  quote_n(0,param_1);\n  return;\n}\n\n", 
    "00112168": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nuintmax_t strtoumax(char *__nptr,char **__endptr,int __base)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strtoumax@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "001056b0": "\nundefined8\nstrcaseeq3(long param_1,undefined8 param_2,byte param_3,char param_4,char param_5,char param_6,\n          char param_7)\n\n{\n  char cVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  \n  cVar1 = c_isupper((int)(char)param_3);\n  bVar2 = *(byte *)(param_1 + 3);\n  if (cVar1 != '\\0') {\n    bVar2 = bVar2 & 0xdf;\n  }\n  if (param_3 != bVar2) {\n    return 0;\n  }\n  if (param_3 == 0) {\n    return 1;\n  }\n  uVar3 = strcaseeq4(param_1,param_2,(int)param_4,(int)param_5,(int)param_6,(int)param_7);\n  return uVar3;\n}\n\n", 
    "00112170": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid __cxa_atexit(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __cxa_atexit@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00112050": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid bindtextdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* bindtextdomain@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00102f80": "\nvoid __do_global_dtors_aux(void)\n\n{\n  if (completed_8061 == '\\0') {\n    if (PTR___cxa_finalize_0010eff8 != (undefined *)0x0) {\n      __cxa_finalize(__dso_handle);\n    }\n    deregister_tm_clones();\n    completed_8061 = 1;\n    return;\n  }\n  return;\n}\n\n", 
    "00107b10": "\nvoid version_etc(void)\n\n{\n  long lVar1;\n  long in_FS_OFFSET;\n  \n  lVar1 = *(long *)(in_FS_OFFSET + 0x28);\n  version_etc_va();\n  if (lVar1 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "001023e0": "\nvoid textdomain(void)\n\n{\n  (*(code *)PTR_textdomain_0010ee78)();\n  return;\n}\n\n", 
    "001082a0": "\nsize_t rpl_mbrtowc(wchar_t *param_1,byte *param_2,size_t param_3,mbstate_t *param_4)\n\n{\n  char cVar1;\n  size_t sVar2;\n  long in_FS_OFFSET;\n  wchar_t local_34;\n  long local_30;\n  \n  local_30 = *(long *)(in_FS_OFFSET + 0x28);\n  if (param_1 == (wchar_t *)0x0) {\n    param_1 = &local_34;\n  }\n  sVar2 = mbrtowc(param_1,(char *)param_2,param_3,param_4);\n  if ((0xfffffffffffffffd < sVar2) && (param_3 != 0)) {\n    cVar1 = hard_locale(0);\n    if (cVar1 == '\\0') {\n      sVar2 = 1;\n      *param_1 = (uint)*param_2;\n    }\n  }\n  if (local_30 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return sVar2;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "001071b0": "\nvoid quotearg_n(undefined8 param_1,undefined8 param_2)\n\n{\n  quotearg_n_options(param_1,param_2,0xffffffffffffffff,default_quoting_options);\n  return;\n}\n\n", 
    "001072d0": "\nvoid quotearg_style(undefined4 param_1,undefined8 param_2)\n\n{\n  quotearg_n_style(0,param_1,param_2);\n  return;\n}\n\n", 
    "00107e70": "\nvoid xalloc_die(void)\n\n{\n  undefined8 uVar1;\n  \n  uVar1 = dcgettext(0,\"memory exhausted\",5);\n  error(exit_failure,0,\"%s\",uVar1);\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n", 
    "001084e0": "\nint c_toupper(int param_1)\n\n{\n  if (param_1 - 0x61U < 0x1a) {\n    param_1 = param_1 + -0x20;\n  }\n  return param_1;\n}\n\n", 
    "001120f8": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid __gmon_start__(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "00105600": "\nundefined8\nstrcaseeq4(long param_1,undefined8 param_2,byte param_3,char param_4,char param_5,char param_6,\n          char param_7)\n\n{\n  char cVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  \n  cVar1 = c_isupper((int)(char)param_3);\n  bVar2 = *(byte *)(param_1 + 4);\n  if (cVar1 != '\\0') {\n    bVar2 = bVar2 & 0xdf;\n  }\n  if (param_3 != bVar2) {\n    return 0;\n  }\n  if (param_3 == 0) {\n    return 1;\n  }\n  uVar3 = strcaseeq5(param_1,param_2,(int)param_4,(int)param_5,(int)param_6,(int)param_7);\n  return uVar3;\n}\n\n", 
    "001120c0": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint posix_fadvise(int __fd,__off_t __offset,__off_t __len,int __advise)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* posix_fadvise@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00102490": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = (char *)(*(code *)PTR_strrchr_0010eed0)();\n  return pcVar1;\n}\n\n", 
    "00102370": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid free(void *__ptr)\n\n{\n  (*(code *)PTR_free_0010ee40)();\n  return;\n}\n\n", 
    "00107260": "\nvoid quotearg_n_style_mem\n               (undefined4 param_1,undefined8 param_2,undefined8 param_3,undefined8 param_4)\n\n{\n  long in_FS_OFFSET;\n  undefined auStack_68 [56];\n  long local_30;\n  \n  local_30 = *(long *)(in_FS_OFFSET + 0x28);\n  quoting_options_from_style(auStack_68);\n  quotearg_n_options(param_1,param_3,param_4,auStack_68);\n  if (local_30 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "00112138": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nsize_t fwrite_unlocked(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fwrite_unlocked@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00112018": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint strncmp(char *__s1,char *__s2,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strncmp@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "001043b0": "\nvoid spec_init_isra_0(long *param_1,long *param_2)\n\n{\n  long lVar1;\n  \n  lVar1 = xmalloc(0x20);\n  *param_2 = lVar1;\n  *(undefined8 *)(lVar1 + 8) = 0;\n  *param_1 = lVar1;\n  return;\n}\n\n", 
    "00112140": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid * realloc(void *__ptr,size_t __size)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* realloc@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00112020": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid _ITM_deregisterTMCloneTable(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "001120c8": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* read@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "001071e0": "\nvoid quotearg(undefined8 param_1)\n\n{\n  quotearg_n(0,param_1);\n  return;\n}\n\n", 
    "001083f0": "\nbool c_islower(int param_1)\n\n{\n  return param_1 - 0x61U < 0x1a;\n}\n\n", 
    "00103210": "\nvoid append_repeated_char(long param_1,undefined param_2,undefined8 param_3)\n\n{\n  long lVar1;\n  undefined4 *puVar2;\n  \n  puVar2 = (undefined4 *)xmalloc(0x20);\n  lVar1 = *(long *)(param_1 + 8);\n  *(undefined8 *)(puVar2 + 2) = 0;\n  *puVar2 = 4;\n  *(undefined *)(puVar2 + 4) = param_2;\n  *(undefined8 *)(puVar2 + 6) = param_3;\n  if (lVar1 != 0) {\n    *(undefined4 **)(lVar1 + 8) = puVar2;\n    *(undefined4 **)(param_1 + 8) = puVar2;\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __assert_fail(\"list->tail\",\"src/tr.c\",0x2cf,\"append_repeated_char\");\n}\n\n", 
    "001120d0": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid __libc_start_main(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __libc_start_main@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00102000": "\nint _init(EVP_PKEY_CTX *ctx)\n\n{\n  undefined *puVar1;\n  \n  puVar1 = PTR___gmon_start___0010efe8;\n  if (PTR___gmon_start___0010efe8 != (undefined *)0x0) {\n    puVar1 = (undefined *)(*(code *)PTR___gmon_start___0010efe8)();\n  }\n  return (int)puVar1;\n}\n\n", 
    "00103ba0": "\nvoid get_spec_stats(long *param_1)\n\n{\n  uint uVar1;\n  uint *puVar2;\n  char cVar3;\n  undefined8 uVar4;\n  ulong uVar5;\n  int extraout_EDX;\n  int iVar6;\n  ulong uVar7;\n  ulong uVar8;\n  bool bVar9;\n  \n  uVar8 = 0;\n  *(undefined2 *)(param_1 + 6) = 0;\n  puVar2 = *(uint **)(*param_1 + 8);\n  param_1[4] = 0;\n  *(undefined *)((long)param_1 + 0x32) = 0;\n  do {\n    if (puVar2 == (uint *)0x0) {\n      param_1[3] = uVar8;\n      return;\n    }\n    if (4 < *puVar2) {\n                    /* WARNING: Subroutine does not return */\n      abort();\n    }\n    switch(*puVar2) {\n    case 0:\n      uVar7 = 1;\n      break;\n    case 1:\n      if (*(byte *)((long)puVar2 + 0x11) < *(byte *)(puVar2 + 4)) goto LAB_00103d0f;\n      uVar7 = (ulong)(int)(((uint)*(byte *)((long)puVar2 + 0x11) - (uint)*(byte *)(puVar2 + 4)) + 1)\n      ;\n      break;\n    case 2:\n      uVar1 = puVar2[4];\n      iVar6 = 0;\n      uVar7 = 0;\n      *(undefined *)((long)param_1 + 0x31) = 1;\n      do {\n        cVar3 = is_char_class_member(uVar1,iVar6);\n        uVar7 = (uVar7 + 1) - (ulong)(cVar3 == '\\0');\n        iVar6 = iVar6 + 1;\n      } while (iVar6 != 0x100);\n      if ((uVar1 - 6 & 0xfffffffb) != 0) {\n        *(undefined *)((long)param_1 + 0x32) = 1;\n      }\n      break;\n    case 3:\n      uVar5 = (ulong)*(byte *)(puVar2 + 4);\n      iVar6 = 0;\n      uVar7 = 0;\n      do {\n        cVar3 = is_equiv_class_member(uVar5 & 0xffffffff,iVar6);\n        uVar7 = (uVar7 + 1) - (ulong)(cVar3 == '\\0');\n        iVar6 = extraout_EDX + 1;\n      } while (iVar6 != 0x100);\n      *(undefined *)(param_1 + 6) = 1;\n      break;\n    case 4:\n      uVar7 = *(ulong *)(puVar2 + 6);\n      if (uVar7 != 0) break;\n      param_1[4] = param_1[4] + 1;\n      param_1[5] = (long)puVar2;\n      goto LAB_00103c39;\n    }\n    bVar9 = CARRY8(uVar7,uVar8);\n    uVar8 = uVar7 + uVar8;\n    if ((bVar9) || (uVar8 == 0xffffffffffffffff)) {\n      uVar4 = dcgettext(0,\"too many characters in set\",5);\n      error(1,0,uVar4);\nLAB_00103d0f:\n                    /* WARNING: Subroutine does not return */\n      __assert_fail(\"p->u.range.last_char >= p->u.range.first_char\",\"src/tr.c\",0x4ee,\n                    \"get_spec_stats\");\n    }\nLAB_00103c39:\n    puVar2 = *(uint **)(puVar2 + 2);\n  } while( true );\n}\n\n", 
    "00102480": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = (char *)(*(code *)PTR_strchr_0010eec8)();\n  return pcVar1;\n}\n\n", 
    "00102360": "\nvoid __cxa_finalize(void)\n\n{\n  (*(code *)PTR___cxa_finalize_0010eff8)();\n  return;\n}\n\n", 
    "00107010": "\nundefined8\nquotearg_alloc_mem(undefined8 param_1,undefined8 param_2,long *param_3,undefined1 *param_4)\n\n{\n  int iVar1;\n  int *piVar2;\n  long lVar3;\n  undefined8 uVar4;\n  uint uVar5;\n  \n  if ((undefined4 *)param_4 == (undefined4 *)0x0) {\n    param_4 = default_quoting_options;\n  }\n  piVar2 = __errno_location();\n  iVar1 = *piVar2;\n  uVar5 = (uint)(param_3 == (long *)0x0) | *(uint *)((long)param_4 + 4);\n  lVar3 = quotearg_buffer_restyled\n                    (0,0,param_1,param_2,*(undefined4 *)param_4,uVar5,\n                     (undefined4 *)((long)param_4 + 8),*(undefined8 *)((long)param_4 + 0x28),\n                     *(undefined8 *)((long)param_4 + 0x30));\n  uVar4 = xcharalloc(lVar3 + 1);\n  quotearg_buffer_restyled\n            (uVar4,lVar3 + 1,param_1,param_2,*(undefined4 *)param_4,uVar5,\n             (undefined4 *)((long)param_4 + 8),*(undefined8 *)((long)param_4 + 0x28),\n             *(undefined8 *)((long)param_4 + 0x30));\n  *piVar2 = iVar1;\n  if (param_3 != (long *)0x0) {\n    *param_3 = lVar3;\n  }\n  return uVar4;\n}\n\n", 
    "00112148": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nchar * setlocale(int __category,char *__locale)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* setlocale@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00108460": "\nbool c_isspace(int param_1)\n\n{\n  if (param_1 < 0xe) {\n    return 8 < param_1;\n  }\n  return param_1 == 0x20;\n}\n\n", 
    "00105190": "\nvoid close_stdout_set_file_name(undefined8 param_1)\n\n{\n  file_name = param_1;\n  return;\n}\n\n", 
    "00112028": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid _exit(int __status)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* _exit@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00112150": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid __printf_chk(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __printf_chk@@GLIBC_2.3.4 */\n  halt_baddata();\n}\n\n", 
    "00112030": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid __fpending(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __fpending@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00103d30": "\nvoid get_s2_spec_stats(long param_1,ulong param_2)\n\n{\n  get_spec_stats();\n  if ((*(ulong *)(param_1 + 0x18) <= param_2) && (*(long *)(param_1 + 0x20) == 1)) {\n    *(ulong *)(*(long *)(param_1 + 0x28) + 0x18) = param_2 - *(ulong *)(param_1 + 0x18);\n    *(ulong *)(param_1 + 0x18) = param_2;\n  }\n  return;\n}\n\n", 
    "001120d8": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint memcmp(void *__s1,void *__s2,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memcmp@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00107c50": "\nvoid xmalloc(size_t param_1)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(param_1);\n  if ((pvVar1 == (void *)0x0) && (param_1 != 0)) {\n                    /* WARNING: Subroutine does not return */\n    xalloc_die();\n  }\n  return;\n}\n\n", 
    "001071d0": "\nvoid quotearg_n_mem(void)\n\n{\n  quotearg_n_options();\n  return;\n}\n\n", 
    "001083e0": "\nbool c_isgraph(int param_1)\n\n{\n  return param_1 - 0x21U < 0x5e;\n}\n\n", 
    "00102670": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint iswprint(wint_t __wc)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_iswprint_0010efc0)();\n  return iVar1;\n}\n\n", 
    "00102ee0": "\nvoid _start(undefined8 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  undefined8 unaff_retaddr;\n  undefined auStack_8 [8];\n  \n  (*(code *)PTR___libc_start_main_0010efe0)\n            (main,unaff_retaddr,&stack0x00000008,__libc_csu_init,__libc_csu_fini,param_3,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n", 
    "00102550": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint fileno(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_fileno_0010ef30)();\n  return iVar1;\n}\n\n", 
    "00102430": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nsize_t __ctype_get_mb_cur_max(void)\n\n{\n  size_t sVar1;\n  \n  sVar1 = (*(code *)PTR___ctype_get_mb_cur_max_0010eea0)();\n  return sVar1;\n}\n\n", 
    "00107200": "\nvoid quotearg_n_style(undefined4 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  long in_FS_OFFSET;\n  undefined auStack_58 [56];\n  long local_20;\n  \n  local_20 = *(long *)(in_FS_OFFSET + 0x28);\n  quoting_options_from_style(auStack_58);\n  quotearg_n_options(param_1,param_3,0xffffffffffffffff,auStack_58);\n  if (local_20 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "00108410": "\nulong c_ispunct(int param_1)\n\n{\n  ulong in_RAX;\n  \n  if (0x60 < param_1) {\n    return in_RAX & 0xffffffffffffff00 | (ulong)(param_1 - 0x7bU < 4);\n  }\n  if (param_1 < 0x5b) {\n    if (param_1 < 0x30) {\n      return in_RAX & 0xffffffffffffff00 | (ulong)(0x20 < param_1);\n    }\n    return in_RAX & 0xffffffffffffff00 | (ulong)(param_1 - 0x3aU < 7);\n  }\n  return 1;\n}\n\n", 
    "00107cb0": "\nvoid * xrealloc(void *param_1,size_t param_2)\n\n{\n  void *pvVar1;\n  \n  if ((param_2 == 0) && (param_1 != (void *)0x0)) {\n    free(param_1);\n    return (void *)0x0;\n  }\n  pvVar1 = realloc(param_1,param_2);\n  if ((pvVar1 == (void *)0x0) && (param_2 != 0)) {\n                    /* WARNING: Subroutine does not return */\n    xalloc_die();\n  }\n  return pvVar1;\n}\n\n", 
    "001120a0": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* lseek@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00104170": "\nvoid validate_case_classes(long param_1,long param_2)\n\n{\n  ushort *puVar1;\n  ulong uVar2;\n  ulong uVar3;\n  undefined8 uVar4;\n  long lVar5;\n  int iVar6;\n  int iVar7;\n  ushort **ppuVar8;\n  undefined8 uVar9;\n  int extraout_EDX;\n  ushort *puVar10;\n  long lVar11;\n  long lVar12;\n  long in_FS_OFFSET;\n  char cVar13;\n  char local_81;\n  int local_48;\n  int local_44;\n  long local_40;\n  \n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  cVar13 = *(char *)(param_2 + 0x31);\n  if (cVar13 != '\\0') {\n    lVar12 = 0;\n    lVar11 = 0;\n    ppuVar8 = __ctype_b_loc();\n    puVar10 = *ppuVar8;\n    puVar1 = puVar10 + 0x100;\n    do {\n      lVar11 = (lVar11 + 1) - (ulong)((*puVar10 & 0x100) == 0);\n      lVar12 = (lVar12 + 1) - (ulong)((*puVar10 & 0x200) == 0);\n      puVar10 = puVar10 + 1;\n    } while (puVar10 != puVar1);\n    uVar2 = *(ulong *)(param_1 + 0x18);\n    uVar3 = *(ulong *)(param_2 + 0x18);\n    uVar9 = *(undefined8 *)(param_1 + 8);\n    uVar4 = *(undefined8 *)(param_2 + 8);\n    *(undefined8 *)(param_1 + 0x10) = 0xfffffffffffffffe;\n    *(undefined8 *)(param_2 + 0x10) = 0xfffffffffffffffe;\n    local_81 = cVar13;\n    do {\n      iVar6 = get_next(param_1,&local_48);\n      iVar7 = get_next(param_2,&local_44);\n      if (cVar13 == '\\0') {\n        if (local_44 != 2) {\nLAB_0010426d:\n          skip_construct_isra_0(param_1 + 8,param_1 + 0x10);\n          skip_construct_isra_0(param_2 + 8,param_2 + 0x10);\n          lVar5 = lVar12;\n          if (local_48 == 1) {\n            lVar5 = lVar11;\n          }\n          *(long *)(param_1 + 0x18) = *(long *)(param_1 + 0x18) - (lVar5 + -1);\n          lVar5 = lVar12;\n          if (local_44 == 1) {\n            lVar5 = lVar11;\n          }\n          *(long *)(param_2 + 0x18) = *(long *)(param_2 + 0x18) - (lVar5 + -1);\n          iVar7 = extraout_EDX;\n        }\n      }\n      else if (local_44 != 2) {\n        if ((local_81 != '\\0') && (local_48 != 2)) goto LAB_0010426d;\n        uVar9 = dcgettext(0,\"misaligned [:upper:] and/or [:lower:] construct\",5);\n        error(1,0,uVar9);\n        goto LAB_00104387;\n      }\n      local_81 = *(long *)(param_1 + 0x10) == -1;\n      cVar13 = *(long *)(param_2 + 0x10) == -1;\n    } while ((iVar6 != -1) && (iVar7 != -1));\n    if ((uVar2 <= *(ulong *)(param_1 + 0x18) && *(ulong *)(param_1 + 0x18) != uVar2) ||\n       (uVar3 <= *(ulong *)(param_2 + 0x18) && *(ulong *)(param_2 + 0x18) != uVar3)) {\nLAB_00104387:\n                    /* WARNING: Subroutine does not return */\n      __assert_fail(\"old_s1_len >= s1->length && old_s2_len >= s2->length\",\"src/tr.c\",0x4c5,\n                    \"validate_case_classes\");\n    }\n    *(undefined8 *)(param_1 + 8) = uVar9;\n    *(undefined8 *)(param_2 + 8) = uVar4;\n  }\n  if (local_40 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return;\n}\n\n", 
    "00105260": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint fdadvise(int __fd,__off_t __offset,__off_t __len,int __advise)\n\n{\n  int iVar1;\n  \n  iVar1 = posix_fadvise(__fd,__offset,__len,__advise);\n  return iVar1;\n}\n\n", 
    "00107560": "\nvoid quote_n_mem(void)\n\n{\n  quotearg_n_options();\n  return;\n}\n\n", 
    "00112118": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid * malloc(size_t __size)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* malloc@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "001025f0": "\nvoid error(void)\n\n{\n  (*(code *)PTR_error_0010ef80)();\n  return;\n}\n\n", 
    "001036e0": "\nchar * make_printable_str(byte *param_1,long param_2)\n\n{\n  byte bVar1;\n  char *pcVar2;\n  char *__dest;\n  ushort **ppuVar3;\n  byte *pbVar4;\n  byte *__src;\n  long in_FS_OFFSET;\n  byte local_45;\n  undefined local_44;\n  long local_40;\n  \n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  pcVar2 = (char *)xnmalloc(param_2 + 1,4);\n  if (param_2 != 0) {\n    pbVar4 = param_1 + param_2;\n    __dest = pcVar2;\n    do {\n      bVar1 = *param_1;\n      if ((char)bVar1 < '\\x0e') {\n        if ((char)bVar1 < '\\a') {\nLAB_001037e9:\n          ppuVar3 = __ctype_b_loc();\n          if ((*(byte *)((long)*ppuVar3 + (ulong)bVar1 * 2 + 1) & 0x40) == 0) {\n            __src = &local_45;\n            __sprintf_chk(__src,1,5,\"\\\\%03o\",(ulong)bVar1);\n          }\n          else {\n            __src = &local_45;\n            local_44 = 0;\n            local_45 = bVar1;\n          }\n        }\n        else {\n          __src = &DAT_0010902f;\n          switch(bVar1) {\n          case 8:\n            __src = &DAT_00109032;\n            break;\n          case 9:\n            __src = &DAT_0010903e;\n            break;\n          case 10:\n            __src = &DAT_00109038;\n            break;\n          case 0xb:\n            __src = &DAT_00109041;\n            break;\n          case 0xc:\n            __src = &DAT_00109035;\n            break;\n          case 0xd:\n            __src = &DAT_0010903b;\n          }\n        }\n      }\n      else {\n        __src = &DAT_00109044;\n        if (bVar1 != 0x5c) goto LAB_001037e9;\n      }\n      param_1 = param_1 + 1;\n      __dest = stpcpy(__dest,(char *)__src);\n    } while (pbVar4 != param_1);\n  }\n  if (local_40 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return pcVar2;\n}\n\n", 
    "001059e0": "\nchar * gettext_quote(char *param_1,int param_2)\n\n{\n  int iVar1;\n  char *pcVar2;\n  undefined8 uVar3;\n  \n  pcVar2 = (char *)dcgettext(0,param_1,5);\n  if (param_1 == pcVar2) {\n    uVar3 = locale_charset();\n    iVar1 = strcaseeq0_constprop_0(uVar3,\"UTF-8\",0x55,0x54,0x46,0x2d,0x38,0,0);\n    if (iVar1 == 0) {\n      iVar1 = strcaseeq0_constprop_0(uVar3,\"GB18030\",0x47,0x42,0x31,0x38,0x30,0x33,0x30);\n      if (iVar1 == 0) {\n        pcVar2 = \"\\\"\";\n        if (param_2 != 9) {\n          pcVar2 = \"\\'\";\n        }\n        return pcVar2;\n      }\n      if (*pcVar2 == '`') {\n        pcVar2 = &DAT_0010a541;\n      }\n      else {\n        pcVar2 = &DAT_0010a53e;\n      }\n    }\n    else if (*pcVar2 == '`') {\n      pcVar2 = &DAT_0010a545;\n    }\n    else {\n      pcVar2 = &DAT_0010a53a;\n    }\n  }\n  return pcVar2;\n}\n\n", 
    "001024d0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_close_0010eef0)();\n  return iVar1;\n}\n\n", 
    "001023b0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid _exit(int __status)\n\n{\n  (*(code *)PTR__exit_0010ee60)();\n  return;\n}\n\n", 
    "001047d0": "\nvoid es_free_isra_0(void *param_1,void **param_2)\n\n{\n  free(param_1);\n  free(*param_2);\n  return;\n}\n\n", 
    "00112000": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid free(void *__ptr)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* free@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00107d20": "\nvoid x2nrealloc(long param_1,ulong *param_2,ulong param_3)\n\n{\n  undefined auVar1 [16];\n  ulong uVar2;\n  ulong uVar3;\n  \n  uVar3 = *param_2;\n  if (param_1 == 0) {\n    if (uVar3 == 0) {\n      uVar3 = (ulong)(0x80 < param_3) +\n              SUB168((ZEXT816(0) << 0x40 | ZEXT816(0x80)) / ZEXT816(param_3),0);\n    }\n    uVar2 = (ulong)(SUB168(ZEXT816(uVar3) * ZEXT816(param_3) >> 0x40,0) != 0);\n    if ((SUB168(ZEXT816(uVar3) * ZEXT816(param_3),0) < 0) || (uVar2 != 0)) goto LAB_00107d7b;\n  }\n  else {\n    auVar1 = ZEXT816(0) << 0x40 | ZEXT816(0x5555555555555554);\n    uVar2 = SUB168(auVar1 % ZEXT816(param_3),0);\n    if (SUB168(auVar1 / ZEXT816(param_3),0) <= uVar3) {\nLAB_00107d7b:\n                    /* WARNING: Subroutine does not return */\n      xalloc_die(param_1,uVar3,uVar2);\n    }\n    uVar3 = (uVar3 >> 1) + 1 + uVar3;\n  }\n  *param_2 = uVar3;\n  xrealloc(param_1,uVar3 * param_3);\n  return;\n}\n\n", 
    "001073c0": "\nvoid quotearg_colon_mem(undefined8 param_1,undefined8 param_2)\n\n{\n  quotearg_char_mem(param_1,param_2,0x3a);\n  return;\n}\n\n", 
    "001085d0": "\nbool hard_locale(int param_1)\n\n{\n  byte *pbVar1;\n  long lVar2;\n  byte *pbVar3;\n  bool bVar4;\n  bool bVar5;\n  byte bVar6;\n  \n  bVar6 = 0;\n  pbVar1 = (byte *)setlocale(param_1,(char *)0x0);\n  bVar4 = true;\n  if (pbVar1 != (byte *)0x0) {\n    bVar4 = *pbVar1 < 0x43;\n    bVar5 = *pbVar1 == 0x43;\n    if (bVar5) {\n      bVar4 = false;\n      bVar5 = pbVar1[1] == 0;\n      if (bVar5) {\n        return false;\n      }\n    }\n    lVar2 = 6;\n    pbVar3 = (byte *)\"POSIX\";\n    do {\n      if (lVar2 == 0) break;\n      lVar2 = lVar2 + -1;\n      bVar4 = *pbVar1 < *pbVar3;\n      bVar5 = *pbVar1 == *pbVar3;\n      pbVar1 = pbVar1 + (ulong)bVar6 * -2 + 1;\n      pbVar3 = pbVar3 + (ulong)bVar6 * -2 + 1;\n    } while (bVar5);\n    bVar4 = (!bVar4 && !bVar5) != bVar4;\n  }\n  return bVar4;\n}\n\n", 
    "00112120": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint fflush(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fflush@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "001040f0": "\nvoid set_initialize(long param_1,char param_2,byte *param_3)\n\n{\n  byte *pbVar1;\n  int iVar2;\n  \n  *(undefined8 *)(param_1 + 0x10) = 0xfffffffffffffffe;\n  while( true ) {\n    iVar2 = get_next(param_1,0);\n    if (iVar2 == -1) break;\n    param_3[iVar2] = 1;\n  }\n  if (param_2 != '\\0') {\n    pbVar1 = param_3 + 0x100;\n    do {\n      *param_3 = *param_3 ^ 1;\n      param_3 = param_3 + 1;\n    } while (param_3 != pbVar1);\n  }\n  return;\n}\n\n", 
    "00106e70": "\nvoid clone_quoting_options(undefined1 *param_1)\n\n{\n  int iVar1;\n  int *piVar2;\n  \n  piVar2 = __errno_location();\n  iVar1 = *piVar2;\n  if (param_1 == (undefined1 *)0x0) {\n    param_1 = default_quoting_options;\n  }\n  xmemdup(param_1,0x38);\n  *piVar2 = iVar1;\n  return;\n}\n\n", 
    "001086f0": "\nvoid clear_ungetc_buffer_preserving_position(uint *param_1)\n\n{\n  if ((*param_1 & 0x100) == 0) {\n    return;\n  }\n  rpl_fseeko(param_1,0,1);\n  return;\n}\n\n", 
    "00106f90": "\nvoid quotearg_buffer(undefined8 param_1,undefined8 param_2,undefined8 param_3,undefined8 param_4,\n                    undefined1 *param_5)\n\n{\n  int iVar1;\n  int *piVar2;\n  \n  if ((undefined4 *)param_5 == (undefined4 *)0x0) {\n    param_5 = default_quoting_options;\n  }\n  piVar2 = __errno_location();\n  iVar1 = *piVar2;\n  quotearg_buffer_restyled\n            (param_1,param_2,param_3,param_4,*(undefined4 *)param_5,\n             *(undefined4 *)((long)param_5 + 4),(undefined4 *)((long)param_5 + 8),\n             *(undefined8 *)((long)param_5 + 0x28),*(undefined8 *)((long)param_5 + 0x30));\n  *piVar2 = iVar1;\n  return;\n}\n\n", 
    "00105930": "\nundefined8\nstrcaseeq0_constprop_0\n          (byte *param_1,undefined8 param_2,byte param_3,char param_4,char param_5,char param_6,\n          char param_7,char param_8,char param_9)\n\n{\n  char cVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  \n  cVar1 = c_isupper((int)(char)param_3);\n  bVar2 = *param_1;\n  if (cVar1 != '\\0') {\n    bVar2 = bVar2 & 0xdf;\n  }\n  uVar3 = 0;\n  if (bVar2 == param_3) {\n    uVar3 = strcaseeq1(param_1,param_2,(int)param_4,(int)param_5,(int)param_6,(int)param_7,\n                       (int)param_8,(int)param_9,0,0);\n  }\n  return uVar3;\n}\n\n", 
    "001120a8": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __assert_fail@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00103870": "\nundefined8\nfind_bracketed_repeat(long *param_1,long param_2,undefined *param_3,long *param_4,ulong *param_5)\n\n{\n  ulong uVar1;\n  char cVar2;\n  int iVar3;\n  undefined8 uVar4;\n  void *__ptr;\n  undefined8 uVar5;\n  char *pcVar6;\n  long lVar7;\n  ulong uVar8;\n  ulong uVar9;\n  long in_FS_OFFSET;\n  char *local_38;\n  long local_30;\n  \n  uVar9 = param_1[2];\n  local_30 = *(long *)(in_FS_OFFSET + 0x28);\n  if (uVar9 <= param_2 + 1U) {\n                    /* WARNING: Subroutine does not return */\n    __assert_fail(\"start_idx + 1 < es->len\",\"src/tr.c\",0x30e,\"find_bracketed_repeat\");\n  }\n  cVar2 = es_match(param_1,param_2 + 1U,0x2a);\n  if ((cVar2 != '\\0') && (uVar1 = param_2 + 2, uVar1 < uVar9)) {\n    uVar8 = uVar1;\n    while (*(char *)(param_1[1] + uVar8) == '\\0') {\n      if (*(char *)(*param_1 + uVar8) == ']') {\n        lVar7 = (uVar8 - param_2) + -2;\n        *param_3 = *(undefined *)(*param_1 + param_2);\n        if (lVar7 == 0) {\n          *param_4 = 0;\n          uVar4 = 0;\n          *param_5 = uVar8;\n        }\n        else {\n          pcVar6 = (char *)(uVar1 + *param_1);\n          iVar3 = xstrtoumax(pcVar6,&local_38,(*pcVar6 != '0') * '\\x02' + '\\b',param_4,0);\n          if (((iVar3 == 0) && (*param_4 != -1)) && (local_38 == pcVar6 + lVar7)) {\n            *param_5 = uVar8;\n            uVar4 = 0;\n          }\n          else {\n            __ptr = (void *)make_printable_str(pcVar6,lVar7);\n            uVar4 = quote(__ptr);\n            uVar5 = dcgettext(0,\"invalid repeat count %s in [c*n] construct\",5);\n            error(0,0,uVar5,uVar4);\n            free(__ptr);\n            uVar4 = 0xfffffffe;\n          }\n        }\n        goto LAB_001038ed;\n      }\n      uVar8 = uVar8 + 1;\n      if (uVar9 <= uVar8) break;\n    }\n  }\n  uVar4 = 0xffffffff;\nLAB_001038ed:\n  if (local_30 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return uVar4;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "00102660": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint mbsinit(mbstate_t *__ps)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_mbsinit_0010efb8)();\n  return iVar1;\n}\n\n", 
    "00102540": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = (void *)(*(code *)PTR_memcpy_0010ef28)();\n  return pvVar1;\n}\n\n", 
    "00102420": "\nvoid dcgettext(void)\n\n{\n  (*(code *)PTR_dcgettext_0010ee98)();\n  return;\n}\n\n", 
    "00104960": "\nvoid validate(long param_1,long param_2)\n\n{\n  char cVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  ulong uVar4;\n  size_t sVar5;\n  int *piVar6;\n  size_t sVar7;\n  long extraout_RDX;\n  ulong extraout_RDX_00;\n  long extraout_RDX_01;\n  long lVar8;\n  ulong uVar9;\n  ulong uVar10;\n  ulong uVar11;\n  code *pcVar12;\n  undefined1 *__ptr;\n  ulong uVar13;\n  \n  get_s1_spec_stats();\n  if (*(long *)(param_1 + 0x20) == 0) {\n    if (param_2 == 0) {\n      return;\n    }\n    get_s2_spec_stats(param_2,*(undefined8 *)(param_1 + 0x18));\n    if (1 < *(ulong *)(param_2 + 0x20)) goto LAB_00104a6c;\n    if (translating == '\\0') {\n      if (*(ulong *)(param_2 + 0x20) == 0) {\n        return;\n      }\n      uVar3 = dcgettext(0,\"the [c*] construct may appear in string2 only when translating\",5);\n      error(1,0,uVar3);\n      goto LAB_00104a48;\n    }\n    if (*(char *)(param_2 + 0x30) != '\\0') goto LAB_00104ab4;\n    if (*(char *)(param_2 + 0x32) == '\\0') {\n      validate_case_classes(param_1,param_2);\n      uVar13 = *(ulong *)(param_2 + 0x18);\n      if ((uVar13 <= *(ulong *)(param_1 + 0x18) && *(ulong *)(param_1 + 0x18) != uVar13) &&\n         (truncate_set1 == '\\0')) {\n        if (uVar13 == 0) goto LAB_00104afc;\n        string2_extend_isra_0(param_1 + 0x18,param_2);\n      }\n      if (complement == '\\0') {\n        return;\n      }\n      if (*(char *)(param_1 + 0x31) == '\\0') {\n        return;\n      }\n      if ((*(long *)(param_2 + 0x18) == *(long *)(param_1 + 0x18)) &&\n         (cVar1 = homogeneous_spec_list(param_2), cVar1 != '\\0')) {\n        return;\n      }\n      goto LAB_00104a90;\n    }\n  }\n  else {\nLAB_00104a48:\n    uVar3 = dcgettext(0,\"the [c*] repeat construct may not appear in string1\",5);\n    error(1,0,uVar3);\nLAB_00104a6c:\n    uVar3 = dcgettext(0,\"only one [c*] repeat construct may appear in string2\",5);\n    error(1,0,uVar3);\nLAB_00104a90:\n    uVar3 = dcgettext(0,\n                      \"when translating with complemented character classes,\\nstring2 must map all characters in the domain to one\"\n                      ,5);\n    error(1,0,uVar3);\nLAB_00104ab4:\n    uVar3 = dcgettext(0,\"[=c=] expressions may not appear in string2 when translating\",5);\n    error(1,0,uVar3);\n  }\n  uVar3 = dcgettext(0,\n                    \"when translating, the only character classes that may appear in\\nstring2 are \\'upper\\' and \\'lower\\'\"\n                    ,5);\n  error(1,0,uVar3);\nLAB_00104afc:\n  uVar3 = dcgettext(0,\"when not truncating set1, string2 must be non-empty\",5);\n  pcVar12 = (code *)0x1;\n  error(1,0,uVar3);\n  uVar9 = 0;\n  uVar13 = 0x7fffffff;\n  uVar4 = 0;\nLAB_00104b49:\n  do {\n    if (uVar9 < uVar4) goto LAB_00104b99;\nLAB_00104b4e:\n    uVar4 = (*pcVar12)(io_buf,0x2000);\n    if (uVar4 == 0) {\n      return;\n    }\n    if ((int)uVar13 == 0x7fffffff) {\n      __ptr = io_buf;\n      uVar11 = 0;\n      goto LAB_00104ba9;\n    }\n    uVar9 = 0;\nLAB_00104b74:\n  } while (uVar4 <= uVar9);\nLAB_00104b80:\n  if ((int)(char)io_buf[uVar9] == (int)uVar13) goto LAB_00104c58;\n  uVar13 = 0x7fffffff;\n  if (uVar9 < uVar4) goto LAB_00104b99;\n  goto LAB_00104b4e;\nLAB_00104b99:\n  if ((int)uVar13 == 0x7fffffff) {\nLAB_00104ba2:\n    __ptr = io_buf + uVar9;\n    uVar11 = uVar9;\nLAB_00104ba9:\n    do {\n      uVar9 = uVar11;\n      cVar1 = io_buf[uVar9];\n      uVar13 = (ulong)(uint)(int)cVar1;\n      bVar2 = to_uchar(uVar13);\n      if (in_squeeze_set[bVar2] != '\\0') {\n        lVar8 = extraout_RDX;\n        uVar10 = uVar9;\n        if (uVar9 < uVar4) goto LAB_00104bd1;\n        uVar13 = uVar4 - extraout_RDX;\n        goto LAB_00104cb6;\n      }\n      uVar11 = uVar9 + 2;\n    } while (uVar11 < uVar4);\n    lVar8 = extraout_RDX;\n    if (uVar11 == uVar4) {\n      uVar10 = uVar9 + 1;\n      cVar1 = io_buf[uVar9 + 1];\n      uVar13 = (ulong)(uint)(int)cVar1;\n      bVar2 = to_uchar(uVar13);\n      lVar8 = extraout_RDX_01;\n      if ((in_squeeze_set[bVar2] != '\\0') && (uVar11 = uVar10, uVar10 < uVar4)) {\nLAB_00104bd1:\n        sVar7 = (uVar10 - lVar8) + 1;\n        if ((uVar10 != 0) && (in_squeeze_set[uVar10 + 0xff] == cVar1)) {\n          sVar7 = uVar10 - lVar8;\n        }\n        uVar9 = uVar10 + 1;\n        if ((sVar7 == 0) || (sVar5 = fwrite_unlocked(io_buf + lVar8,1,sVar7,stdout), sVar7 == sVar5)\n           ) goto LAB_00104b74;\nLAB_00104c27:\n        pcVar12 = (code *)dcgettext(0,\"write error\",5);\n        piVar6 = __errno_location();\n        error(1,*piVar6,pcVar12);\n        uVar9 = extraout_RDX_00;\nLAB_00104c58:\n        uVar9 = uVar9 + 1;\n        if (uVar9 == uVar4) goto LAB_00104b49;\n        goto LAB_00104b80;\n      }\n    }\n    uVar9 = uVar11;\n    uVar13 = uVar4 - lVar8;\n    if (uVar13 != 0) {\n      __ptr = io_buf + lVar8;\nLAB_00104cb6:\n      sVar7 = fwrite_unlocked(__ptr,1,uVar13,stdout);\n      if (uVar13 != sVar7) goto LAB_00104c27;\n    }\n    uVar13 = 0x7fffffff;\n    if (uVar4 <= uVar9) goto LAB_00104b4e;\n    goto LAB_00104ba2;\n  }\n  goto LAB_00104b80;\n}\n\n", 
    "00108400": "\nbool c_isprint(int param_1)\n\n{\n  return param_1 - 0x20U < 0x5f;\n}\n\n", 
    "00107ca0": "\nvoid xcharalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n", 
    "00107dc0": "\nvoid xzalloc(size_t param_1)\n\n{\n  void *__s;\n  \n  __s = (void *)xmalloc();\n  memset(__s,0,param_1);\n  return;\n}\n\n", 
    "001120b0": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid * memset(void *__s,int __c,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memset@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00105010": "\nvoid usage(int param_1)\n\n{\n  FILE *pFVar1;\n  undefined8 uVar2;\n  undefined8 uVar3;\n  char *pcVar4;\n  \n  uVar2 = program_name;\n  if (param_1 == 0) {\n    uVar3 = dcgettext(0,\"Usage: %s [OPTION]... SET1 [SET2]\\n\",5);\n    __printf_chk(1,uVar3,uVar2);\n    pFVar1 = stdout;\n    pcVar4 = (char *)dcgettext(0,\n                               \"Translate, squeeze, and/or delete characters from standard input,\\nwriting to standard output.\\n\\n  -c, -C, --complement    use the complement of SET1\\n  -d, --delete            delete characters in SET1, do not translate\\n  -s, --squeeze-repeats   replace each sequence of a repeated character\\n                            that is listed in the last specified SET,\\n                            with a single occurrence of that character\\n  -t, --truncate-set1     first truncate SET1 to length of SET2\\n\"\n                               ,5);\n    fputs_unlocked(pcVar4,pFVar1);\n    pFVar1 = stdout;\n    pcVar4 = (char *)dcgettext(0,\"      --help     display this help and exit\\n\",5);\n    fputs_unlocked(pcVar4,pFVar1);\n    pFVar1 = stdout;\n    pcVar4 = (char *)dcgettext(0,\"      --version  output version information and exit\\n\",5);\n    fputs_unlocked(pcVar4,pFVar1);\n    pFVar1 = stdout;\n    pcVar4 = (char *)dcgettext(0,\n                               \"\\nSETs are specified as strings of characters.  Most represent themselves.\\nInterpreted sequences are:\\n\\n  \\\\NNN            character with octal value NNN (1 to 3 octal digits)\\n  \\\\\\\\              backslash\\n  \\\\a              audible BEL\\n  \\\\b              backspace\\n  \\\\f              form feed\\n  \\\\n              new line\\n  \\\\r              return\\n  \\\\t              horizontal tab\\n\"\n                               ,5);\n    fputs_unlocked(pcVar4,pFVar1);\n    pFVar1 = stdout;\n    pcVar4 = (char *)dcgettext(0,\n                               \"  \\\\v              vertical tab\\n  CHAR1-CHAR2     all characters from CHAR1 to CHAR2 in ascending order\\n  [CHAR*]         in SET2, copies of CHAR until length of SET1\\n  [CHAR*REPEAT]   REPEAT copies of CHAR, REPEAT octal if starting with 0\\n  [:alnum:]       all letters and digits\\n  [:alpha:]       all letters\\n  [:blank:]       all horizontal whitespace\\n  [:cntrl:]       all control characters\\n  [:digit:]       all digits\\n\"\n                               ,5);\n    fputs_unlocked(pcVar4,pFVar1);\n    pFVar1 = stdout;\n    pcVar4 = (char *)dcgettext(0,\n                               \"  [:graph:]       all printable characters, not including space\\n  [:lower:]       all lower case letters\\n  [:print:]       all printable characters, including space\\n  [:punct:]       all punctuation characters\\n  [:space:]       all horizontal or vertical whitespace\\n  [:upper:]       all upper case letters\\n  [:xdigit:]      all hexadecimal digits\\n  [=CHAR=]        all characters which are equivalent to CHAR\\n\"\n                               ,5);\n    fputs_unlocked(pcVar4,pFVar1);\n    pFVar1 = stdout;\n    pcVar4 = (char *)dcgettext(0,\n                               \"\\nTranslation occurs if -d is not given and both SET1 and SET2 appear.\\n-t may be used only when translating.  SET2 is extended to length of\\nSET1 by repeating its last character as necessary.  Excess characters\\nof SET2 are ignored.  Only [:lower:] and [:upper:] are guaranteed to\\nexpand in ascending order; used in SET2 while translating, they may\\nonly be used in pairs to specify case conversion.  -s uses the last\\nspecified SET, and occurs after translation or deletion.\\n\"\n                               ,5);\n    fputs_unlocked(pcVar4,pFVar1);\n    emit_ancillary_info_constprop_0();\n  }\n  else {\n    uVar3 = dcgettext(0,\"Try \\'%s --help\\' for more information.\\n\",5);\n    __fprintf_chk(stderr,1,uVar3,uVar2);\n  }\n                    /* WARNING: Subroutine does not return */\n  exit(param_1);\n}\n\n", 
    "00106cd0": "\nundefined1 *\nquotearg_n_options(int param_1,undefined8 param_2,undefined8 param_3,undefined4 *param_4)\n\n{\n  long lVar1;\n  int iVar2;\n  uint uVar3;\n  undefined4 uVar4;\n  ulong uVar5;\n  int *piVar6;\n  undefined1 (*pauVar7) [16];\n  ulong uVar8;\n  undefined1 *__ptr;\n  \n  piVar6 = __errno_location();\n  iVar2 = *piVar6;\n  if (param_1 < 0) {\n                    /* WARNING: Subroutine does not return */\n    abort();\n  }\n  pauVar7 = (undefined1 (*) [16])slotvec;\n  if (nslots <= param_1) {\n    if (param_1 == 0x7fffffff) {\n                    /* WARNING: Subroutine does not return */\n      xalloc_die();\n    }\n    if (slotvec == slotvec0) {\n      pauVar7 = (undefined1 (*) [16])xrealloc(0);\n      slotvec = (undefined *)pauVar7;\n      *pauVar7 = slotvec0;\n    }\n    else {\n      pauVar7 = (undefined1 (*) [16])xrealloc(slotvec);\n      slotvec = (undefined *)pauVar7;\n    }\n    memset(pauVar7[nslots],0,(long)((param_1 + 1) - nslots) << 4);\n    nslots = param_1 + 1;\n  }\n  uVar3 = param_4[1];\n  pauVar7 = pauVar7[param_1];\n  uVar5 = *(ulong *)*pauVar7;\n  __ptr = *(undefined1 **)(*pauVar7 + 8);\n  uVar8 = quotearg_buffer_restyled\n                    (__ptr,uVar5,param_2,param_3,*param_4,uVar3 | 1,param_4 + 2,\n                     *(undefined8 *)(param_4 + 10),*(undefined8 *)(param_4 + 0xc));\n  if (uVar5 <= uVar8) {\n    lVar1 = uVar8 + 1;\n    *(long *)*pauVar7 = lVar1;\n    if (__ptr != slot0) {\n      free(__ptr);\n    }\n    __ptr = (undefined1 *)xcharalloc(lVar1);\n    uVar4 = *param_4;\n    *(undefined1 **)(*pauVar7 + 8) = __ptr;\n    quotearg_buffer_restyled\n              (__ptr,lVar1,param_2,param_3,uVar4,uVar3 | 1,param_4 + 2,*(undefined8 *)(param_4 + 10)\n               ,*(undefined8 *)(param_4 + 0xc));\n  }\n  *piVar6 = iVar2;\n  return __ptr;\n}\n\n", 
    "00107ee0": "\nuint bkm_scale_by_power(undefined8 param_1,uint param_2,int param_3)\n\n{\n  uint uVar1;\n  uint uVar2;\n  ulong uVar3;\n  \n  uVar3 = (ulong)param_2;\n  param_3 = param_3 + -1;\n  uVar2 = 0;\n  do {\n    uVar1 = bkm_scale(param_1,uVar3 & 0xffffffff);\n    param_3 = param_3 + -1;\n    uVar2 = uVar2 | uVar1;\n  } while (param_3 != -1);\n  return uVar2;\n}\n\n", 
    "00103070": "\nundefined8 star_digits_closebracket(long *param_1,long param_2)\n\n{\n  char cVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  long lVar4;\n  ulong extraout_RDX;\n  ulong uVar5;\n  long *plVar6;\n  \n  plVar6 = param_1;\n  cVar1 = es_match(param_1,param_2,0x2a);\n  if (cVar1 != '\\0') {\n    uVar5 = param_2 + 1;\n    if (uVar5 < (ulong)param_1[2]) {\n      lVar4 = *param_1;\n      do {\n        bVar2 = to_uchar((int)*(char *)(lVar4 + uVar5));\n        if ((9 < bVar2 - 0x30) || (*(char *)(plVar6[1] + uVar5) != '\\0')) {\n          uVar3 = es_match(plVar6);\n          return uVar3;\n        }\n        uVar5 = uVar5 + 1;\n      } while (uVar5 < extraout_RDX);\n    }\n  }\n  return 0;\n}\n\n", 
    "00112008": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid abort(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* abort@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00112128": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nchar * nl_langinfo(nl_item __item)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* nl_langinfo@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "001025e0": "\nvoid __printf_chk(void)\n\n{\n  (*(code *)PTR___printf_chk_0010ef78)();\n  return;\n}\n\n", 
    "001024c0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid * memset(void *__s,int __c,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = (void *)(*(code *)PTR_memset_0010eee8)();\n  return pvVar1;\n}\n\n", 
    "00102f40": "\n/* WARNING: Removing unreachable block (ram,0x00102f64) */\n/* WARNING: Removing unreachable block (ram,0x00102f70) */\n\nvoid register_tm_clones(void)\n\n{\n  return;\n}\n\n", 
    "001023a0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint strncmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_strncmp_0010ee58)();\n  return iVar1;\n}\n\n", 
    "001073b0": "\nvoid quotearg_colon(undefined8 param_1)\n\n{\n  quotearg_char(param_1,0x3a);\n  return;\n}\n\n", 
    "00112130": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid __freading(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __freading@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00112010": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint * __errno_location(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __errno_location@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00102410": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nchar * stpcpy(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = (char *)(*(code *)PTR_stpcpy_0010ee90)();\n  return pcVar1;\n}\n\n", 
    "001120b8": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint close(int __fd)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* close@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00102450": "\nvoid __stack_chk_fail(void)\n\n{\n  (*(code *)PTR___stack_chk_fail_0010eeb0)();\n  return;\n}\n\n", 
    "00105840": "\nundefined8\nstrcaseeq1(long param_1,undefined8 param_2,byte param_3,char param_4,char param_5,char param_6,\n          char param_7)\n\n{\n  char cVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  \n  cVar1 = c_isupper((int)(char)param_3);\n  bVar2 = *(byte *)(param_1 + 1);\n  if (cVar1 != '\\0') {\n    bVar2 = bVar2 & 0xdf;\n  }\n  if (param_3 != bVar2) {\n    return 0;\n  }\n  if (param_3 == 0) {\n    return 1;\n  }\n  uVar3 = strcaseeq2(param_1,param_2,(int)param_4,(int)param_5,(int)param_6,(int)param_7);\n  return uVar3;\n}\n\n", 
    "001121a0": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint iswprint(wint_t __wc)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* iswprint@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00102690": "\nvoid __sprintf_chk(void)\n\n{\n  (*(code *)PTR___sprintf_chk_0010efd0)();\n  return;\n}\n\n", 
    "00107100": "\nvoid quotearg_alloc(undefined8 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  quotearg_alloc_mem(param_1,param_2,0,param_3);\n  return;\n}\n\n", 
    "00102570": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = (void *)(*(code *)PTR_malloc_0010ef40)();\n  return pvVar1;\n}\n\n", 
    "00104070": "\nvoid get_s1_spec_stats(long param_1)\n\n{\n  int iVar1;\n  \n  get_spec_stats();\n  if (complement == '\\0') {\n    return;\n  }\n  iVar1 = card_of_complement(param_1);\n  *(long *)(param_1 + 0x18) = (long)iVar1;\n  return;\n}\n\n", 
    "00107580": "\nvoid quote_n(undefined8 param_1,undefined8 param_2)\n\n{\n  quote_n_mem(param_1,param_2,0xffffffffffffffff);\n  return;\n}\n\n", 
    "001023d0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint toupper(int __c)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_toupper_0010ee70)();\n  return iVar1;\n}\n\n", 
    "001047f0": "\nundefined4 parse_str(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined4 uVar1;\n  long in_FS_OFFSET;\n  undefined8 local_38;\n  undefined local_30 [16];\n  long local_20;\n  \n  local_20 = *(long *)(in_FS_OFFSET + 0x28);\n  uVar1 = unquote(param_1,&local_38);\n  if ((char)uVar1 != '\\0') {\n    uVar1 = build_spec_list(&local_38,param_2);\n  }\n  es_free_isra_0(local_38,local_30);\n  if (local_20 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return uVar1;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "00112100": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memcpy@@GLIBC_2.14 */\n  halt_baddata();\n}\n\n", 
    "001024f0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = (*(code *)PTR_read_0010ef00)();\n  return sVar1;\n}\n\n", 
    "001083b0": "\nulong c_iscntrl(uint param_1)\n\n{\n  ulong in_RAX;\n  \n  if ((int)param_1 < 0x20) {\n    return (ulong)(~param_1 >> 0x1f);\n  }\n  return in_RAX & 0xffffffffffffff00 | (ulong)(param_1 == 0x7f);\n}\n\n", 
    "001121a8": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nushort ** __ctype_b_loc(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __ctype_b_loc@@GLIBC_2.3 */\n  halt_baddata();\n}\n\n", 
    "00102560": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint tolower(int __c)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_tolower_0010ef38)();\n  return iVar1;\n}\n\n", 
    "00104860": "\nvoid string2_extend_isra_0(ulong *param_1,long param_2)\n\n{\n  undefined uVar1;\n  uint uVar2;\n  ulong uVar3;\n  uint *puVar4;\n  undefined8 uVar5;\n  \n  if (translating == '\\0') {\n                    /* WARNING: Subroutine does not return */\n    __assert_fail(\"translating\",\"src/tr.c\",0x55e,\"string2_extend\");\n  }\n  uVar3 = *(ulong *)(param_2 + 0x18);\n  if (*param_1 <= uVar3) {\n                    /* WARNING: Subroutine does not return */\n    __assert_fail(\"s1->length > s2->length\",\"src/tr.c\",0x55f,\"string2_extend\");\n  }\n  if (uVar3 != 0) {\n    puVar4 = *(uint **)(param_2 + 8);\n    uVar2 = *puVar4;\n    if (uVar2 == 1) {\n      uVar1 = *(undefined *)((long)puVar4 + 0x11);\n    }\n    else {\n      if (1 < uVar2) {\n        if (uVar2 == 2) {\n          uVar5 = dcgettext(0,\n                            \"when translating with string1 longer than string2,\\nthe latter string must not end with a character class\"\n                            ,5);\n          error(1,0,uVar5);\n          goto LAB_001048f1;\n        }\n        if (uVar2 != 4) {\n          string2_extend_isra_0_cold();\n          return;\n        }\n      }\n      uVar1 = *(undefined *)(puVar4 + 4);\n    }\n    append_repeated_char(param_2,uVar1,*param_1 - uVar3);\n    *(ulong *)(param_2 + 0x18) = *param_1;\n    return;\n  }\nLAB_001048f1:\n                    /* WARNING: Subroutine does not return */\n  __assert_fail(\"s2->length > 0\",\"src/tr.c\",0x560,\"string2_extend\");\n}\n\n", 
    "00102440": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = (*(code *)PTR_strlen_0010eea8)();\n  return sVar1;\n}\n\n", 
    "00103fe0": "\nint card_of_complement(long param_1)\n\n{\n  byte bVar1;\n  int iVar2;\n  long lVar3;\n  undefined8 *puVar4;\n  int iVar5;\n  long in_FS_OFFSET;\n  undefined8 auStack_128 [33];\n  long local_20;\n  \n  iVar5 = 0x100;\n  local_20 = *(long *)(in_FS_OFFSET + 0x28);\n  *(undefined8 *)(param_1 + 0x10) = 0xfffffffffffffffe;\n  puVar4 = auStack_128;\n  for (lVar3 = 0x20; lVar3 != 0; lVar3 = lVar3 + -1) {\n    *puVar4 = 0;\n    puVar4 = puVar4 + 1;\n  }\n  while (iVar2 = get_next(param_1,0), iVar2 != -1) {\n    bVar1 = *(byte *)((long)auStack_128 + (long)iVar2);\n    *(undefined *)((long)auStack_128 + (long)iVar2) = 1;\n    iVar5 = iVar5 - (uint)(bVar1 ^ 1);\n  }\n  if (local_20 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return iVar5;\n}\n\n", 
    "00102680": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nushort ** __ctype_b_loc(void)\n\n{\n  ushort **ppuVar1;\n  \n  ppuVar1 = (ushort **)(*(code *)PTR___ctype_b_loc_0010efc8)();\n  return ppuVar1;\n}\n\n", 
    "001121b0": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid __sprintf_chk(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __sprintf_chk@@GLIBC_2.3.4 */\n  halt_baddata();\n}\n\n", 
    "00107de0": "\nvoid xcalloc(size_t param_1,ulong param_2)\n\n{\n  void *pvVar1;\n  \n  if ((-1 < SUB168(ZEXT816(param_1) * ZEXT816(param_2),0)) &&\n     (SUB168(ZEXT816(param_1) * ZEXT816(param_2) >> 0x40,0) == 0)) {\n    pvVar1 = calloc(param_1,param_2);\n    if (pvVar1 != (void *)0x0) {\n      return;\n    }\n  }\n                    /* WARNING: Subroutine does not return */\n  xalloc_die();\n}\n\n", 
    "00108660": "\nint rpl_fclose(FILE *param_1)\n\n{\n  int iVar1;\n  int iVar2;\n  int *piVar3;\n  __off_t _Var4;\n  \n  iVar1 = fileno(param_1);\n  if (-1 < iVar1) {\n    iVar1 = __freading();\n    if (iVar1 != 0) {\n      iVar1 = fileno(param_1);\n      _Var4 = lseek(iVar1,0,1);\n      if (_Var4 == -1) goto LAB_001086cf;\n    }\n    iVar1 = rpl_fflush(param_1);\n    if (iVar1 != 0) {\n      piVar3 = __errno_location();\n      iVar1 = *piVar3;\n      iVar2 = fclose(param_1);\n      if (iVar1 != 0) {\n        *piVar3 = iVar1;\n        iVar2 = -1;\n      }\n      return iVar2;\n    }\n  }\nLAB_001086cf:\n  iVar1 = fclose(param_1);\n  return iVar1;\n}\n\n", 
    "00107570": "\nvoid quote_mem(undefined8 param_1,undefined8 param_2)\n\n{\n  quote_n_mem(0,param_1,param_2);\n  return;\n}\n\n", 
    "00105270": "\nvoid fadvise(FILE *param_1,int param_2)\n\n{\n  int __fd;\n  \n  if (param_1 != (FILE *)0x0) {\n    __fd = fileno(param_1);\n    fdadvise(__fd,0,0,param_2);\n    return;\n  }\n  return;\n}\n\n", 
    "00112108": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint fileno(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fileno@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "001024e0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint posix_fadvise(int __fd,__off_t __offset,__off_t __len,int __advise)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_posix_fadvise_0010eef8)();\n  return iVar1;\n}\n\n", 
    "001023c0": "\nvoid __fpending(void)\n\n{\n  (*(code *)PTR___fpending_0010ee68)();\n  return;\n}\n\n", 
    "00112110": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint tolower(int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* tolower@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00107e50": "\nvoid xstrdup(char *param_1)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(param_1);\n  xmemdup(param_1,sVar1 + 1);\n  return;\n}\n\n", 
    "001084c0": "\nint c_tolower(int param_1)\n\n{\n  if (param_1 - 0x41U < 0x1a) {\n    param_1 = param_1 + 0x20;\n  }\n  return param_1;\n}\n\n", 
    "001073d0": "\nvoid quotearg_n_style_colon(undefined4 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  undefined8 *puVar1;\n  long in_FS_OFFSET;\n  undefined8 local_98;\n  undefined8 uStack_90;\n  undefined8 local_88;\n  undefined8 uStack_80;\n  undefined8 local_78;\n  undefined8 uStack_70;\n  undefined8 local_68;\n  undefined8 local_58;\n  undefined8 uStack_50;\n  undefined8 local_48;\n  undefined8 uStack_40;\n  undefined8 local_38;\n  undefined8 uStack_30;\n  undefined8 local_28;\n  long local_20;\n  \n  local_20 = *(long *)(in_FS_OFFSET + 0x28);\n  quoting_options_from_style(&local_98);\n  puVar1 = &local_58;\n  local_58 = local_98;\n  uStack_50 = uStack_90;\n  local_48 = local_88;\n  uStack_40 = uStack_80;\n  local_38 = local_78;\n  uStack_30 = uStack_70;\n  local_28 = local_68;\n  set_char_quoting(puVar1,0x3a,1);\n  quotearg_n_options(param_1,param_3,0xffffffffffffffff,puVar1);\n  if (local_20 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "001121b8": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid __cxa_finalize(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __cxa_finalize@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00107520": "\nvoid quotearg_custom(undefined8 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  quotearg_n_custom(0,param_1,param_2,param_3);\n  return;\n}\n\n", 
    "00107eb0": "\nbool bkm_scale(ulong *param_1,int param_2)\n\n{\n  ulong uVar1;\n  bool bVar2;\n  \n  uVar1 = SUB168(ZEXT816((ulong)(long)param_2) * ZEXT816(*param_1),0);\n  bVar2 = SUB168(ZEXT816((ulong)(long)param_2) * ZEXT816(*param_1) >> 0x40,0) != 0;\n  if (bVar2) {\n    uVar1 = 0xffffffffffffffff;\n  }\n  *param_1 = uVar1;\n  return bVar2;\n}\n\n", 
    "00108850": "\nint atexit(__func *__func)\n\n{\n  int iVar1;\n  \n  iVar1 = __cxa_atexit(__func,0,__dso_handle);\n  return iVar1;\n}\n\n", 
    "00103280": "\nvoid append_normal_char(long param_1,undefined param_2)\n\n{\n  long lVar1;\n  undefined4 *puVar2;\n  \n  puVar2 = (undefined4 *)xmalloc(0x20);\n  lVar1 = *(long *)(param_1 + 8);\n  *(undefined8 *)(puVar2 + 2) = 0;\n  *puVar2 = 0;\n  *(undefined *)(puVar2 + 4) = param_2;\n  if (lVar1 != 0) {\n    *(undefined4 **)(lVar1 + 8) = puVar2;\n    *(undefined4 **)(param_1 + 8) = puVar2;\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __assert_fail(\"list->tail\",\"src/tr.c\",0x287,\"append_normal_char\");\n}\n\n", 
    "001025b0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nsize_t fwrite_unlocked(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = (*(code *)PTR_fwrite_unlocked_0010ef60)();\n  return sVar1;\n}\n\n", 
    "00102f10": "\n/* WARNING: Removing unreachable block (ram,0x00102f23) */\n/* WARNING: Removing unreachable block (ram,0x00102f2f) */\n\nvoid deregister_tm_clones(void)\n\n{\n  return;\n}\n\n", 
    "001026d0": "\nint main(int param_1,undefined1 *param_2)\n\n{\n  ushort *puVar1;\n  char cVar2;\n  int iVar3;\n  int iVar4;\n  undefined8 *puVar5;\n  long lVar6;\n  ushort **ppuVar7;\n  undefined8 uVar8;\n  int *piVar9;\n  undefined8 uVar10;\n  undefined1 *puVar11;\n  char *pcVar12;\n  ushort *puVar13;\n  uint uVar14;\n  undefined1 *puVar15;\n  long in_FS_OFFSET;\n  undefined *local_e0;\n  byte local_d1;\n  int local_c0;\n  int local_bc;\n  undefined local_b8 [8];\n  undefined local_b0 [8];\n  undefined8 local_a8 [6];\n  ushort local_78 [4];\n  undefined local_70 [48];\n  long local_40;\n  \n  puVar11 = (undefined1 *)(long)param_1;\n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  set_program_name(*(undefined8 *)param_2);\n  setlocale(6,\"\");\n  bindtextdomain(\"coreutils\",\"/usr/local/share/locale\");\n  textdomain(\"coreutils\");\n  atexit(close_stdout);\n  while (iVar3 = getopt_long(param_1,param_2,\"+AcCdst\",long_options,0), iVar3 != -1) {\n    if (iVar3 == 99) {\nLAB_001027a0:\n      complement = '\\x01';\n    }\n    else if (iVar3 < 100) {\n      if (iVar3 != 0x41) {\n        if (0x41 < iVar3) {\n          if (iVar3 == 0x43) goto LAB_001027a0;\n          goto LAB_00102dbf;\n        }\n        if (iVar3 == -0x83) {\n          version_etc(stdout,&DAT_001090df,\"GNU coreutils\",Version,\"Jim Meyering\",0);\n                    /* WARNING: Subroutine does not return */\n          exit(0);\n        }\n        if (iVar3 != -0x82) goto LAB_00102dbf;\n        usage(0);\n      }\n      setlocale(3,\"C\");\n      setlocale(0,\"C\");\n    }\n    else if (iVar3 == 0x73) {\n      squeeze_repeats = 1;\n    }\n    else if (iVar3 == 0x74) {\n      truncate_set1 = '\\x01';\n    }\n    else {\n      if (iVar3 != 100) goto LAB_00102dbf;\n      delete = 1;\n    }\n  }\n  uVar14 = param_1 - optind;\n  if (uVar14 == 2) {\n    if (delete == 0) {\n      translating = '\\x01';\n      iVar3 = 2;\n      if (squeeze_repeats != 0) goto LAB_0010288c;\n    }\n    else {\n      translating = '\\0';\n      if (squeeze_repeats == 0) goto LAB_00102877;\n    }\n    spec_init_isra_0(local_b8,local_b0);\n    cVar2 = parse_str(*(undefined8 *)((long)param_2 + (long)optind * 8),local_b8);\n    if (cVar2 != '\\0') {\nLAB_00102b28:\n      puVar11 = local_b8;\n      puVar13 = local_78;\n      spec_init_isra_0(puVar13,local_70);\n      cVar2 = parse_str(*(undefined8 *)((long)param_2 + ((long)optind + 1) * 8),puVar13);\n      if (cVar2 != '\\0') {\n        validate(puVar11,puVar13);\n        fadvise(stdin,2);\n        local_d1 = squeeze_repeats;\n        puVar15 = (undefined1 *)puVar13;\n        if ((delete == 0) || (squeeze_repeats == 0)) goto LAB_001029c9;\n        set_initialize(puVar11,complement,in_delete_set);\n        set_initialize(puVar13,0,in_squeeze_set);\n        squeeze_filter_constprop_0();\n        goto LAB_00102926;\n      }\n    }\nLAB_00102ad1:\n    iVar3 = 1;\nLAB_00102935:\n    if (local_40 == *(long *)(in_FS_OFFSET + 0x28)) {\n      return iVar3;\n    }\n    goto LAB_00102dc9;\n  }\n  if (squeeze_repeats == delete) {\n    iVar4 = 2;\n    iVar3 = 2;\n  }\n  else {\nLAB_00102877:\n    iVar4 = 1;\n    iVar3 = 2 - (uint)(squeeze_repeats < delete);\n  }\n  translating = '\\0';\n  if ((int)uVar14 < iVar4) {\nLAB_00102e52:\n    if (uVar14 == 0) {\n      uVar8 = dcgettext(0,\"missing operand\",5);\n      error(0,0,uVar8);\n    }\n    else {\n      uVar8 = quote(*(undefined8 *)((long)param_2 + (puVar11 + -1) * 8));\n      uVar10 = dcgettext(0,\"missing operand after %s\",5);\n      error(0,0,uVar10,uVar8);\n      pcVar12 = \"Two strings must be given when both deleting and squeezing repeats.\";\n      if (squeeze_repeats == 0) {\n        pcVar12 = \"Two strings must be given when translating.\";\n      }\nLAB_00102d9b:\n      uVar8 = dcgettext(0,pcVar12,5);\n      __fprintf_chk(stderr,1,\"%s\\n\",uVar8);\n    }\n  }\n  else {\nLAB_0010288c:\n    if ((int)uVar14 <= iVar3) {\n      spec_init_isra_0(local_b8,local_b0);\n      cVar2 = parse_str(*(undefined8 *)((long)param_2 + (long)optind * 8),local_b8);\n      if (cVar2 == '\\0') goto LAB_00102ad1;\n      if (uVar14 == 2) goto LAB_00102b28;\n      validate(local_b8,0);\n      fadvise(stdin,2);\n      local_d1 = squeeze_repeats;\n      puVar15 = (undefined1 *)(ulong)uVar14;\n      if ((uVar14 == 1) && (squeeze_repeats != 0)) {\n        set_initialize(local_b8,complement,in_squeeze_set);\n        squeeze_filter_constprop_0();\n        puVar11 = local_b8;\n        goto LAB_00102926;\n      }\n      puVar13 = (ushort *)0x0;\n      if (delete == 0) {\nLAB_001029c9:\n        local_e0 = local_b0;\n        puVar11 = local_b8;\n        squeeze_repeats = local_d1;\n        if (translating == '\\0') {\nLAB_00102926:\n          uVar14 = (uint)puVar15;\n          iVar3 = close(0);\n          if (iVar3 == 0) goto LAB_00102935;\n          uVar8 = dcgettext(0,\"standard input\",5);\n          piVar9 = __errno_location();\n          error(1,*piVar9,uVar8);\n        }\n        else {\n          lVar6 = 0;\n          param_2 = xlate;\n          if (complement == '\\0') {\n            do {\n              xlate[lVar6] = (char)lVar6;\n              lVar6 = lVar6 + 1;\n            } while (lVar6 != 0x100);\n            local_a8[0] = 0xfffffffffffffffe;\n            *(undefined8 *)(puVar13 + 8) = 0xfffffffffffffffe;\nLAB_00102a56:\n            iVar3 = get_next(puVar11,&local_c0);\n            iVar4 = get_next(puVar13,&local_bc);\n            if (local_c0 == 0) {\n              if (local_bc != 1) goto LAB_00102a36;\n              ppuVar7 = __ctype_b_loc();\n              puVar15 = (undefined1 *)0x0;\n              puVar1 = *ppuVar7;\n              do {\n                if ((*(byte *)((long)puVar1 + (long)puVar15 * 2 + 1) & 2) != 0) {\n                  iVar3 = toupper((int)puVar15);\n                  *(char *)((long)puVar15 + 0x10f0e0) = (char)iVar3;\n                }\n                puVar15 = (undefined1 *)((long)puVar15 + 1);\n              } while ((ushort *)puVar15 != (ushort *)0x100);\n              goto LAB_00102ab1;\n            }\n            if ((local_c0 == 1) && (local_bc == 0)) {\n              ppuVar7 = __ctype_b_loc();\n              lVar6 = 0;\n              puVar15 = (undefined1 *)*ppuVar7;\n              do {\n                if ((*(byte *)((long)puVar15 + lVar6 * 2 + 1) & 1) != 0) {\n                  iVar3 = tolower((int)lVar6);\n                  xlate[lVar6] = (char)iVar3;\n                }\n                lVar6 = lVar6 + 1;\n              } while (lVar6 != 0x100);\n              goto LAB_00102ab1;\n            }\nLAB_00102a36:\n            if (iVar3 != -1) {\n              if (iVar4 != -1) goto code_r0x00102a49;\n              if ((iVar3 != -1) && (truncate_set1 == '\\0')) {\n                    /* WARNING: Subroutine does not return */\n                __assert_fail(\"c1 == -1 || truncate_set1\",\"src/tr.c\",0x762,\n                              (char *)&__PRETTY_FUNCTION___7484);\n              }\n            }\n            goto LAB_00102c15;\n          }\n          set_initialize(puVar11,0,in_delete_set);\n          lVar6 = 0;\n          *(undefined8 *)(puVar13 + 8) = 0xfffffffffffffffe;\n          do {\n            xlate[lVar6] = (char)lVar6;\n            lVar6 = lVar6 + 1;\n          } while (lVar6 != 0x100);\n          lVar6 = 0;\n          puVar15 = in_delete_set;\n          do {\n            if (in_delete_set[lVar6] == '\\0') {\n              iVar3 = get_next(puVar13,0);\n              if (iVar3 == -1) {\n                if (truncate_set1 == '\\0') {\n                    /* WARNING: Subroutine does not return */\n                  __assert_fail(\"ch != -1 || truncate_set1\",\"src/tr.c\",0x72d,\n                                (char *)&__PRETTY_FUNCTION___7484);\n                }\n                break;\n              }\n              xlate[lVar6] = (char)iVar3;\n            }\n            lVar6 = lVar6 + 1;\n          } while (lVar6 != 0x100);\nLAB_00102c15:\n          uVar14 = (uint)puVar15;\n          puVar11 = io_buf;\n          if (local_d1 != 0) {\n            set_initialize(puVar13,0,in_squeeze_set);\n            squeeze_filter_constprop_0();\n            goto LAB_00102926;\n          }\n          do {\n            param_2 = (undefined1 *)read_and_xlate(io_buf,0x2000);\n            if ((undefined8 *)param_2 == (undefined8 *)0x0) goto LAB_00102926;\n            puVar5 = (undefined8 *)fwrite_unlocked(io_buf,1,(size_t)param_2,stdout);\n          } while (puVar5 == (undefined8 *)param_2);\n        }\n        uVar8 = dcgettext(0,\"write error\",5);\n        piVar9 = __errno_location();\n        error(1,*piVar9,uVar8);\n      }\n      else {\n        uVar14 = uVar14 - 1;\n        puVar15 = (undefined1 *)(ulong)uVar14;\n        if (uVar14 != 0) goto LAB_001029c9;\n        puVar11 = io_buf;\n        set_initialize(local_b8,complement,in_delete_set);\n        do {\n          param_2 = (undefined1 *)read_and_delete(io_buf,0x2000);\n          if ((undefined8 *)param_2 == (undefined8 *)0x0) goto LAB_00102926;\n          puVar5 = (undefined8 *)fwrite_unlocked(io_buf,1,(size_t)param_2,stdout);\n        } while (puVar5 == (undefined8 *)param_2);\n      }\n      uVar8 = dcgettext(0,\"write error\",5);\n      piVar9 = __errno_location();\n      error(1,*piVar9,uVar8);\n      goto LAB_00102e52;\n    }\n    uVar8 = quote(*(undefined8 *)((long)param_2 + (long)(iVar3 + optind) * 8));\n    uVar10 = dcgettext(0,\"extra operand %s\",5);\n    error(0,0,uVar10,uVar8);\n    pcVar12 = \"Only one string may be given when deleting without squeezing repeats.\";\n    if (uVar14 == 2) goto LAB_00102d9b;\n  }\nLAB_00102dbf:\n  usage(1);\nLAB_00102dc9:\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\ncode_r0x00102a49:\n  xlate[iVar3] = (char)iVar4;\n  if (local_bc != 2) {\nLAB_00102ab1:\n    skip_construct_isra_0(local_e0,local_a8);\n    skip_construct_isra_0(puVar13 + 4,puVar13 + 8);\n  }\n  goto LAB_00102a56;\n}\n\n", 
    "001051a0": "\nvoid close_stdout_set_ignore_EPIPE(undefined param_1)\n\n{\n  ignore_EPIPE = param_1;\n  return;\n}\n\n", 
    "00106f50": "\nvoid set_custom_quoting(undefined1 *param_1,long param_2,long param_3)\n\n{\n  if ((undefined4 *)param_1 == (undefined4 *)0x0) {\n    param_1 = default_quoting_options;\n  }\n  *(undefined4 *)param_1 = 10;\n  if ((param_2 != 0) && (param_3 != 0)) {\n    *(long *)((long)param_1 + 0x28) = param_2;\n    *(long *)((long)param_1 + 0x30) = param_3;\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n", 
    "001087d0": "\nvoid __libc_csu_init(EVP_PKEY_CTX *param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  long lVar1;\n  \n  _init(param_1);\n  lVar1 = 0;\n  do {\n    (*(code *)(&__frame_dummy_init_array_entry)[lVar1])((ulong)param_1 & 0xffffffff,param_2,param_3)\n    ;\n    lVar1 = lVar1 + 1;\n  } while (lVar1 != 1);\n  return;\n}\n\n", 
    "001030e0": "\nulong plain_read(undefined8 param_1,undefined8 param_2)\n\n{\n  byte bVar1;\n  ulong uVar2;\n  undefined8 uVar3;\n  int *piVar4;\n  undefined *puVar5;\n  long extraout_RDX;\n  ulong uVar7;\n  undefined uVar8;\n  long lVar9;\n  undefined *puVar10;\n  ulong uVar6;\n  \n  uVar2 = safe_read(0,param_1,param_2);\n  if (uVar2 != 0xffffffffffffffff) {\n    return uVar2;\n  }\n  uVar3 = dcgettext(0,\"read error\",5);\n  piVar4 = __errno_location();\n  lVar9 = 1;\n  error(1,*piVar4,uVar3);\n  do {\n    uVar2 = plain_read(lVar9);\n    if (uVar2 == 0) {\n      return 0;\n    }\n    uVar6 = 0;\n    do {\n      uVar7 = uVar6;\n      bVar1 = to_uchar((int)*(char *)(lVar9 + uVar7));\n      uVar6 = uVar7 + 1;\n      if (in_delete_set[bVar1] != '\\0') {\n        if (uVar6 < uVar2) goto LAB_00103179;\n        goto LAB_001031a3;\n      }\n    } while (uVar2 != uVar6);\n    uVar6 = uVar7 + 2;\n    uVar7 = uVar2;\n    if (uVar2 <= uVar6) {\n      return uVar2;\n    }\nLAB_00103179:\n    puVar5 = (undefined *)(uVar6 + lVar9);\n    puVar10 = (undefined *)(uVar2 + lVar9);\n    do {\n      uVar8 = *puVar5;\n      bVar1 = to_uchar();\n      if (in_delete_set[bVar1] == '\\0') {\n        *(undefined *)(lVar9 + uVar7) = uVar8;\n        uVar7 = uVar7 + 1;\n      }\n      puVar5 = (undefined *)(extraout_RDX + 1);\n    } while (puVar10 != puVar5);\nLAB_001031a3:\n    if (uVar7 != 0) {\n      return uVar7;\n    }\n  } while( true );\n}\n\n", 
    "001026be": "\nvoid quotearg_n_options_cold(void)\n\n{\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n", 
    "00102620": "\nvoid __cxa_atexit(void)\n\n{\n  (*(code *)PTR___cxa_atexit_0010ef98)();\n  return;\n}\n\n", 
    "00102500": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint memcmp(void *__s1,void *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_memcmp_0010ef08)();\n  return iVar1;\n}\n\n", 
    "00107a80": "\nvoid version_etc_va(void)\n\n{\n  uint uVar1;\n  long *plVar2;\n  long lVar3;\n  uint *in_R8;\n  long lVar4;\n  long in_FS_OFFSET;\n  long local_68 [11];\n  long local_10;\n  \n  lVar4 = 0;\n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  do {\n    uVar1 = *in_R8;\n    if (uVar1 < 0x30) {\n      *in_R8 = uVar1 + 8;\n      lVar3 = *(long *)((ulong)uVar1 + *(long *)(in_R8 + 4));\n      local_68[lVar4] = lVar3;\n    }\n    else {\n      plVar2 = *(long **)(in_R8 + 2);\n      *(long **)(in_R8 + 2) = plVar2 + 1;\n      lVar3 = *plVar2;\n      local_68[lVar4] = lVar3;\n    }\n  } while ((lVar3 != 0) && (lVar4 = lVar4 + 1, lVar4 != 10));\n  version_etc_arn();\n  if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "00107510": "\nvoid quotearg_n_custom(void)\n\n{\n  quotearg_n_custom_mem();\n  return;\n}\n\n", 
    "001026c8": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid version_etc_arn_cold(void)\n\n{\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n", 
    "00108840": "\nvoid __libc_csu_fini(void)\n\n{\n  return;\n}\n\n", 
    "00106ed0": "\nvoid set_quoting_style(undefined1 *param_1,undefined4 param_2)\n\n{\n  if ((undefined4 *)param_1 == (undefined4 *)0x0) {\n    param_1 = default_quoting_options;\n  }\n  *(undefined4 *)param_1 = param_2;\n  return;\n}\n\n", 
    "001025a0": "\nvoid __freading(void)\n\n{\n  (*(code *)PTR___freading_0010ef58)();\n  return;\n}\n\n", 
    "001026c3": "\nvoid set_custom_quoting_cold(void)\n\n{\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n", 
    "00107f10": "\nuint xstrtoumax(byte *param_1,byte **param_2,uint param_3,uintmax_t *param_4,char *param_5)\n\n{\n  byte bVar1;\n  uint uVar2;\n  int *piVar3;\n  ushort **ppuVar4;\n  byte *pbVar5;\n  uintmax_t uVar6;\n  char *pcVar7;\n  int iVar8;\n  undefined8 uVar9;\n  uint uVar10;\n  byte bVar11;\n  long in_FS_OFFSET;\n  byte *local_50;\n  uintmax_t local_48;\n  long local_40;\n  \n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  if (0x24 < param_3) {\n                    /* WARNING: Subroutine does not return */\n    __assert_fail(\"0 <= strtol_base && strtol_base <= 36\",\"lib/xstrtol.c\",0x60,\"xstrtoumax\");\n  }\n  if (param_2 == (byte **)0x0) {\n    param_2 = &local_50;\n  }\n  piVar3 = __errno_location();\n  *piVar3 = 0;\n  bVar11 = *param_1;\n  ppuVar4 = __ctype_b_loc();\n  pbVar5 = param_1;\n  while ((*(byte *)((long)*ppuVar4 + (ulong)bVar11 * 2 + 1) & 0x20) != 0) {\n    bVar11 = pbVar5[1];\n    pbVar5 = pbVar5 + 1;\n  }\n  if (bVar11 != 0x2d) {\n    uVar6 = strtoumax((char *)param_1,(char **)param_2,param_3);\n    pbVar5 = *param_2;\n    local_48 = uVar6;\n    if (pbVar5 != param_1) {\n      if (*piVar3 == 0) {\n        uVar10 = 0;\n      }\n      else {\n        uVar10 = 1;\n        if (*piVar3 != 0x22) goto LAB_0010800b;\n      }\n      if ((param_5 != (char *)0x0) && (bVar11 = *pbVar5, bVar11 != 0)) {\n        iVar8 = (int)(char)bVar11;\nLAB_0010804c:\n        pcVar7 = strchr(param_5,iVar8);\n        if (pcVar7 == (char *)0x0) {\nswitchD_001080a0_caseD_43:\n          uVar10 = uVar10 | 2;\n          *param_4 = local_48;\n          goto LAB_00107fd2;\n        }\n        switch(bVar11) {\n        case 0x45:\n        case 0x47:\n        case 0x4b:\n        case 0x4d:\n        case 0x50:\n        case 0x54:\n        case 0x59:\n        case 0x5a:\n        case 0x67:\n        case 0x6b:\n        case 0x6d:\n        case 0x74:\n          pcVar7 = strchr(param_5,0x30);\n          if (pcVar7 == (char *)0x0) goto switchD_00108076_caseD_46;\n          bVar1 = pbVar5[1];\n          if (bVar1 == 0x44) {\n            iVar8 = 2;\n            uVar9 = 1000;\n          }\n          else if (bVar1 == 0x69) {\n            uVar9 = 0x400;\n            iVar8 = (pbVar5[2] == 0x42) + 1 + (uint)(pbVar5[2] == 0x42);\n          }\n          else {\n            iVar8 = (bVar1 == 0x42) + 1;\n            uVar9 = 0x400;\n            if (bVar1 == 0x42) {\n              uVar9 = 1000;\n            }\n          }\n          break;\n        default:\nswitchD_00108076_caseD_46:\n          iVar8 = 1;\n          uVar9 = 0x400;\n        }\n        switch(bVar11) {\n        case 0x42:\n          uVar2 = bkm_scale(&local_48,0x400);\n          pbVar5 = *param_2;\n          uVar10 = uVar10 | uVar2;\n          break;\n        default:\n          goto switchD_001080a0_caseD_43;\n        case 0x45:\n          uVar2 = bkm_scale_by_power(&local_48,uVar9,6);\n          pbVar5 = *param_2;\n          uVar10 = uVar10 | uVar2;\n          break;\n        case 0x47:\n        case 0x67:\n          uVar2 = bkm_scale_by_power(&local_48,uVar9,3);\n          pbVar5 = *param_2;\n          uVar10 = uVar10 | uVar2;\n          break;\n        case 0x4b:\n        case 0x6b:\n          uVar2 = bkm_scale_by_power(&local_48,uVar9,1);\n          pbVar5 = *param_2;\n          uVar10 = uVar10 | uVar2;\n          break;\n        case 0x4d:\n        case 0x6d:\n          uVar2 = bkm_scale_by_power(&local_48,uVar9,2);\n          pbVar5 = *param_2;\n          uVar10 = uVar10 | uVar2;\n          break;\n        case 0x50:\n          uVar2 = bkm_scale_by_power(&local_48,uVar9,5);\n          pbVar5 = *param_2;\n          uVar10 = uVar10 | uVar2;\n          break;\n        case 0x54:\n        case 0x74:\n          uVar2 = bkm_scale_by_power(&local_48,uVar9,4);\n          pbVar5 = *param_2;\n          uVar10 = uVar10 | uVar2;\n          break;\n        case 0x59:\n          uVar2 = bkm_scale_by_power(&local_48,uVar9,8);\n          pbVar5 = *param_2;\n          uVar10 = uVar10 | uVar2;\n          break;\n        case 0x5a:\n          uVar2 = bkm_scale_by_power(&local_48,uVar9,7);\n          pbVar5 = *param_2;\n          uVar10 = uVar10 | uVar2;\n          break;\n        case 0x62:\n          uVar2 = bkm_scale(&local_48,0x200);\n          pbVar5 = *param_2;\n          uVar10 = uVar10 | uVar2;\n          break;\n        case 99:\n          break;\n        case 0x77:\n          uVar2 = bkm_scale(&local_48,2);\n          pbVar5 = *param_2;\n          uVar10 = uVar10 | uVar2;\n        }\n        uVar6 = local_48;\n        *param_2 = pbVar5 + iVar8;\n        if (pbVar5[iVar8] != 0) {\n          uVar10 = uVar10 | 2;\n        }\n      }\n      *param_4 = uVar6;\n      goto LAB_00107fd2;\n    }\n    if ((param_5 != (char *)0x0) && (bVar11 = *param_1, bVar11 != 0)) {\n      iVar8 = (int)(char)bVar11;\n      pcVar7 = strchr(param_5,iVar8);\n      if (pcVar7 != (char *)0x0) {\n        local_48 = 1;\n        uVar10 = 0;\n        goto LAB_0010804c;\n      }\n    }\n  }\nLAB_0010800b:\n  uVar10 = 4;\nLAB_00107fd2:\n  if (local_40 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return uVar10;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "001026af": "\nvoid string2_extend_isra_0_cold(void)\n\n{\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n", 
    "00104b20": "\nvoid squeeze_filter_constprop_0(code *param_1)\n\n{\n  byte bVar1;\n  ulong uVar2;\n  size_t sVar3;\n  int *piVar4;\n  size_t sVar5;\n  char cVar6;\n  long extraout_RDX;\n  ulong extraout_RDX_00;\n  long extraout_RDX_01;\n  long lVar7;\n  ulong uVar8;\n  ulong uVar9;\n  ulong uVar10;\n  undefined1 *__ptr;\n  ulong __n;\n  \n  uVar8 = 0;\n  __n = 0x7fffffff;\n  uVar2 = 0;\nLAB_00104b49:\n  do {\n    if (uVar8 < uVar2) goto LAB_00104b99;\nLAB_00104b4e:\n    uVar2 = (*param_1)(io_buf,0x2000);\n    if (uVar2 == 0) {\n      return;\n    }\n    if ((int)__n == 0x7fffffff) {\n      __ptr = io_buf;\n      uVar10 = 0;\n      goto LAB_00104ba9;\n    }\n    uVar8 = 0;\nLAB_00104b74:\n  } while (uVar2 <= uVar8);\nLAB_00104b80:\n  if ((int)(char)io_buf[uVar8] == (int)__n) goto LAB_00104c58;\n  __n = 0x7fffffff;\n  if (uVar8 < uVar2) goto LAB_00104b99;\n  goto LAB_00104b4e;\nLAB_00104b99:\n  if ((int)__n == 0x7fffffff) {\nLAB_00104ba2:\n    __ptr = io_buf + uVar8;\n    uVar10 = uVar8;\nLAB_00104ba9:\n    do {\n      uVar8 = uVar10;\n      cVar6 = io_buf[uVar8];\n      __n = (ulong)(uint)(int)cVar6;\n      bVar1 = to_uchar(__n);\n      if (in_squeeze_set[bVar1] != '\\0') {\n        lVar7 = extraout_RDX;\n        uVar9 = uVar8;\n        if (uVar8 < uVar2) goto LAB_00104bd1;\n        __n = uVar2 - extraout_RDX;\n        goto LAB_00104cb6;\n      }\n      uVar10 = uVar8 + 2;\n    } while (uVar10 < uVar2);\n    lVar7 = extraout_RDX;\n    if (uVar10 == uVar2) {\n      uVar9 = uVar8 + 1;\n      cVar6 = io_buf[uVar8 + 1];\n      __n = (ulong)(uint)(int)cVar6;\n      bVar1 = to_uchar(__n);\n      lVar7 = extraout_RDX_01;\n      if ((in_squeeze_set[bVar1] != '\\0') && (uVar10 = uVar9, uVar9 < uVar2)) {\nLAB_00104bd1:\n        sVar5 = (uVar9 - lVar7) + 1;\n        if ((uVar9 != 0) && (in_squeeze_set[uVar9 + 0xff] == cVar6)) {\n          sVar5 = uVar9 - lVar7;\n        }\n        uVar8 = uVar9 + 1;\n        if ((sVar5 == 0) || (sVar3 = fwrite_unlocked(io_buf + lVar7,1,sVar5,stdout), sVar5 == sVar3)\n           ) goto LAB_00104b74;\nLAB_00104c27:\n        param_1 = (code *)dcgettext(0,\"write error\",5);\n        piVar4 = __errno_location();\n        error(1,*piVar4,param_1);\n        uVar8 = extraout_RDX_00;\nLAB_00104c58:\n        uVar8 = uVar8 + 1;\n        if (uVar8 == uVar2) goto LAB_00104b49;\n        goto LAB_00104b80;\n      }\n    }\n    uVar8 = uVar10;\n    __n = uVar2 - lVar7;\n    if (__n != 0) {\n      __ptr = io_buf + lVar7;\nLAB_00104cb6:\n      sVar5 = fwrite_unlocked(__ptr,1,__n,stdout);\n      if (__n != sVar5) goto LAB_00104c27;\n    }\n    __n = 0x7fffffff;\n    if (uVar2 <= uVar8) goto LAB_00104b4e;\n    goto LAB_00104ba2;\n  }\n  goto LAB_00104b80;\n}\n\n", 
    "001053d0": "\nundefined8 strcaseeq8(long param_1,undefined8 param_2,byte param_3)\n\n{\n  char cVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  \n  cVar1 = c_isupper((int)(char)param_3);\n  bVar2 = *(byte *)(param_1 + 8);\n  if (cVar1 != '\\0') {\n    bVar2 = bVar2 & 0xdf;\n  }\n  if (param_3 != bVar2) {\n    return 0;\n  }\n  if (param_3 == 0) {\n    return 1;\n  }\n  uVar3 = strcaseeq9(param_1,param_2);\n  return uVar3;\n}\n\n", 
    "001040a0": "\nundefined8 homogeneous_spec_list(long param_1)\n\n{\n  int iVar1;\n  int iVar2;\n  \n  *(undefined8 *)(param_1 + 0x10) = 0xfffffffffffffffe;\n  iVar1 = get_next(param_1,0);\n  if (iVar1 != -1) {\n    do {\n      iVar2 = get_next(param_1,0);\n      if (iVar2 == -1) {\n        return 1;\n      }\n    } while (iVar1 == iVar2);\n  }\n  return 0;\n}\n\n", 
    "00102610": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nuintmax_t strtoumax(char *__nptr,char **__endptr,int __base)\n\n{\n  uintmax_t uVar1;\n  \n  uVar1 = (*(code *)PTR_strtoumax_0010ef90)();\n  return uVar1;\n}\n\n", 
    "001026aa": "\nvoid get_next_cold(void)\n\n{\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n", 
    "00102650": "\nvoid __fprintf_chk(void)\n\n{\n  (*(code *)PTR___fprintf_chk_0010efb0)();\n  return;\n}\n\n", 
    "00102530": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid * calloc(size_t __nmemb,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = (void *)(*(code *)PTR_calloc_0010ef20)();\n  return pvVar1;\n}\n\n", 
    "00102fe0": "\nbyte es_match(long *param_1,long param_2,char param_3)\n\n{\n  if (*(char *)(*param_1 + param_2) != param_3) {\n    return 0;\n  }\n  return *(byte *)(param_1[1] + param_2) ^ 1;\n}\n\n", 
    "00107300": "\nvoid quotearg_char_mem(undefined8 param_1,undefined8 param_2,char param_3,undefined8 param_4)\n\n{\n  undefined8 *puVar1;\n  long in_FS_OFFSET;\n  undefined8 local_48;\n  undefined8 uStack_40;\n  undefined8 local_38;\n  undefined8 uStack_30;\n  undefined8 local_28;\n  undefined8 uStack_20;\n  undefined8 local_18;\n  long local_10;\n  \n  puVar1 = &local_48;\n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  local_48 = default_quoting_options._0_8_;\n  uStack_40 = default_quoting_options._8_8_;\n  local_38 = default_quoting_options._16_8_;\n  uStack_30 = default_quoting_options._24_8_;\n  local_28 = default_quoting_options._32_8_;\n  uStack_20 = default_quoting_options._40_8_;\n  local_18 = default_quoting_options._48_8_;\n  set_char_quoting(&local_48,(int)param_3,1,param_4,param_1,param_2);\n  quotearg_n_options(0,param_1,param_2,puVar1);\n  if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "00107db0": "\nvoid x2realloc(undefined8 param_1,undefined8 param_2)\n\n{\n  x2nrealloc(param_1,param_2,1);\n  return;\n}\n\n", 
    "00107540": "\nvoid quotearg_custom_mem(undefined8 param_1,undefined8 param_2,undefined8 param_3,undefined8 param_4\n                        )\n\n{\n  quotearg_n_custom_mem(0,param_1,param_2,param_3,param_4);\n  return;\n}\n\n", 
    "00108750": "\nint rpl_fseeko(FILE *param_1,__off_t param_2,int param_3)\n\n{\n  int iVar1;\n  __off_t _Var2;\n  \n  if (((param_1->_IO_read_end == param_1->_IO_read_ptr) &&\n      (param_1->_IO_write_ptr == param_1->_IO_write_base)) &&\n     (param_1->_IO_save_base == (char *)0x0)) {\n    iVar1 = fileno(param_1);\n    _Var2 = lseek(iVar1,param_2,param_3);\n    if (_Var2 == -1) {\n      iVar1 = -1;\n    }\n    else {\n      param_1->_flags = param_1->_flags & 0xffffffef;\n      param_1->_offset = _Var2;\n      iVar1 = 0;\n    }\n    return iVar1;\n  }\n  iVar1 = fseeko(param_1,param_2,param_3);\n  return iVar1;\n}\n\n", 
    "00105360": "\nint * quoting_options_from_style(int *param_1,int param_2)\n\n{\n  if (param_2 != 10) {\n    *param_1 = param_2;\n    param_1[1] = 0;\n    *(undefined8 *)(param_1 + 2) = 0;\n    *(undefined8 *)(param_1 + 4) = 0;\n    *(undefined8 *)(param_1 + 6) = 0;\n    *(undefined8 *)(param_1 + 8) = 0;\n    *(undefined8 *)(param_1 + 10) = 0;\n    *(undefined8 *)(param_1 + 0xc) = 0;\n    return param_1;\n  }\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n", 
    "00104150": "\nvoid skip_construct_isra_0(long *param_1,undefined8 *param_2)\n\n{\n  *param_1 = *(long *)(*param_1 + 8);\n  *param_2 = 0xffffffffffffffff;\n  return;\n}\n\n", 
    "001035a0": "\nbyte * make_printable_char(byte param_1)\n\n{\n  byte *pbVar1;\n  ushort **ppuVar2;\n  \n  pbVar1 = (byte *)xmalloc(5);\n  ppuVar2 = __ctype_b_loc();\n  if ((*(byte *)((long)*ppuVar2 + (ulong)param_1 * 2 + 1) & 0x40) != 0) {\n    *pbVar1 = param_1;\n    pbVar1[1] = 0;\n    return pbVar1;\n  }\n  __sprintf_chk(pbVar1,1,5,\"\\\\%03o\",param_1);\n  return pbVar1;\n}\n\n", 
    "001025d0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = (char *)(*(code *)PTR_setlocale_0010ef70)();\n  return pcVar1;\n}\n\n", 
    "001024b0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\n\n{\n  (*(code *)PTR___assert_fail_0010eee0)();\n  return;\n}\n\n", 
    "00107e20": "\nvoid xmemdup(void *param_1,size_t param_2)\n\n{\n  void *__dest;\n  \n  __dest = (void *)xmalloc(param_2);\n  memcpy(__dest,param_1,param_2);\n  return;\n}\n\n", 
    "00102520": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint ferror_unlocked(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_ferror_unlocked_0010ef18)();\n  return iVar1;\n}\n\n", 
    "00103610": "\nundefined8 append_range(long param_1,byte param_2,byte param_3)\n\n{\n  long lVar1;\n  undefined4 *puVar2;\n  void *__ptr;\n  void *__ptr_00;\n  undefined8 uVar3;\n  \n  if (param_3 < param_2) {\n    __ptr = (void *)make_printable_char(param_2);\n    __ptr_00 = (void *)make_printable_char(param_3);\n    uVar3 = dcgettext(0,\"range-endpoints of \\'%s-%s\\' are in reverse collating sequence order\",5);\n    error(0,0,uVar3,__ptr,__ptr_00);\n    free(__ptr);\n    free(__ptr_00);\n    return 0;\n  }\n  puVar2 = (undefined4 *)xmalloc(0x20);\n  lVar1 = *(long *)(param_1 + 8);\n  *(undefined8 *)(puVar2 + 2) = 0;\n  *puVar2 = 1;\n  *(byte *)(puVar2 + 4) = param_2;\n  *(byte *)((long)puVar2 + 0x11) = param_3;\n  if (lVar1 != 0) {\n    *(undefined4 **)(lVar1 + 8) = puVar2;\n    *(undefined4 **)(param_1 + 8) = puVar2;\n    return 1;\n  }\n                    /* WARNING: Subroutine does not return */\n  __assert_fail(\"list->tail\",\"src/tr.c\",0x2a5,\"append_range\");\n}\n\n", 
    "00102400": "\nvoid bindtextdomain(void)\n\n{\n  (*(code *)PTR_bindtextdomain_0010ee88)();\n  return;\n}\n\n", 
    "00102fd0": "\nundefined4 to_uchar(undefined4 param_1)\n\n{\n  return param_1;\n}\n\n", 
    "00108864": "\nvoid _fini(void)\n\n{\n  return;\n}\n\n", 
    "00102640": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = (*(code *)PTR_fwrite_0010efa8)();\n  return sVar1;\n}\n\n", 
    "00108500": "\nint c_strcasecmp(undefined *param_1,undefined *param_2)\n\n{\n  byte bVar1;\n  byte bVar2;\n  int iVar3;\n  \n  iVar3 = 0;\n  if (param_1 != param_2) {\n    do {\n      bVar1 = c_tolower(*param_1);\n      bVar2 = c_tolower(*param_2);\n      if (bVar1 == 0) break;\n      param_1 = param_1 + 1;\n      param_2 = param_2 + 1;\n    } while (bVar1 == bVar2);\n    iVar3 = (uint)bVar1 - (uint)bVar2;\n  }\n  return iVar3;\n}\n\n", 
    "00108620": "\nchar * locale_charset(void)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = nl_langinfo(0xe);\n  if (pcVar1 != (char *)0x0) {\n    if (*pcVar1 == '\\0') {\n      pcVar1 = \"ASCII\";\n    }\n    return pcVar1;\n  }\n  return \"ASCII\";\n}\n\n", 
    "00106ef0": "\nuint set_char_quoting(undefined1 *param_1,byte param_2,uint param_3)\n\n{\n  uint uVar1;\n  uint uVar2;\n  \n  if (param_1 == (undefined1 *)0x0) {\n    param_1 = default_quoting_options;\n  }\n  uVar1 = *(uint *)(param_1 + (ulong)(param_2 >> 5) * 4 + 8);\n  uVar2 = uVar1 >> (param_2 & 0x1f);\n  *(uint *)(param_1 + (ulong)(param_2 >> 5) * 4 + 8) =\n       ((param_3 ^ uVar2) & 1) << (param_2 & 0x1f) ^ uVar1;\n  return uVar2 & 1;\n}\n\n", 
    "001024a0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = (*(code *)PTR_lseek_0010eed8)();\n  return _Var1;\n}\n\n", 
    "001025c0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid * realloc(void *__ptr,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = (void *)(*(code *)PTR_realloc_0010ef68)();\n  return pvVar1;\n}\n\n", 
    "00105b10": "\nulong quotearg_buffer_restyled\n                (undefined *param_1,ulong param_2,char *param_3,ulong param_4,int param_5,\n                uint param_6,long param_7,char *param_8,char *param_9)\n\n{\n  byte *__s1;\n  bool bVar1;\n  bool bVar2;\n  bool bVar3;\n  bool bVar4;\n  bool bVar5;\n  bool bVar6;\n  int iVar7;\n  size_t sVar8;\n  ushort **ppuVar9;\n  long lVar10;\n  char cVar11;\n  uint uVar12;\n  ulong uVar13;\n  byte bVar14;\n  ulong uVar15;\n  char *pcVar16;\n  ulong uVar17;\n  ulong uVar18;\n  ulong uVar19;\n  long in_FS_OFFSET;\n  bool bVar20;\n  bool bVar21;\n  bool bVar22;\n  bool bVar23;\n  bool bVar24;\n  size_t local_c8;\n  char *local_98;\n  ulong local_90;\n  char *local_78;\n  char *local_70;\n  bool local_64;\n  wint_t local_4c;\n  mbstate_t local_48;\n  long local_40;\n  \n  local_70 = param_8;\n  local_78 = param_9;\n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  sVar8 = __ctype_get_mb_cur_max();\n  uVar12 = param_6 & 2;\n  bVar20 = uVar12 != 0;\n  switch(param_5) {\n  case 0:\n    bVar6 = true;\n    bVar2 = false;\n    uVar18 = 0;\n    local_64 = false;\n    local_90 = 0;\n    bVar20 = false;\n    bVar1 = false;\n    local_c8 = 0;\n    local_98 = (char *)0x0;\n    break;\n  case 2:\n    if (uVar12 == 0) {\n      bVar1 = false;\nLAB_00105f97:\n      if (param_2 == 0) {\n        local_90 = 0;\n        bVar2 = false;\n        bVar6 = true;\n        local_64 = false;\n        goto LAB_00105fb9;\n      }\n      bVar2 = false;\n      local_64 = false;\n      bVar6 = true;\n      uVar13 = 0;\n      local_90 = param_2;\n      goto LAB_00106556;\n    }\n    bVar2 = false;\n    uVar18 = 0;\n    bVar6 = true;\n    local_64 = false;\n    local_90 = 0;\n    bVar20 = true;\n    bVar1 = false;\n    local_c8 = 1;\n    local_98 = \"\\'\";\n    break;\n  case 3:\n    bVar1 = true;\n    goto LAB_00105f0f;\n  case 4:\n    if (uVar12 == 0) {\n      bVar1 = true;\n      goto LAB_00105f97;\n    }\n  case 1:\n    bVar1 = false;\nLAB_00105f0f:\n    bVar6 = true;\n    local_64 = false;\n    bVar20 = true;\n    local_90 = 0;\n    bVar2 = false;\n    uVar18 = 0;\n    param_5 = 2;\n    local_c8 = 1;\n    local_98 = \"\\'\";\n    break;\n  case 5:\n    if (uVar12 == 0) {\n      if (param_2 != 0) {\n        *param_1 = 0x22;\n      }\n      bVar6 = true;\n      local_64 = false;\n      local_90 = 0;\n      bVar2 = false;\n      bVar20 = false;\n      uVar18 = 1;\n      bVar1 = true;\n      local_c8 = 1;\n      local_98 = \"\\\"\";\n    }\n    else {\n      bVar2 = false;\n      uVar18 = 0;\n      bVar6 = true;\n      local_64 = false;\n      local_90 = 0;\n      bVar20 = true;\n      bVar1 = true;\n      local_c8 = 1;\n      local_98 = \"\\\"\";\n    }\n    break;\n  case 6:\n    bVar2 = false;\n    uVar18 = 0;\n    bVar6 = true;\n    local_64 = false;\n    param_5 = 5;\n    local_90 = 0;\n    bVar20 = true;\n    bVar1 = true;\n    local_c8 = 1;\n    local_98 = \"\\\"\";\n    break;\n  case 7:\n    bVar6 = true;\n    bVar2 = false;\n    uVar18 = 0;\n    local_64 = false;\n    local_90 = 0;\n    bVar20 = false;\n    bVar1 = true;\n    local_c8 = 0;\n    local_98 = (char *)0x0;\n    break;\n  case 8:\n  case 9:\n  case 10:\n    if (param_5 != 10) {\n      local_70 = (char *)gettext_quote(&DAT_0010a559,param_5);\n      local_78 = (char *)gettext_quote(&DAT_0010a549);\n    }\n    uVar18 = 0;\n    if (uVar12 == 0) {\n      cVar11 = *local_70;\n      while (cVar11 != '\\0') {\n        if (uVar18 < param_2) {\n          param_1[uVar18] = cVar11;\n        }\n        uVar18 = uVar18 + 1;\n        cVar11 = local_70[uVar18];\n      }\n    }\n    bVar2 = false;\n    local_c8 = strlen(local_78);\n    local_98 = local_78;\n    bVar6 = true;\n    local_64 = false;\n    local_90 = 0;\n    bVar1 = true;\n    break;\n  default:\n                    /* WARNING: Subroutine does not return */\n    abort();\n  }\n  do {\n    uVar13 = 0;\n    bVar4 = local_64;\nLAB_00105c60:\n    bVar21 = param_4 != uVar13;\n    if (param_4 == 0xffffffffffffffff) {\n      bVar21 = param_3[uVar13] != '\\0';\n    }\n    bVar24 = bVar1;\n    if (bVar21) {\n      bVar23 = (bool)(param_5 != 2 & bVar1);\n      __s1 = (byte *)(param_3 + uVar13);\n      uVar17 = uVar13;\n      bVar3 = bVar2;\n      bVar5 = bVar23;\n      if (!bVar23) {\n        uVar15 = (ulong)*__s1;\n        switch(uVar15) {\n        case 0:\n          if (bVar1) goto switchD_001064c0_caseD_0;\n          bVar5 = false;\n          uVar15 = 0;\n          if ((param_6 & 1) != 0) goto code_r0x0010645b;\n          goto LAB_0010624b;\n        default:\nswitchD_00106370_caseD_1:\n          bVar22 = bVar1;\n          if (sVar8 != 1) {\n            local_48 = (mbstate_t)0x0;\n            if (param_4 == 0xffffffffffffffff) {\n              param_4 = strlen(param_3);\n            }\n            uVar17 = 0;\n            do {\n              uVar19 = uVar13 + uVar17;\n              lVar10 = rpl_mbrtowc(&local_4c,param_3 + uVar19,param_4 - uVar19,&local_48);\n              if (lVar10 == 0) break;\n              if (lVar10 == -1) {\n                bVar21 = false;\n                goto LAB_00106748;\n              }\n              if (lVar10 == -2) goto joined_r0x00106b5a;\n              if (((param_5 == 2) && (bVar20)) && (lVar10 != 1)) {\n                pcVar16 = param_3 + uVar19 + 1;\n                do {\n                  if (((byte)(*pcVar16 + 0xa5U) < 0x22) &&\n                     ((1L << (*pcVar16 + 0xa5U & 0x3f) & 0x20000002bU) != 0)) {\n                    param_5 = 2;\n                    goto LAB_00106130;\n                  }\n                  pcVar16 = pcVar16 + 1;\n                } while (param_3 + uVar19 + lVar10 != pcVar16);\n              }\n              iVar7 = iswprint(local_4c);\n              if (iVar7 == 0) {\n                bVar21 = false;\n              }\n              uVar17 = uVar17 + lVar10;\n              iVar7 = mbsinit(&local_48);\n            } while (iVar7 == 0);\n            bVar22 = (bool)((bVar21 ^ 1U) & bVar1);\n            goto LAB_00106748;\n          }\n          ppuVar9 = __ctype_b_loc();\n          uVar17 = 1;\n          bVar22 = ((*ppuVar9)[uVar15] & 0x4000) == 0;\n          bVar21 = !bVar22;\n          bVar22 = (bool)(bVar22 & bVar1);\n          goto LAB_00105ed1;\n        case 7:\n          uVar15 = 7;\n          bVar14 = 0x61;\n          break;\n        case 8:\n          uVar15 = 8;\n          bVar14 = 0x62;\n          break;\n        case 9:\n          uVar15 = 9;\n          bVar14 = 0x74;\n          goto LAB_00106418;\n        case 10:\n          uVar15 = 10;\n          bVar14 = 0x6e;\n          goto LAB_00106418;\n        case 0xb:\n          uVar15 = 0xb;\n          bVar14 = 0x76;\n          break;\n        case 0xc:\n          uVar15 = 0xc;\n          bVar14 = 0x66;\n          break;\n        case 0xd:\n          uVar15 = 0xd;\n          bVar14 = 0x72;\nLAB_00106418:\n          bVar23 = (bool)(param_5 == 2 & bVar20);\n          if (bVar23) goto LAB_00106127;\n          break;\n        case 0x20:\n          uVar15 = 0x20;\n          goto LAB_00106114;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2a:\n        case 0x3b:\n        case 0x3c:\n        case 0x3d:\n        case 0x3e:\n        case 0x5b:\n        case 0x5e:\n        case 0x60:\n        case 0x7c:\n          bVar21 = false;\nLAB_00106114:\n          bVar22 = param_5 == 2;\n          bVar23 = bVar21;\n          if ((!bVar20) || (!bVar22)) goto LAB_00105e38;\n          goto LAB_00106127;\n        case 0x23:\n        case 0x7e:\nLAB_0010610b:\n          bVar22 = param_5 == 2;\n          if (uVar13 == 0) goto LAB_00106114;\n          goto LAB_00105e35;\n        case 0x25:\n        case 0x2b:\n        case 0x2c:\n        case 0x2d:\n        case 0x2e:\n        case 0x2f:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3a:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4a:\n        case 0x4b:\n        case 0x4c:\n        case 0x4d:\n        case 0x4e:\n        case 0x4f:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5a:\n        case 0x5d:\n        case 0x5f:\n        case 0x61:\n        case 0x62:\n        case 99:\n        case 100:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6a:\n        case 0x6b:\n        case 0x6c:\n        case 0x6d:\n        case 0x6e:\n        case 0x6f:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7a:\n          goto switchD_00106370_caseD_25;\n        case 0x27:\nswitchD_00106370_caseD_27:\n          bVar4 = bVar21;\n          if (param_5 != 2) {\n            bVar22 = false;\n            uVar15 = 0x27;\n            bVar23 = bVar21;\n            goto LAB_00105e38;\n          }\n          if (!bVar20) {\n            if ((param_2 == 0) || (uVar13 = 0, uVar15 = param_2, local_90 != 0)) {\n              if (uVar18 < param_2) {\n                param_1[uVar18] = 0x27;\n              }\n              if (uVar18 + 1 < param_2) {\n                param_1[uVar18 + 1] = 0x5c;\n              }\n              uVar13 = param_2;\n              uVar15 = local_90;\n              if (uVar18 + 2 < param_2) {\n                param_1[uVar18 + 2] = 0x27;\n              }\n            }\n            bVar14 = 0x27;\n            uVar18 = uVar18 + 3;\n            param_2 = uVar13;\n            local_90 = uVar15;\n            bVar3 = false;\n            bVar22 = false;\n            goto joined_r0x00105e5b;\n          }\n          goto LAB_00106130;\n        case 0x3f:\nswitchD_00106370_caseD_3f:\n          if (param_5 != 2) {\n            if ((((param_5 == 5) && ((param_6 & 4) != 0)) && (uVar17 = uVar13 + 2, uVar17 < param_4)\n                ) && (param_3[uVar13 + 1] == '?')) {\n              uVar15 = (ulong)(byte)param_3[uVar17];\n              switch(param_3[uVar17]) {\n              case '!':\n              case '\\'':\n              case '(':\n              case ')':\n              case '-':\n              case '/':\n              case '<':\n              case '=':\n              case '>':\n                goto switchD_00106abe_caseD_21;\n              default:\n                break;\n              }\n            }\n            bVar22 = false;\n            uVar15 = 0x3f;\n            bVar23 = false;\n            goto LAB_00105e38;\n          }\n          if (!bVar20) {\n            bVar14 = 0x3f;\n            bVar22 = false;\n            bVar21 = false;\n            goto joined_r0x00105e5b;\n          }\n          goto LAB_00106130;\n        case 0x5c:\n          if (param_5 != 2) goto switchD_00105d68_caseD_5c;\n          if (!bVar20) {\nLAB_001063a8:\n            uVar13 = uVar13 + 1;\n            bVar21 = false;\n            bVar14 = 0x5c;\n            goto LAB_001063c0;\n          }\n          goto LAB_00106130;\n        case 0x7b:\n        case 0x7d:\nswitchD_00106370_caseD_7b:\n          bVar23 = param_4 != 1;\n          if (param_4 == 0xffffffffffffffff) {\n            bVar23 = param_3[1] != '\\0';\n          }\n          bVar22 = param_5 == 2;\n          if (!bVar23) goto LAB_0010610b;\nLAB_00105e35:\n          bVar23 = false;\n          goto LAB_00105e38;\n        }\nLAB_00106240:\n        bVar5 = bVar23;\n        if (!bVar1) {\nLAB_0010624b:\n          bVar14 = (byte)uVar15;\n          bVar23 = false;\n          bVar21 = false;\n          bVar22 = false;\n          if (!bVar20) goto LAB_00105e58;\n          goto LAB_00105d80;\n        }\nLAB_00106280:\n        bVar21 = false;\n        goto joined_r0x00106291;\n      }\n      if (local_c8 != 0) {\n        if ((param_4 == 0xffffffffffffffff) && (1 < local_c8)) {\n          param_4 = strlen(param_3);\n        }\n        if ((param_4 < uVar13 + local_c8) || (iVar7 = memcmp(__s1,local_98,local_c8), iVar7 != 0))\n        goto LAB_001064a0;\n        if (!bVar20) {\n          uVar15 = (ulong)*__s1;\n          switch(uVar15) {\n          case 0:\n            goto switchD_00105d68_caseD_0;\n          default:\n            goto switchD_00106370_caseD_1;\n          case 7:\n            goto switchD_001064c0_caseD_7;\n          case 8:\n            goto switchD_001064c0_caseD_8;\n          case 9:\n            goto switchD_00105d68_caseD_9;\n          case 10:\n            goto switchD_001064c0_caseD_a;\n          case 0xb:\n            goto switchD_001064c0_caseD_b;\n          case 0xc:\n            goto switchD_001064c0_caseD_c;\n          case 0xd:\n            goto switchD_001064c0_caseD_d;\n          case 0x20:\n            goto LAB_001064e9;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2a:\n          case 0x3b:\n          case 0x3c:\n          case 0x3d:\n          case 0x3e:\n          case 0x5b:\n          case 0x5e:\n          case 0x60:\n          case 0x7c:\n            goto switchD_00105d68_caseD_21;\n          case 0x23:\n          case 0x7e:\n            goto LAB_001064d1;\n          case 0x25:\n          case 0x2b:\n          case 0x2c:\n          case 0x2d:\n          case 0x2e:\n          case 0x2f:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3a:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4a:\n          case 0x4b:\n          case 0x4c:\n          case 0x4d:\n          case 0x4e:\n          case 0x4f:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5a:\n          case 0x5d:\n          case 0x5f:\n          case 0x61:\n          case 0x62:\n          case 99:\n          case 100:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6a:\n          case 0x6b:\n          case 0x6c:\n          case 0x6d:\n          case 0x6e:\n          case 0x6f:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7a:\n            goto LAB_00105d78;\n          case 0x27:\n            goto switchD_00106370_caseD_27;\n          case 0x3f:\n            goto switchD_00106370_caseD_3f;\n          case 0x5c:\n            goto switchD_00105d68_caseD_5c;\n          case 0x7b:\n          case 0x7d:\n            goto switchD_00106370_caseD_7b;\n          }\n        }\n        goto LAB_0010613e;\n      }\nLAB_001064a0:\n      uVar15 = (ulong)*__s1;\n      switch(uVar15) {\n      case 0:\nswitchD_001064c0_caseD_0:\n        if (!bVar20) {\n          bVar5 = false;\nswitchD_00105d68_caseD_0:\n          bVar24 = param_5 == 2;\n          bVar3 = (bool)((bVar2 ^ 1U) & bVar24);\n          if (bVar3) {\n            if (uVar18 < param_2) {\n              param_1[uVar18] = 0x27;\n            }\n            if (uVar18 + 1 < param_2) {\n              param_1[uVar18 + 1] = 0x24;\n            }\n            if (uVar18 + 2 < param_2) {\n              param_1[uVar18 + 2] = 0x27;\n            }\n            uVar15 = uVar18 + 3;\n            bVar2 = bVar3;\n            if (param_2 <= uVar18 + 3) {\n              bVar14 = 0x30;\n              uVar18 = uVar18 + 4;\n              bVar22 = bVar3;\n              bVar21 = false;\n              goto joined_r0x00105e5b;\n            }\nLAB_001068fb:\n            param_1[uVar15] = 0x5c;\n            uVar18 = uVar15;\n          }\n          else {\n            uVar15 = uVar18;\n            if (uVar18 < param_2) goto LAB_001068fb;\n          }\n          uVar19 = uVar18 + 1;\n          bVar22 = bVar21;\n          if (param_5 != 2) {\n            uVar15 = 0x30;\n            if ((uVar13 + 1 < param_4) && ((byte)(param_3[uVar13 + 1] - 0x30U) < 10)) {\n              if (uVar19 < param_2) {\n                param_1[uVar19] = 0x30;\n              }\n              if (uVar18 + 2 < param_2) {\n                param_1[uVar18 + 2] = 0x30;\n              }\n              uVar19 = uVar18 + 3;\n              uVar15 = 0x30;\n            }\n            goto LAB_00106938;\n          }\n          bVar14 = 0x30;\n          uVar18 = uVar19;\n          bVar3 = bVar2;\n          bVar21 = false;\n          goto joined_r0x00105e5b;\n        }\n        bVar24 = param_5 == 2;\n        goto LAB_00106130;\n      default:\n        bVar23 = false;\n        goto switchD_00106370_caseD_1;\n      case 7:\nswitchD_001064c0_caseD_7:\n        bVar14 = 0x61;\n        break;\n      case 8:\nswitchD_001064c0_caseD_8:\n        bVar14 = 0x62;\n        break;\n      case 9:\n        bVar23 = false;\nswitchD_00105d68_caseD_9:\n        uVar15 = 9;\n        bVar14 = 0x74;\n        goto LAB_00106240;\n      case 10:\nswitchD_001064c0_caseD_a:\n        bVar14 = 0x6e;\n        goto LAB_00106280;\n      case 0xb:\nswitchD_001064c0_caseD_b:\n        bVar14 = 0x76;\n        goto LAB_00106280;\n      case 0xc:\nswitchD_001064c0_caseD_c:\n        bVar14 = 0x66;\n        break;\n      case 0xd:\nswitchD_001064c0_caseD_d:\n        bVar14 = 0x72;\n        goto LAB_00106280;\n      case 0x20:\n        bVar5 = false;\nLAB_001064e9:\n        uVar15 = 0x20;\n        goto LAB_00105d78;\n      case 0x21:\n      case 0x22:\n      case 0x24:\n      case 0x26:\n      case 0x28:\n      case 0x29:\n      case 0x2a:\n      case 0x3b:\n      case 0x3c:\n      case 0x3d:\n      case 0x3e:\n      case 0x5b:\n      case 0x5e:\n      case 0x60:\n      case 0x7c:\n        bVar5 = false;\nswitchD_00105d68_caseD_21:\n        bVar22 = false;\n        goto LAB_00105e35;\n      case 0x23:\n      case 0x7e:\n        bVar5 = false;\nLAB_001064d1:\n        if (uVar13 == 0) {\n          bVar22 = false;\n          goto LAB_00105e38;\n        }\n        bVar23 = false;\n        bVar22 = false;\n        goto LAB_00105d80;\n      case 0x25:\n      case 0x2b:\n      case 0x2c:\n      case 0x2d:\n      case 0x2e:\n      case 0x2f:\n      case 0x30:\n      case 0x31:\n      case 0x32:\n      case 0x33:\n      case 0x34:\n      case 0x35:\n      case 0x36:\n      case 0x37:\n      case 0x38:\n      case 0x39:\n      case 0x3a:\n      case 0x41:\n      case 0x42:\n      case 0x43:\n      case 0x44:\n      case 0x45:\n      case 0x46:\n      case 0x47:\n      case 0x48:\n      case 0x49:\n      case 0x4a:\n      case 0x4b:\n      case 0x4c:\n      case 0x4d:\n      case 0x4e:\n      case 0x4f:\n      case 0x50:\n      case 0x51:\n      case 0x52:\n      case 0x53:\n      case 0x54:\n      case 0x55:\n      case 0x56:\n      case 0x57:\n      case 0x58:\n      case 0x59:\n      case 0x5a:\n      case 0x5d:\n      case 0x5f:\n      case 0x61:\n      case 0x62:\n      case 99:\n      case 100:\n      case 0x65:\n      case 0x66:\n      case 0x67:\n      case 0x68:\n      case 0x69:\n      case 0x6a:\n      case 0x6b:\n      case 0x6c:\n      case 0x6d:\n      case 0x6e:\n      case 0x6f:\n      case 0x70:\n      case 0x71:\n      case 0x72:\n      case 0x73:\n      case 0x74:\n      case 0x75:\n      case 0x76:\n      case 0x77:\n      case 0x78:\n      case 0x79:\n      case 0x7a:\n        bVar5 = false;\nLAB_00105d78:\n        bVar22 = false;\n        goto LAB_00105d80;\n      case 0x27:\n        bVar5 = false;\n        goto switchD_00106370_caseD_27;\n      case 0x3f:\n        bVar5 = false;\n        goto switchD_00106370_caseD_3f;\n      case 0x5c:\n        bVar23 = false;\nswitchD_00105d68_caseD_5c:\n        if (((bool)(bVar1 & bVar20)) && (local_c8 != 0)) goto LAB_001063a8;\n        uVar15 = 0x5c;\n        bVar14 = 0x5c;\n        goto LAB_00106240;\n      case 0x7b:\n      case 0x7d:\n        bVar5 = false;\n        goto switchD_00106370_caseD_7b;\n      }\n      if (bVar20) goto LAB_001062a0;\n      bVar21 = false;\n      goto LAB_00105df6;\n    }\n    if ((uVar18 == 0) && ((bool)(bVar20 & param_5 == 2))) {\nLAB_00106127:\n      param_5 = 2;\nLAB_00106130:\n      if (bVar24) {\n        param_5 = 4;\n      }\nLAB_0010613e:\n      uVar13 = quotearg_buffer_restyled\n                         (param_1,param_2,param_3,param_4,param_5,param_6 & 0xfffffffd,0,local_70,\n                          local_78);\n      goto LAB_00106178;\n    }\n    bVar21 = (bool)(param_5 == 2 & (bVar20 ^ 1U));\n    bVar20 = (bool)(bVar20 ^ 1U);\n    if ((!bVar21) || (bVar20 = bVar21, !bVar4)) {\nLAB_00106bc5:\n      uVar13 = uVar18;\n      if (((local_98 != (char *)0x0) && (bVar20)) && (cVar11 = *local_98, cVar11 != '\\0')) {\n        do {\n          if (uVar13 < param_2) {\n            param_1[uVar13] = cVar11;\n          }\n          uVar13 = uVar13 + 1;\n          cVar11 = local_98[uVar13 - uVar18];\n        } while (cVar11 != '\\0');\n      }\n      if (uVar13 < param_2) {\n        param_1[uVar13] = 0;\n      }\nLAB_00106178:\n      if (local_40 == *(long *)(in_FS_OFFSET + 0x28)) {\n        return uVar13;\n      }\n                    /* WARNING: Subroutine does not return */\n      __stack_chk_fail();\n    }\n    if (bVar6) {\n      uVar13 = quotearg_buffer_restyled\n                         (param_1,local_90,param_3,param_4,5,param_6,param_7,local_70,local_78);\n      goto LAB_00106178;\n    }\n    local_64 = param_2 == 0 && local_90 != 0;\n    uVar13 = local_90;\n    bVar20 = bVar4;\n    if (param_2 != 0 || local_90 == 0) goto LAB_00106bc5;\nLAB_00106556:\n    *param_1 = 0x27;\n    param_2 = local_90;\n    local_90 = uVar13;\nLAB_00105fb9:\n    bVar20 = false;\n    uVar18 = 1;\n    param_5 = 2;\n    local_c8 = 1;\n    local_98 = \"\\'\";\n  } while( true );\ncode_r0x0010645b:\n  uVar13 = uVar13 + 1;\n  goto LAB_00105c60;\nswitchD_00106abe_caseD_21:\n  if (!bVar20) {\n    if (uVar18 < param_2) {\n      param_1[uVar18] = 0x3f;\n    }\n    if (uVar18 + 1 < param_2) {\n      param_1[uVar18 + 1] = 0x22;\n    }\n    if (uVar18 + 2 < param_2) {\n      param_1[uVar18 + 2] = 0x22;\n    }\n    if (uVar18 + 3 < param_2) {\n      param_1[uVar18 + 3] = 0x3f;\n    }\n    uVar19 = uVar18 + 4;\n    bVar24 = false;\n    bVar22 = false;\nLAB_00106938:\n    bVar14 = (byte)uVar15;\n    bVar23 = false;\n    bVar21 = false;\n    uVar13 = uVar17;\n    uVar18 = uVar19;\n    bVar3 = bVar2;\n    if ((bool)(bVar1 ^ 1U | bVar24)) goto joined_r0x00105e5b;\n    goto LAB_00105d80;\n  }\n  goto LAB_0010613e;\njoined_r0x00106b5a:\n  while ((uVar19 < param_4 && (param_3[uVar19] != '\\0'))) {\n    uVar17 = uVar17 + 1;\n    uVar19 = uVar13 + uVar17;\n  }\n  bVar21 = false;\nLAB_00106748:\n  if (1 < uVar17) {\nLAB_00106752:\n    bVar24 = false;\n    uVar17 = uVar17 + uVar13;\n    uVar19 = uVar13;\n    do {\n      bVar14 = (byte)uVar15;\n      if (bVar22) {\n        bVar24 = param_5 == 2;\n        if (bVar20) goto LAB_00106130;\n        bVar24 = (bool)(bVar24 & (bVar3 ^ 1U));\n        if (bVar24) {\n          if (uVar18 < param_2) {\n            param_1[uVar18] = 0x27;\n          }\n          if (uVar18 + 1 < param_2) {\n            param_1[uVar18 + 1] = 0x24;\n          }\n          if (uVar18 + 2 < param_2) {\n            param_1[uVar18 + 2] = 0x27;\n          }\n          uVar18 = uVar18 + 3;\n          bVar3 = bVar24;\n        }\n        if (uVar18 < param_2) {\n          param_1[uVar18] = 0x5c;\n        }\n        if (uVar18 + 1 < param_2) {\n          param_1[uVar18 + 1] = (char)(uVar15 >> 6) + '0';\n        }\n        if (uVar18 + 2 < param_2) {\n          param_1[uVar18 + 2] = ((byte)(uVar15 >> 3) & 7) + 0x30;\n        }\n        uVar13 = uVar19 + 1;\n        uVar18 = uVar18 + 3;\n        bVar14 = (bVar14 & 7) + 0x30;\n        bVar24 = bVar22;\n        if (uVar17 <= uVar13) goto LAB_00105e08;\n      }\n      else {\n        bVar2 = (bool)((bVar24 ^ 1U) & bVar3);\n        if (bVar23) {\n          if (uVar18 < param_2) {\n            param_1[uVar18] = 0x5c;\n          }\n          uVar18 = uVar18 + 1;\n        }\n        uVar13 = uVar19 + 1;\n        if (uVar17 <= uVar13) goto LAB_001063c0;\n        if (bVar2) {\n          if (uVar18 < param_2) {\n            param_1[uVar18] = 0x27;\n          }\n          if (uVar18 + 1 < param_2) {\n            param_1[uVar18 + 1] = 0x27;\n          }\n          uVar18 = uVar18 + 2;\n          bVar23 = false;\n          bVar3 = false;\n        }\n        else {\n          bVar23 = false;\n        }\n      }\n      uVar19 = uVar19 + 1;\n      if (uVar18 < param_2) {\n        param_1[uVar18] = bVar14;\n      }\n      uVar15 = (ulong)(byte)param_3[uVar19];\n      uVar18 = uVar18 + 1;\n    } while( true );\n  }\nLAB_00105ed1:\n  bVar5 = bVar23;\n  if (bVar22) {\n    bVar21 = false;\n    bVar22 = bVar1;\n    goto LAB_00106752;\n  }\nswitchD_00106370_caseD_25:\n  bVar22 = param_5 == 2;\n  bVar23 = bVar21;\nLAB_00105e38:\n  bVar14 = (byte)uVar15;\n  bVar22 = (bool)(bVar22 | bVar1 ^ 1U);\n  if ((!bVar22) || (bVar22 = false, bVar21 = bVar23, bVar20)) {\nLAB_00105d80:\n    bVar14 = (byte)uVar15;\n    uVar17 = uVar13;\n    bVar3 = bVar2;\n    bVar21 = bVar23;\n    if ((param_7 == 0) || ((*(uint *)(param_7 + (uVar15 >> 5) * 4) >> (bVar14 & 0x1f) & 1) == 0))\n    goto joined_r0x00105e5b;\n  }\n  else {\nLAB_00105e58:\n    uVar17 = uVar13;\n    bVar22 = false;\njoined_r0x00105e5b:\n    uVar13 = uVar17;\n    bVar2 = bVar3;\n    if (!bVar5) {\n      uVar13 = uVar17 + 1;\n      bVar2 = (bool)((bVar22 ^ 1U) & bVar3);\nLAB_001063c0:\n      if (bVar2) {\n        if (uVar18 < param_2) {\n          param_1[uVar18] = 0x27;\n        }\n        if (uVar18 + 1 < param_2) {\n          param_1[uVar18 + 1] = 0x27;\n        }\n        uVar18 = uVar18 + 2;\n        bVar3 = false;\n      }\n      goto LAB_00105e08;\n    }\n  }\njoined_r0x00106291:\n  if (bVar20) {\nLAB_001062a0:\n    bVar24 = (bool)(bVar1 & param_5 == 2);\n    goto LAB_00106130;\n  }\n  bVar24 = (bool)((bVar2 ^ 1U) & param_5 == 2);\n  if (bVar24) {\n    if (uVar18 < param_2) {\n      param_1[uVar18] = 0x27;\n    }\n    if (uVar18 + 1 < param_2) {\n      param_1[uVar18 + 1] = 0x24;\n    }\n    if (uVar18 + 2 < param_2) {\n      param_1[uVar18 + 2] = 0x27;\n    }\n    uVar18 = uVar18 + 3;\n    bVar2 = bVar24;\n  }\nLAB_00105df6:\n  if (uVar18 < param_2) {\n    param_1[uVar18] = 0x5c;\n  }\n  uVar18 = uVar18 + 1;\n  uVar13 = uVar13 + 1;\n  bVar3 = bVar2;\nLAB_00105e08:\n  bVar2 = bVar3;\n  if (uVar18 < param_2) {\n    param_1[uVar18] = bVar14;\n  }\n  uVar18 = uVar18 + 1;\n  if (!bVar21) {\n    bVar6 = false;\n  }\n  goto LAB_00105c60;\n}\n\n", 
    "001051b0": "\nvoid close_stdout(void)\n\n{\n  int iVar1;\n  int *piVar2;\n  undefined8 uVar3;\n  undefined8 uVar4;\n  \n  iVar1 = close_stream(stdout);\n  if (iVar1 != 0) {\n    piVar2 = __errno_location();\n    if ((ignore_EPIPE == '\\0') || (*piVar2 != 0x20)) {\n      uVar3 = dcgettext(0,\"write error\",5);\n      if (file_name == 0) {\n        error(0,*piVar2,\"%s\",uVar3);\n      }\n      else {\n        uVar4 = quotearg_colon();\n        error(0,*piVar2,\"%s: %s\",uVar4,uVar3);\n      }\n      goto LAB_00105238;\n    }\n  }\n  iVar1 = close_stream(stderr);\n  if (iVar1 == 0) {\n    return;\n  }\nLAB_00105238:\n                    /* WARNING: Subroutine does not return */\n  _exit(exit_failure);\n}\n\n", 
    "00102630": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid exit(int __status)\n\n{\n  (*(code *)PTR_exit_0010efa0)();\n  return;\n}\n\n", 
    "00102510": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint fputs_unlocked(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_fputs_unlocked_0010ef10)();\n  return iVar1;\n}\n\n", 
    "00102fc0": "\nvoid frame_dummy(void)\n\n{\n  register_tm_clones();\n  return;\n}\n\n"
}