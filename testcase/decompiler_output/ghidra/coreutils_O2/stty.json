{
    "0010a400": "\nint c_tolower(int param_1)\n\n{\n  if (param_1 - 0x41U < 0x1a) {\n    param_1 = param_1 + 0x20;\n  }\n  return param_1;\n}\n\n", 
    "00103000": "\nint _init(EVP_PKEY_CTX *ctx)\n\n{\n  undefined *puVar1;\n  \n  puVar1 = PTR___gmon_start___00114fd0;\n  if (PTR___gmon_start___00114fd0 != (undefined *)0x0) {\n    puVar1 = (undefined *)(*(code *)PTR___gmon_start___00114fd0)();\n  }\n  return (int)puVar1;\n}\n\n", 
    "00108810": "\nvoid quotearg_buffer(undefined8 param_1,undefined8 param_2,undefined8 param_3,undefined8 param_4,\n                    undefined1 *param_5)\n\n{\n  int iVar1;\n  int *piVar2;\n  \n  if ((undefined4 *)param_5 == (undefined4 *)0x0) {\n    param_5 = default_quoting_options;\n  }\n  piVar2 = __errno_location();\n  iVar1 = *piVar2;\n  quotearg_buffer_restyled\n            (param_1,param_2,param_3,param_4,*(undefined4 *)param_5,\n             *(undefined4 *)((long)param_5 + 4),(undefined4 *)((long)param_5 + 8),\n             *(undefined8 *)((long)param_5 + 0x28),*(undefined8 *)((long)param_5 + 0x30));\n  *piVar2 = iVar1;\n  return;\n}\n\n", 
    "00103480": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint fcntl(int __fd,int __cmd,...)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_fcntl_00114e20)();\n  return iVar1;\n}\n\n", 
    "00116200": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid __cxa_finalize(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __cxa_finalize@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "0010b7d0": "\nvoid xsum3(void)\n\n{\n  undefined auVar1 [16];\n  \n  auVar1 = xsum();\n  xsum(SUB168(auVar1,0),SUB168(auVar1 >> 0x40,0));\n  return;\n}\n\n", 
    "0010a4a0": "\nulong close_stream(FILE *param_1)\n\n{\n  int iVar1;\n  long lVar2;\n  ulong uVar3;\n  int *piVar4;\n  \n  lVar2 = __fpending();\n  iVar1 = ferror_unlocked(param_1);\n  uVar3 = rpl_fclose(param_1);\n  if (iVar1 == 0) {\n    if ((int)uVar3 == 0) {\n      return uVar3;\n    }\n    if (lVar2 == 0) {\n      piVar4 = __errno_location();\n      return (ulong)-(uint)(*piVar4 != 9);\n    }\n  }\n  else if ((int)uVar3 == 0) {\n    piVar4 = __errno_location();\n    *piVar4 = 0;\n    return 0xffffffff;\n  }\n  return 0xffffffff;\n}\n\n", 
    "00103e80": "\n/* WARNING: Removing unreachable block (ram,0x00103e93) */\n/* WARNING: Removing unreachable block (ram,0x00103e9f) */\n\nvoid deregister_tm_clones(void)\n\n{\n  return;\n}\n\n", 
    "0010c710": "\nvoid __libc_csu_fini(void)\n\n{\n  return;\n}\n\n", 
    "00108d90": "\nvoid quotearg_n_custom(void)\n\n{\n  quotearg_n_custom_mem();\n  return;\n}\n\n", 
    "00103470": "\nvoid __fpending(void)\n\n{\n  (*(code *)PTR___fpending_00114e18)();\n  return;\n}\n\n", 
    "00108b50": "\nvoid quotearg_style(undefined4 param_1,undefined8 param_2)\n\n{\n  quotearg_n_style(0,param_1,param_2);\n  return;\n}\n\n", 
    "00103590": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid * memset(void *__s,int __c,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = (void *)(*(code *)PTR_memset_00114ea8)();\n  return pvVar1;\n}\n\n", 
    "00108a30": "\nvoid quotearg_n(undefined8 param_1,undefined8 param_2)\n\n{\n  quotearg_n_options(param_1,param_2,0xffffffffffffffff,default_quoting_options);\n  return;\n}\n\n", 
    "0010b7f0": "\nvoid xsum4(void)\n\n{\n  undefined8 uVar1;\n  undefined8 in_RCX;\n  undefined auVar2 [16];\n  \n  auVar2 = xsum();\n  uVar1 = xsum(SUB168(auVar2,0),SUB168(auVar2 >> 0x40,0));\n  xsum(uVar1,in_RCX);\n  return;\n}\n\n", 
    "00107390": "\nulong quotearg_buffer_restyled\n                (undefined *param_1,ulong param_2,char *param_3,ulong param_4,int param_5,\n                uint param_6,long param_7,char *param_8,char *param_9)\n\n{\n  byte *__s1;\n  bool bVar1;\n  bool bVar2;\n  bool bVar3;\n  bool bVar4;\n  bool bVar5;\n  bool bVar6;\n  int iVar7;\n  size_t sVar8;\n  ushort **ppuVar9;\n  long lVar10;\n  char cVar11;\n  uint uVar12;\n  ulong uVar13;\n  byte bVar14;\n  ulong uVar15;\n  char *pcVar16;\n  ulong uVar17;\n  ulong uVar18;\n  ulong uVar19;\n  long in_FS_OFFSET;\n  bool bVar20;\n  bool bVar21;\n  bool bVar22;\n  bool bVar23;\n  bool bVar24;\n  size_t local_c8;\n  char *local_98;\n  ulong local_90;\n  char *local_78;\n  char *local_70;\n  bool local_64;\n  wint_t local_4c;\n  mbstate_t local_48;\n  long local_40;\n  \n  local_70 = param_8;\n  local_78 = param_9;\n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  sVar8 = __ctype_get_mb_cur_max();\n  uVar12 = param_6 & 2;\n  bVar20 = uVar12 != 0;\n  switch(param_5) {\n  case 0:\n    bVar6 = true;\n    bVar2 = false;\n    uVar18 = 0;\n    local_64 = false;\n    local_90 = 0;\n    bVar20 = false;\n    bVar1 = false;\n    local_c8 = 0;\n    local_98 = (char *)0x0;\n    break;\n  case 2:\n    if (uVar12 == 0) {\n      bVar1 = false;\nLAB_00107817:\n      if (param_2 == 0) {\n        local_90 = 0;\n        bVar2 = false;\n        bVar6 = true;\n        local_64 = false;\n        goto LAB_00107839;\n      }\n      bVar2 = false;\n      local_64 = false;\n      bVar6 = true;\n      uVar13 = 0;\n      local_90 = param_2;\n      goto LAB_00107dd6;\n    }\n    bVar2 = false;\n    uVar18 = 0;\n    bVar6 = true;\n    local_64 = false;\n    local_90 = 0;\n    bVar20 = true;\n    bVar1 = false;\n    local_c8 = 1;\n    local_98 = \"\\'\";\n    break;\n  case 3:\n    bVar1 = true;\n    goto LAB_0010778f;\n  case 4:\n    if (uVar12 == 0) {\n      bVar1 = true;\n      goto LAB_00107817;\n    }\n  case 1:\n    bVar1 = false;\nLAB_0010778f:\n    bVar6 = true;\n    local_64 = false;\n    bVar20 = true;\n    local_90 = 0;\n    bVar2 = false;\n    uVar18 = 0;\n    param_5 = 2;\n    local_c8 = 1;\n    local_98 = \"\\'\";\n    break;\n  case 5:\n    if (uVar12 == 0) {\n      if (param_2 != 0) {\n        *param_1 = 0x22;\n      }\n      bVar6 = true;\n      local_64 = false;\n      local_90 = 0;\n      bVar2 = false;\n      bVar20 = false;\n      uVar18 = 1;\n      bVar1 = true;\n      local_c8 = 1;\n      local_98 = \"\\\"\";\n    }\n    else {\n      bVar2 = false;\n      uVar18 = 0;\n      bVar6 = true;\n      local_64 = false;\n      local_90 = 0;\n      bVar20 = true;\n      bVar1 = true;\n      local_c8 = 1;\n      local_98 = \"\\\"\";\n    }\n    break;\n  case 6:\n    bVar2 = false;\n    uVar18 = 0;\n    bVar6 = true;\n    local_64 = false;\n    param_5 = 5;\n    local_90 = 0;\n    bVar20 = true;\n    bVar1 = true;\n    local_c8 = 1;\n    local_98 = \"\\\"\";\n    break;\n  case 7:\n    bVar6 = true;\n    bVar2 = false;\n    uVar18 = 0;\n    local_64 = false;\n    local_90 = 0;\n    bVar20 = false;\n    bVar1 = true;\n    local_c8 = 0;\n    local_98 = (char *)0x0;\n    break;\n  case 8:\n  case 9:\n  case 10:\n    if (param_5 != 10) {\n      local_70 = (char *)gettext_quote(&DAT_0010f839,param_5);\n      local_78 = (char *)gettext_quote(&DAT_0010f829);\n    }\n    uVar18 = 0;\n    if (uVar12 == 0) {\n      cVar11 = *local_70;\n      while (cVar11 != '\\0') {\n        if (uVar18 < param_2) {\n          param_1[uVar18] = cVar11;\n        }\n        uVar18 = uVar18 + 1;\n        cVar11 = local_70[uVar18];\n      }\n    }\n    bVar2 = false;\n    local_c8 = strlen(local_78);\n    local_98 = local_78;\n    bVar6 = true;\n    local_64 = false;\n    local_90 = 0;\n    bVar1 = true;\n    break;\n  default:\n                    /* WARNING: Subroutine does not return */\n    abort();\n  }\n  do {\n    uVar13 = 0;\n    bVar4 = local_64;\nLAB_001074e0:\n    bVar21 = param_4 != uVar13;\n    if (param_4 == 0xffffffffffffffff) {\n      bVar21 = param_3[uVar13] != '\\0';\n    }\n    bVar24 = bVar1;\n    if (bVar21) {\n      bVar23 = (bool)(param_5 != 2 & bVar1);\n      __s1 = (byte *)(param_3 + uVar13);\n      uVar17 = uVar13;\n      bVar3 = bVar2;\n      bVar5 = bVar23;\n      if (!bVar23) {\n        uVar15 = (ulong)*__s1;\n        switch(uVar15) {\n        case 0:\n          if (bVar1) goto switchD_00107d40_caseD_0;\n          bVar5 = false;\n          uVar15 = 0;\n          if ((param_6 & 1) != 0) goto code_r0x00107cdb;\n          goto LAB_00107acb;\n        default:\nswitchD_00107bf0_caseD_1:\n          bVar22 = bVar1;\n          if (sVar8 != 1) {\n            local_48 = (mbstate_t)0x0;\n            if (param_4 == 0xffffffffffffffff) {\n              param_4 = strlen(param_3);\n            }\n            uVar17 = 0;\n            do {\n              uVar19 = uVar13 + uVar17;\n              lVar10 = rpl_mbrtowc(&local_4c,param_3 + uVar19,param_4 - uVar19,&local_48);\n              if (lVar10 == 0) break;\n              if (lVar10 == -1) {\n                bVar21 = false;\n                goto LAB_00107fc8;\n              }\n              if (lVar10 == -2) goto joined_r0x001083da;\n              if (((param_5 == 2) && (bVar20)) && (lVar10 != 1)) {\n                pcVar16 = param_3 + uVar19 + 1;\n                do {\n                  if (((byte)(*pcVar16 + 0xa5U) < 0x22) &&\n                     ((1L << (*pcVar16 + 0xa5U & 0x3f) & 0x20000002bU) != 0)) {\n                    param_5 = 2;\n                    goto LAB_001079b0;\n                  }\n                  pcVar16 = pcVar16 + 1;\n                } while (param_3 + uVar19 + lVar10 != pcVar16);\n              }\n              iVar7 = iswprint(local_4c);\n              if (iVar7 == 0) {\n                bVar21 = false;\n              }\n              uVar17 = uVar17 + lVar10;\n              iVar7 = mbsinit(&local_48);\n            } while (iVar7 == 0);\n            bVar22 = (bool)((bVar21 ^ 1U) & bVar1);\n            goto LAB_00107fc8;\n          }\n          ppuVar9 = __ctype_b_loc();\n          uVar17 = 1;\n          bVar22 = ((*ppuVar9)[uVar15] & 0x4000) == 0;\n          bVar21 = !bVar22;\n          bVar22 = (bool)(bVar22 & bVar1);\n          goto LAB_00107751;\n        case 7:\n          uVar15 = 7;\n          bVar14 = 0x61;\n          break;\n        case 8:\n          uVar15 = 8;\n          bVar14 = 0x62;\n          break;\n        case 9:\n          uVar15 = 9;\n          bVar14 = 0x74;\n          goto LAB_00107c98;\n        case 10:\n          uVar15 = 10;\n          bVar14 = 0x6e;\n          goto LAB_00107c98;\n        case 0xb:\n          uVar15 = 0xb;\n          bVar14 = 0x76;\n          break;\n        case 0xc:\n          uVar15 = 0xc;\n          bVar14 = 0x66;\n          break;\n        case 0xd:\n          uVar15 = 0xd;\n          bVar14 = 0x72;\nLAB_00107c98:\n          bVar23 = (bool)(param_5 == 2 & bVar20);\n          if (bVar23) goto LAB_001079a7;\n          break;\n        case 0x20:\n          uVar15 = 0x20;\n          goto LAB_00107994;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2a:\n        case 0x3b:\n        case 0x3c:\n        case 0x3d:\n        case 0x3e:\n        case 0x5b:\n        case 0x5e:\n        case 0x60:\n        case 0x7c:\n          bVar21 = false;\nLAB_00107994:\n          bVar22 = param_5 == 2;\n          bVar23 = bVar21;\n          if ((!bVar20) || (!bVar22)) goto LAB_001076b8;\n          goto LAB_001079a7;\n        case 0x23:\n        case 0x7e:\nLAB_0010798b:\n          bVar22 = param_5 == 2;\n          if (uVar13 == 0) goto LAB_00107994;\n          goto LAB_001076b5;\n        case 0x25:\n        case 0x2b:\n        case 0x2c:\n        case 0x2d:\n        case 0x2e:\n        case 0x2f:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3a:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4a:\n        case 0x4b:\n        case 0x4c:\n        case 0x4d:\n        case 0x4e:\n        case 0x4f:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5a:\n        case 0x5d:\n        case 0x5f:\n        case 0x61:\n        case 0x62:\n        case 99:\n        case 100:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6a:\n        case 0x6b:\n        case 0x6c:\n        case 0x6d:\n        case 0x6e:\n        case 0x6f:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7a:\n          goto switchD_00107bf0_caseD_25;\n        case 0x27:\nswitchD_00107bf0_caseD_27:\n          bVar4 = bVar21;\n          if (param_5 != 2) {\n            bVar22 = false;\n            uVar15 = 0x27;\n            bVar23 = bVar21;\n            goto LAB_001076b8;\n          }\n          if (!bVar20) {\n            if ((param_2 == 0) || (uVar13 = 0, uVar15 = param_2, local_90 != 0)) {\n              if (uVar18 < param_2) {\n                param_1[uVar18] = 0x27;\n              }\n              if (uVar18 + 1 < param_2) {\n                param_1[uVar18 + 1] = 0x5c;\n              }\n              uVar13 = param_2;\n              uVar15 = local_90;\n              if (uVar18 + 2 < param_2) {\n                param_1[uVar18 + 2] = 0x27;\n              }\n            }\n            bVar14 = 0x27;\n            uVar18 = uVar18 + 3;\n            param_2 = uVar13;\n            local_90 = uVar15;\n            bVar3 = false;\n            bVar22 = false;\n            goto joined_r0x001076db;\n          }\n          goto LAB_001079b0;\n        case 0x3f:\nswitchD_00107bf0_caseD_3f:\n          if (param_5 != 2) {\n            if ((((param_5 == 5) && ((param_6 & 4) != 0)) && (uVar17 = uVar13 + 2, uVar17 < param_4)\n                ) && (param_3[uVar13 + 1] == '?')) {\n              uVar15 = (ulong)(byte)param_3[uVar17];\n              switch(param_3[uVar17]) {\n              case '!':\n              case '\\'':\n              case '(':\n              case ')':\n              case '-':\n              case '/':\n              case '<':\n              case '=':\n              case '>':\n                goto switchD_0010833e_caseD_21;\n              default:\n                break;\n              }\n            }\n            bVar22 = false;\n            uVar15 = 0x3f;\n            bVar23 = false;\n            goto LAB_001076b8;\n          }\n          if (!bVar20) {\n            bVar14 = 0x3f;\n            bVar22 = false;\n            bVar21 = false;\n            goto joined_r0x001076db;\n          }\n          goto LAB_001079b0;\n        case 0x5c:\n          if (param_5 != 2) goto switchD_001075e8_caseD_5c;\n          if (!bVar20) {\nLAB_00107c28:\n            uVar13 = uVar13 + 1;\n            bVar21 = false;\n            bVar14 = 0x5c;\n            goto LAB_00107c40;\n          }\n          goto LAB_001079b0;\n        case 0x7b:\n        case 0x7d:\nswitchD_00107bf0_caseD_7b:\n          bVar23 = param_4 != 1;\n          if (param_4 == 0xffffffffffffffff) {\n            bVar23 = param_3[1] != '\\0';\n          }\n          bVar22 = param_5 == 2;\n          if (!bVar23) goto LAB_0010798b;\nLAB_001076b5:\n          bVar23 = false;\n          goto LAB_001076b8;\n        }\nLAB_00107ac0:\n        bVar5 = bVar23;\n        if (!bVar1) {\nLAB_00107acb:\n          bVar14 = (byte)uVar15;\n          bVar23 = false;\n          bVar21 = false;\n          bVar22 = false;\n          if (!bVar20) goto LAB_001076d8;\n          goto LAB_00107600;\n        }\nLAB_00107b00:\n        bVar21 = false;\n        goto joined_r0x00107b11;\n      }\n      if (local_c8 != 0) {\n        if ((param_4 == 0xffffffffffffffff) && (1 < local_c8)) {\n          param_4 = strlen(param_3);\n        }\n        if ((param_4 < uVar13 + local_c8) || (iVar7 = memcmp(__s1,local_98,local_c8), iVar7 != 0))\n        goto LAB_00107d20;\n        if (!bVar20) {\n          uVar15 = (ulong)*__s1;\n          switch(uVar15) {\n          case 0:\n            goto switchD_001075e8_caseD_0;\n          default:\n            goto switchD_00107bf0_caseD_1;\n          case 7:\n            goto switchD_00107d40_caseD_7;\n          case 8:\n            goto switchD_00107d40_caseD_8;\n          case 9:\n            goto switchD_001075e8_caseD_9;\n          case 10:\n            goto switchD_00107d40_caseD_a;\n          case 0xb:\n            goto switchD_00107d40_caseD_b;\n          case 0xc:\n            goto switchD_00107d40_caseD_c;\n          case 0xd:\n            goto switchD_00107d40_caseD_d;\n          case 0x20:\n            goto LAB_00107d69;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2a:\n          case 0x3b:\n          case 0x3c:\n          case 0x3d:\n          case 0x3e:\n          case 0x5b:\n          case 0x5e:\n          case 0x60:\n          case 0x7c:\n            goto switchD_001075e8_caseD_21;\n          case 0x23:\n          case 0x7e:\n            goto LAB_00107d51;\n          case 0x25:\n          case 0x2b:\n          case 0x2c:\n          case 0x2d:\n          case 0x2e:\n          case 0x2f:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3a:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4a:\n          case 0x4b:\n          case 0x4c:\n          case 0x4d:\n          case 0x4e:\n          case 0x4f:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5a:\n          case 0x5d:\n          case 0x5f:\n          case 0x61:\n          case 0x62:\n          case 99:\n          case 100:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6a:\n          case 0x6b:\n          case 0x6c:\n          case 0x6d:\n          case 0x6e:\n          case 0x6f:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7a:\n            goto LAB_001075f8;\n          case 0x27:\n            goto switchD_00107bf0_caseD_27;\n          case 0x3f:\n            goto switchD_00107bf0_caseD_3f;\n          case 0x5c:\n            goto switchD_001075e8_caseD_5c;\n          case 0x7b:\n          case 0x7d:\n            goto switchD_00107bf0_caseD_7b;\n          }\n        }\n        goto LAB_001079be;\n      }\nLAB_00107d20:\n      uVar15 = (ulong)*__s1;\n      switch(uVar15) {\n      case 0:\nswitchD_00107d40_caseD_0:\n        if (!bVar20) {\n          bVar5 = false;\nswitchD_001075e8_caseD_0:\n          bVar24 = param_5 == 2;\n          bVar3 = (bool)((bVar2 ^ 1U) & bVar24);\n          if (bVar3) {\n            if (uVar18 < param_2) {\n              param_1[uVar18] = 0x27;\n            }\n            if (uVar18 + 1 < param_2) {\n              param_1[uVar18 + 1] = 0x24;\n            }\n            if (uVar18 + 2 < param_2) {\n              param_1[uVar18 + 2] = 0x27;\n            }\n            uVar15 = uVar18 + 3;\n            bVar2 = bVar3;\n            if (param_2 <= uVar18 + 3) {\n              bVar14 = 0x30;\n              uVar18 = uVar18 + 4;\n              bVar22 = bVar3;\n              bVar21 = false;\n              goto joined_r0x001076db;\n            }\nLAB_0010817b:\n            param_1[uVar15] = 0x5c;\n            uVar18 = uVar15;\n          }\n          else {\n            uVar15 = uVar18;\n            if (uVar18 < param_2) goto LAB_0010817b;\n          }\n          uVar19 = uVar18 + 1;\n          bVar22 = bVar21;\n          if (param_5 != 2) {\n            uVar15 = 0x30;\n            if ((uVar13 + 1 < param_4) && ((byte)(param_3[uVar13 + 1] - 0x30U) < 10)) {\n              if (uVar19 < param_2) {\n                param_1[uVar19] = 0x30;\n              }\n              if (uVar18 + 2 < param_2) {\n                param_1[uVar18 + 2] = 0x30;\n              }\n              uVar19 = uVar18 + 3;\n              uVar15 = 0x30;\n            }\n            goto LAB_001081b8;\n          }\n          bVar14 = 0x30;\n          uVar18 = uVar19;\n          bVar3 = bVar2;\n          bVar21 = false;\n          goto joined_r0x001076db;\n        }\n        bVar24 = param_5 == 2;\n        goto LAB_001079b0;\n      default:\n        bVar23 = false;\n        goto switchD_00107bf0_caseD_1;\n      case 7:\nswitchD_00107d40_caseD_7:\n        bVar14 = 0x61;\n        break;\n      case 8:\nswitchD_00107d40_caseD_8:\n        bVar14 = 0x62;\n        break;\n      case 9:\n        bVar23 = false;\nswitchD_001075e8_caseD_9:\n        uVar15 = 9;\n        bVar14 = 0x74;\n        goto LAB_00107ac0;\n      case 10:\nswitchD_00107d40_caseD_a:\n        bVar14 = 0x6e;\n        goto LAB_00107b00;\n      case 0xb:\nswitchD_00107d40_caseD_b:\n        bVar14 = 0x76;\n        goto LAB_00107b00;\n      case 0xc:\nswitchD_00107d40_caseD_c:\n        bVar14 = 0x66;\n        break;\n      case 0xd:\nswitchD_00107d40_caseD_d:\n        bVar14 = 0x72;\n        goto LAB_00107b00;\n      case 0x20:\n        bVar5 = false;\nLAB_00107d69:\n        uVar15 = 0x20;\n        goto LAB_001075f8;\n      case 0x21:\n      case 0x22:\n      case 0x24:\n      case 0x26:\n      case 0x28:\n      case 0x29:\n      case 0x2a:\n      case 0x3b:\n      case 0x3c:\n      case 0x3d:\n      case 0x3e:\n      case 0x5b:\n      case 0x5e:\n      case 0x60:\n      case 0x7c:\n        bVar5 = false;\nswitchD_001075e8_caseD_21:\n        bVar22 = false;\n        goto LAB_001076b5;\n      case 0x23:\n      case 0x7e:\n        bVar5 = false;\nLAB_00107d51:\n        if (uVar13 == 0) {\n          bVar22 = false;\n          goto LAB_001076b8;\n        }\n        bVar23 = false;\n        bVar22 = false;\n        goto LAB_00107600;\n      case 0x25:\n      case 0x2b:\n      case 0x2c:\n      case 0x2d:\n      case 0x2e:\n      case 0x2f:\n      case 0x30:\n      case 0x31:\n      case 0x32:\n      case 0x33:\n      case 0x34:\n      case 0x35:\n      case 0x36:\n      case 0x37:\n      case 0x38:\n      case 0x39:\n      case 0x3a:\n      case 0x41:\n      case 0x42:\n      case 0x43:\n      case 0x44:\n      case 0x45:\n      case 0x46:\n      case 0x47:\n      case 0x48:\n      case 0x49:\n      case 0x4a:\n      case 0x4b:\n      case 0x4c:\n      case 0x4d:\n      case 0x4e:\n      case 0x4f:\n      case 0x50:\n      case 0x51:\n      case 0x52:\n      case 0x53:\n      case 0x54:\n      case 0x55:\n      case 0x56:\n      case 0x57:\n      case 0x58:\n      case 0x59:\n      case 0x5a:\n      case 0x5d:\n      case 0x5f:\n      case 0x61:\n      case 0x62:\n      case 99:\n      case 100:\n      case 0x65:\n      case 0x66:\n      case 0x67:\n      case 0x68:\n      case 0x69:\n      case 0x6a:\n      case 0x6b:\n      case 0x6c:\n      case 0x6d:\n      case 0x6e:\n      case 0x6f:\n      case 0x70:\n      case 0x71:\n      case 0x72:\n      case 0x73:\n      case 0x74:\n      case 0x75:\n      case 0x76:\n      case 0x77:\n      case 0x78:\n      case 0x79:\n      case 0x7a:\n        bVar5 = false;\nLAB_001075f8:\n        bVar22 = false;\n        goto LAB_00107600;\n      case 0x27:\n        bVar5 = false;\n        goto switchD_00107bf0_caseD_27;\n      case 0x3f:\n        bVar5 = false;\n        goto switchD_00107bf0_caseD_3f;\n      case 0x5c:\n        bVar23 = false;\nswitchD_001075e8_caseD_5c:\n        if (((bool)(bVar1 & bVar20)) && (local_c8 != 0)) goto LAB_00107c28;\n        uVar15 = 0x5c;\n        bVar14 = 0x5c;\n        goto LAB_00107ac0;\n      case 0x7b:\n      case 0x7d:\n        bVar5 = false;\n        goto switchD_00107bf0_caseD_7b;\n      }\n      if (bVar20) goto LAB_00107b20;\n      bVar21 = false;\n      goto LAB_00107676;\n    }\n    if ((uVar18 == 0) && ((bool)(bVar20 & param_5 == 2))) {\nLAB_001079a7:\n      param_5 = 2;\nLAB_001079b0:\n      if (bVar24) {\n        param_5 = 4;\n      }\nLAB_001079be:\n      uVar13 = quotearg_buffer_restyled\n                         (param_1,param_2,param_3,param_4,param_5,param_6 & 0xfffffffd,0,local_70,\n                          local_78);\n      goto LAB_001079f8;\n    }\n    bVar21 = (bool)(param_5 == 2 & (bVar20 ^ 1U));\n    bVar20 = (bool)(bVar20 ^ 1U);\n    if ((!bVar21) || (bVar20 = bVar21, !bVar4)) {\nLAB_00108445:\n      uVar13 = uVar18;\n      if (((local_98 != (char *)0x0) && (bVar20)) && (cVar11 = *local_98, cVar11 != '\\0')) {\n        do {\n          if (uVar13 < param_2) {\n            param_1[uVar13] = cVar11;\n          }\n          uVar13 = uVar13 + 1;\n          cVar11 = local_98[uVar13 - uVar18];\n        } while (cVar11 != '\\0');\n      }\n      if (uVar13 < param_2) {\n        param_1[uVar13] = 0;\n      }\nLAB_001079f8:\n      if (local_40 == *(long *)(in_FS_OFFSET + 0x28)) {\n        return uVar13;\n      }\n                    /* WARNING: Subroutine does not return */\n      __stack_chk_fail();\n    }\n    if (bVar6) {\n      uVar13 = quotearg_buffer_restyled\n                         (param_1,local_90,param_3,param_4,5,param_6,param_7,local_70,local_78);\n      goto LAB_001079f8;\n    }\n    local_64 = param_2 == 0 && local_90 != 0;\n    uVar13 = local_90;\n    bVar20 = bVar4;\n    if (param_2 != 0 || local_90 == 0) goto LAB_00108445;\nLAB_00107dd6:\n    *param_1 = 0x27;\n    param_2 = local_90;\n    local_90 = uVar13;\nLAB_00107839:\n    bVar20 = false;\n    uVar18 = 1;\n    param_5 = 2;\n    local_c8 = 1;\n    local_98 = \"\\'\";\n  } while( true );\ncode_r0x00107cdb:\n  uVar13 = uVar13 + 1;\n  goto LAB_001074e0;\nswitchD_0010833e_caseD_21:\n  if (!bVar20) {\n    if (uVar18 < param_2) {\n      param_1[uVar18] = 0x3f;\n    }\n    if (uVar18 + 1 < param_2) {\n      param_1[uVar18 + 1] = 0x22;\n    }\n    if (uVar18 + 2 < param_2) {\n      param_1[uVar18 + 2] = 0x22;\n    }\n    if (uVar18 + 3 < param_2) {\n      param_1[uVar18 + 3] = 0x3f;\n    }\n    uVar19 = uVar18 + 4;\n    bVar24 = false;\n    bVar22 = false;\nLAB_001081b8:\n    bVar14 = (byte)uVar15;\n    bVar23 = false;\n    bVar21 = false;\n    uVar13 = uVar17;\n    uVar18 = uVar19;\n    bVar3 = bVar2;\n    if ((bool)(bVar1 ^ 1U | bVar24)) goto joined_r0x001076db;\n    goto LAB_00107600;\n  }\n  goto LAB_001079be;\njoined_r0x001083da:\n  while ((uVar19 < param_4 && (param_3[uVar19] != '\\0'))) {\n    uVar17 = uVar17 + 1;\n    uVar19 = uVar13 + uVar17;\n  }\n  bVar21 = false;\nLAB_00107fc8:\n  if (1 < uVar17) {\nLAB_00107fd2:\n    bVar24 = false;\n    uVar17 = uVar17 + uVar13;\n    uVar19 = uVar13;\n    do {\n      bVar14 = (byte)uVar15;\n      if (bVar22) {\n        bVar24 = param_5 == 2;\n        if (bVar20) goto LAB_001079b0;\n        bVar24 = (bool)(bVar24 & (bVar3 ^ 1U));\n        if (bVar24) {\n          if (uVar18 < param_2) {\n            param_1[uVar18] = 0x27;\n          }\n          if (uVar18 + 1 < param_2) {\n            param_1[uVar18 + 1] = 0x24;\n          }\n          if (uVar18 + 2 < param_2) {\n            param_1[uVar18 + 2] = 0x27;\n          }\n          uVar18 = uVar18 + 3;\n          bVar3 = bVar24;\n        }\n        if (uVar18 < param_2) {\n          param_1[uVar18] = 0x5c;\n        }\n        if (uVar18 + 1 < param_2) {\n          param_1[uVar18 + 1] = (char)(uVar15 >> 6) + '0';\n        }\n        if (uVar18 + 2 < param_2) {\n          param_1[uVar18 + 2] = ((byte)(uVar15 >> 3) & 7) + 0x30;\n        }\n        uVar13 = uVar19 + 1;\n        uVar18 = uVar18 + 3;\n        bVar14 = (bVar14 & 7) + 0x30;\n        bVar24 = bVar22;\n        if (uVar17 <= uVar13) goto LAB_00107688;\n      }\n      else {\n        bVar2 = (bool)((bVar24 ^ 1U) & bVar3);\n        if (bVar23) {\n          if (uVar18 < param_2) {\n            param_1[uVar18] = 0x5c;\n          }\n          uVar18 = uVar18 + 1;\n        }\n        uVar13 = uVar19 + 1;\n        if (uVar17 <= uVar13) goto LAB_00107c40;\n        if (bVar2) {\n          if (uVar18 < param_2) {\n            param_1[uVar18] = 0x27;\n          }\n          if (uVar18 + 1 < param_2) {\n            param_1[uVar18 + 1] = 0x27;\n          }\n          uVar18 = uVar18 + 2;\n          bVar23 = false;\n          bVar3 = false;\n        }\n        else {\n          bVar23 = false;\n        }\n      }\n      uVar19 = uVar19 + 1;\n      if (uVar18 < param_2) {\n        param_1[uVar18] = bVar14;\n      }\n      uVar15 = (ulong)(byte)param_3[uVar19];\n      uVar18 = uVar18 + 1;\n    } while( true );\n  }\nLAB_00107751:\n  bVar5 = bVar23;\n  if (bVar22) {\n    bVar21 = false;\n    bVar22 = bVar1;\n    goto LAB_00107fd2;\n  }\nswitchD_00107bf0_caseD_25:\n  bVar22 = param_5 == 2;\n  bVar23 = bVar21;\nLAB_001076b8:\n  bVar14 = (byte)uVar15;\n  bVar22 = (bool)(bVar22 | bVar1 ^ 1U);\n  if ((!bVar22) || (bVar22 = false, bVar21 = bVar23, bVar20)) {\nLAB_00107600:\n    bVar14 = (byte)uVar15;\n    uVar17 = uVar13;\n    bVar3 = bVar2;\n    bVar21 = bVar23;\n    if ((param_7 == 0) || ((*(uint *)(param_7 + (uVar15 >> 5) * 4) >> (bVar14 & 0x1f) & 1) == 0))\n    goto joined_r0x001076db;\n  }\n  else {\nLAB_001076d8:\n    uVar17 = uVar13;\n    bVar22 = false;\njoined_r0x001076db:\n    uVar13 = uVar17;\n    bVar2 = bVar3;\n    if (!bVar5) {\n      uVar13 = uVar17 + 1;\n      bVar2 = (bool)((bVar22 ^ 1U) & bVar3);\nLAB_00107c40:\n      if (bVar2) {\n        if (uVar18 < param_2) {\n          param_1[uVar18] = 0x27;\n        }\n        if (uVar18 + 1 < param_2) {\n          param_1[uVar18 + 1] = 0x27;\n        }\n        uVar18 = uVar18 + 2;\n        bVar3 = false;\n      }\n      goto LAB_00107688;\n    }\n  }\njoined_r0x00107b11:\n  if (bVar20) {\nLAB_00107b20:\n    bVar24 = (bool)(bVar1 & param_5 == 2);\n    goto LAB_001079b0;\n  }\n  bVar24 = (bool)((bVar2 ^ 1U) & param_5 == 2);\n  if (bVar24) {\n    if (uVar18 < param_2) {\n      param_1[uVar18] = 0x27;\n    }\n    if (uVar18 + 1 < param_2) {\n      param_1[uVar18 + 1] = 0x24;\n    }\n    if (uVar18 + 2 < param_2) {\n      param_1[uVar18 + 2] = 0x27;\n    }\n    uVar18 = uVar18 + 3;\n    bVar2 = bVar24;\n  }\nLAB_00107676:\n  if (uVar18 < param_2) {\n    param_1[uVar18] = 0x5c;\n  }\n  uVar18 = uVar18 + 1;\n  uVar13 = uVar13 + 1;\n  bVar3 = bVar2;\nLAB_00107688:\n  bVar2 = bVar3;\n  if (uVar18 < param_2) {\n    param_1[uVar18] = bVar14;\n  }\n  uVar18 = uVar18 + 1;\n  if (!bVar21) {\n    bVar6 = false;\n  }\n  goto LAB_001074e0;\n}\n\n", 
    "00109480": "\nvoid xnmalloc(ulong param_1,ulong param_2)\n\n{\n  if ((-1 < SUB168(ZEXT816(param_1) * ZEXT816(param_2),0)) &&\n     (SUB168(ZEXT816(param_1) * ZEXT816(param_2) >> 0x40,0) == 0)) {\n    xmalloc();\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  xalloc_die();\n}\n\n", 
    "00108ae0": "\nvoid quotearg_n_style_mem\n               (undefined4 param_1,undefined8 param_2,undefined8 param_3,undefined8 param_4)\n\n{\n  long in_FS_OFFSET;\n  undefined auStack_68 [56];\n  long local_30;\n  \n  local_30 = *(long *)(in_FS_OFFSET + 0x28);\n  quoting_options_from_style(auStack_68);\n  quotearg_n_options(param_1,param_3,param_4,auStack_68);\n  if (local_30 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "001033f0": "\nvoid __cxa_finalize(void)\n\n{\n  (*(code *)PTR___cxa_finalize_00114fe0)();\n  return;\n}\n\n", 
    "0010a650": "\nvoid rpl_fflush(FILE *param_1)\n\n{\n  int iVar1;\n  \n  if (param_1 != (FILE *)0x0) {\n    iVar1 = __freading();\n    if (iVar1 != 0) {\n      clear_ungetc_buffer_preserving_position(param_1);\n      fflush(param_1);\n      return;\n    }\n  }\n  fflush(param_1);\n  return;\n}\n\n", 
    "00104bc0": "\nvoid set_speed(uint param_1,undefined8 param_2,termios *param_3)\n\n{\n  speed_t __speed;\n  \n  __speed = string_to_baud(param_2);\n  if ((param_1 & 0xfffffffd) == 0) {\n    cfsetispeed(param_3,__speed);\n  }\n  if (param_1 - 1 < 2) {\n    cfsetospeed(param_3,__speed);\n    return;\n  }\n  return;\n}\n\n", 
    "00105320": "\nvoid display_settings_constprop_0(int param_1,undefined8 param_2)\n\n{\n  undefined8 uVar1;\n  uint *puVar2;\n  long lVar3;\n  int *piVar4;\n  undefined *puVar5;\n  byte *pbVar6;\n  byte *pbVar7;\n  byte *pbVar8;\n  long *plVar9;\n  char *pcVar10;\n  int iVar11;\n  int iVar12;\n  undefined uVar13;\n  undefined uVar14;\n  undefined uVar15;\n  byte bVar16;\n  \n  bVar16 = 0;\n  if (param_1 != 1) {\n    if (param_1 == 2) {\n      puVar5 = mode_7139 + 0x11;\n      __printf_chk(1,\"%lx:%lx:%lx:%lx\",mode_7139._0_4_,mode_7139._4_4_,mode_7139._8_4_,\n                   mode_7139._12_4_);\n      do {\n        uVar13 = *puVar5;\n        puVar5 = puVar5 + 1;\n        __printf_chk(1,\":%lx\",uVar13);\n      } while (puVar5 != mode_7139 + 0x31);\n      putchar_unlocked(10);\n      return;\n    }\n    if (param_1 == 0) {\n      display_changed_constprop_0();\n      return;\n    }\n    return;\n  }\n  plVar9 = (long *)(control_info + 0x10);\n  display_speed(mode_7139,1);\n  display_window_size(1,param_2);\n  uVar13 = 0;\n  uVar15 = 1;\n  wrapf(\"line = %d;\",mode_7139[16]);\n  putchar_unlocked(10);\n  pbVar8 = &DAT_0010d0e1;\n  current_col = 0;\n  do {\n    lVar3 = 6;\n    pbVar6 = pbVar8;\n    pbVar7 = (byte *)\"flush\";\n    do {\n      if (lVar3 == 0) break;\n      lVar3 = lVar3 + -1;\n      uVar13 = *pbVar6 < *pbVar7;\n      uVar15 = *pbVar6 == *pbVar7;\n      pbVar6 = pbVar6 + (ulong)bVar16 * -2 + 1;\n      pbVar7 = pbVar7 + (ulong)bVar16 * -2 + 1;\n    } while ((bool)uVar15);\n    uVar14 = 0;\n    uVar15 = (!(bool)uVar13 && !(bool)uVar15) == (bool)uVar13;\n    if (!(bool)uVar15) {\n      uVar1 = visible(mode_7139[*plVar9 + 0x11]);\n      uVar14 = 0;\n      uVar15 = 1;\n      wrapf(\"%s = %s;\",pbVar8,uVar1);\n    }\n    pbVar8 = (byte *)plVar9[1];\n    lVar3 = 4;\n    pbVar6 = pbVar8;\n    pbVar7 = &DAT_0010d0d2;\n    do {\n      if (lVar3 == 0) break;\n      lVar3 = lVar3 + -1;\n      uVar14 = *pbVar6 < *pbVar7;\n      uVar15 = *pbVar6 == *pbVar7;\n      pbVar6 = pbVar6 + (ulong)bVar16 * -2 + 1;\n      pbVar7 = pbVar7 + (ulong)bVar16 * -2 + 1;\n    } while ((bool)uVar15);\n    plVar9 = plVar9 + 3;\n    uVar13 = 0;\n    uVar15 = (!(bool)uVar14 && !(bool)uVar15) == (bool)uVar14;\n  } while (!(bool)uVar15);\n  wrapf(\"min = %lu; time = %lu;\",mode_7139[23],mode_7139[22]);\n  if (current_col != 0) {\n    putchar_unlocked(10);\n  }\n  bVar16 = 4;\n  current_col = 0;\n  pcVar10 = \"parenb\";\n  iVar12 = 0;\n  piVar4 = (int *)(mode_info + 8);\n  do {\n    iVar11 = iVar12;\n    if ((bVar16 & 8) == 0) {\n      iVar11 = *piVar4;\n      if (iVar11 != iVar12) {\n        putchar_unlocked(10);\n        current_col = 0;\n      }\n      puVar2 = (uint *)mode_type_flag(iVar11,mode_7139);\n      lVar3 = *(long *)(piVar4 + 4);\n      if (lVar3 == 0) {\n        lVar3 = *(long *)(piVar4 + 2);\n      }\n      if (puVar2 == (uint *)0x0) {\n                    /* WARNING: Subroutine does not return */\n        __assert_fail(\"bitsp\",\"src/stty.c\",0x7f6,\"display_all\");\n      }\n      if ((ulong)((uint)lVar3 & *puVar2) == *(ulong *)(piVar4 + 2)) {\n        wrapf(\"%s\",pcVar10);\n        goto LAB_001051b0;\n      }\n      if ((bVar16 & 4) == 0) goto LAB_001051b0;\n      wrapf(&DAT_0010d11f,pcVar10);\n      pcVar10 = *(char **)(piVar4 + 6);\n      iVar12 = iVar11;\n    }\n    else {\nLAB_001051b0:\n      pcVar10 = *(char **)(piVar4 + 6);\n      iVar12 = iVar11;\n    }\n    if (pcVar10 == (char *)0x0) {\n      putchar_unlocked(10);\n      current_col = 0;\n      return;\n    }\n    bVar16 = *(byte *)(piVar4 + 9);\n    piVar4 = piVar4 + 8;\n  } while( true );\n}\n\n", 
    "001093d0": "\nvoid emit_bug_reporting_address(void)\n\n{\n  FILE *__stream;\n  undefined8 uVar1;\n  char *__s;\n  \n  uVar1 = dcgettext(0,\"\\nReport bugs to: %s\\n\",5);\n  __printf_chk(1,uVar1,\"bug-coreutils@gnu.org\");\n  uVar1 = dcgettext(0,\"%s home page: <%s>\\n\",5);\n  __printf_chk(1,uVar1,\"GNU coreutils\",\"https://www.gnu.org/software/coreutils/\");\n  __stream = stdout;\n  __s = (char *)dcgettext(0,\"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\",5);\n  fputs_unlocked(__s,__stream);\n  return;\n}\n\n", 
    "00104110": "\nvoid get_win_size(int param_1,undefined8 param_2)\n\n{\n  ioctl(param_1,0x5413,param_2);\n  return;\n}\n\n", 
    "00108c40": "\nvoid quotearg_colon_mem(undefined8 param_1,undefined8 param_2)\n\n{\n  quotearg_char_mem(param_1,param_2,0x3a);\n  return;\n}\n\n", 
    "00103020": "\nvoid FUN_00103020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)PTR_00114dd8)();\n  return;\n}\n\n", 
    "0010ba40": "\nundefined8 printf_parse(byte *param_1,ulong *param_2,byte **param_3)\n\n{\n  ulong *puVar1;\n  byte **ppbVar2;\n  byte **ppbVar3;\n  int iVar4;\n  uint uVar5;\n  ulong *__dest;\n  byte *pbVar6;\n  ulong uVar7;\n  int *piVar8;\n  byte *pbVar9;\n  byte **__ptr;\n  ulong uVar10;\n  int iVar11;\n  byte bVar12;\n  byte *pbVar13;\n  byte *pbVar14;\n  byte **__src;\n  long lVar15;\n  byte *pbVar16;\n  byte *pbVar17;\n  ulong *__ptr_00;\n  bool bVar18;\n  ulong local_80;\n  ulong local_78;\n  ulong local_68;\n  byte *local_60;\n  \n  puVar1 = param_2 + 4;\n  ppbVar2 = param_3 + 2;\n  pbVar17 = (byte *)0x7;\n  uVar7 = 0;\n  *param_2 = 0;\n  param_2[1] = (ulong)puVar1;\n  *param_3 = (byte *)0x0;\n  param_3[1] = (byte *)ppbVar2;\n  local_68 = 0;\n  local_78 = 0;\n  local_80 = 7;\n  local_60 = (byte *)0x0;\n  __dest = puVar1;\nLAB_0010babb:\n  do {\n    pbVar6 = param_1;\n    if (*pbVar6 == 0) {\n      __dest[uVar7 * 0xb] = (ulong)pbVar6;\n      param_2[2] = local_78;\n      param_2[3] = local_68;\n      return 0;\n    }\n    param_1 = pbVar6 + 1;\n  } while (*pbVar6 != 0x25);\n  pbVar16 = (byte *)0xffffffffffffffff;\n  ppbVar3 = (byte **)(__dest + uVar7 * 0xb);\n  *ppbVar3 = pbVar6;\n  *(undefined4 *)(ppbVar3 + 2) = 0;\n  ppbVar3[3] = (byte *)0x0;\n  ppbVar3[4] = (byte *)0x0;\n  ppbVar3[5] = (byte *)0xffffffffffffffff;\n  ppbVar3[6] = (byte *)0x0;\n  ppbVar3[7] = (byte *)0x0;\n  ppbVar3[8] = (byte *)0xffffffffffffffff;\n  ppbVar3[10] = (byte *)0xffffffffffffffff;\n  bVar12 = pbVar6[1];\n  pbVar6 = param_1;\n  if (9 < (byte)(bVar12 - 0x30)) {\nLAB_0010bb90:\n    do {\n      pbVar6 = param_1 + 1;\n      if (bVar12 == 0x27) {\n        *(uint *)(ppbVar3 + 2) = *(uint *)(ppbVar3 + 2) | 1;\n      }\n      else if (bVar12 == 0x2d) {\n        *(uint *)(ppbVar3 + 2) = *(uint *)(ppbVar3 + 2) | 2;\n      }\n      else if (bVar12 == 0x2b) {\n        *(uint *)(ppbVar3 + 2) = *(uint *)(ppbVar3 + 2) | 4;\n      }\n      else if (bVar12 == 0x20) {\n        *(uint *)(ppbVar3 + 2) = *(uint *)(ppbVar3 + 2) | 8;\n      }\n      else if (bVar12 == 0x23) {\n        *(uint *)(ppbVar3 + 2) = *(uint *)(ppbVar3 + 2) | 0x10;\n      }\n      else if (bVar12 == 0x30) {\n        *(uint *)(ppbVar3 + 2) = *(uint *)(ppbVar3 + 2) | 0x20;\n      }\n      else {\n        if (bVar12 != 0x49) goto LAB_0010bbe7;\n        *(uint *)(ppbVar3 + 2) = *(uint *)(ppbVar3 + 2) | 0x40;\n      }\n      bVar12 = *pbVar6;\n      param_1 = pbVar6;\n    } while( true );\n  }\n  do {\n    pbVar14 = pbVar6 + 1;\n    pbVar6 = pbVar6 + 1;\n  } while ((byte)(*pbVar14 - 0x30) < 10);\n  pbVar16 = (byte *)0xffffffffffffffff;\n  if (*pbVar14 != 0x24) goto LAB_0010bb90;\n  uVar7 = 0;\n  do {\n    pbVar6 = param_1;\n    lVar15 = -1;\n    if (uVar7 < 0x199999999999999a) {\n      lVar15 = uVar7 * 10;\n    }\n    uVar7 = xsum(lVar15,(long)((char)bVar12 + -0x30));\n    bVar12 = pbVar6[1];\n    param_1 = pbVar6 + 1;\n  } while ((byte)(bVar12 - 0x30) < 10);\n  pbVar16 = (byte *)(uVar7 - 1);\n  if (pbVar16 < (byte *)0xfffffffffffffffe) {\n    bVar12 = pbVar6[2];\n    param_1 = pbVar6 + 2;\n    goto LAB_0010bb90;\n  }\n  goto switchD_0010bc72_caseD_26;\nLAB_0010bbe7:\n  if (bVar12 != 0x2a) {\n    pbVar9 = param_1;\n    pbVar14 = pbVar6;\n    uVar7 = local_78;\n    if ((byte)(bVar12 - 0x30) < 10) {\n      ppbVar3[3] = param_1;\n      if ((byte)(*param_1 - 0x30) < 10) {\n        do {\n          pbVar14 = pbVar9;\n          pbVar9 = pbVar14 + 1;\n        } while ((byte)(pbVar14[1] - 0x30) < 10);\n        pbVar14 = pbVar14 + 2;\n      }\n      ppbVar3[4] = pbVar9;\n      bVar12 = *pbVar9;\n      uVar7 = (long)pbVar9 - (long)param_1;\n      if ((ulong)((long)pbVar9 - (long)param_1) <= local_78) {\n        uVar7 = local_78;\n      }\n    }\nLAB_0010bbfb:\n    local_78 = uVar7;\n    param_1 = pbVar9;\n    uVar7 = local_68;\n    if (bVar12 != 0x2e) goto LAB_0010bc04;\n    bVar12 = pbVar9[1];\n    ppbVar3[6] = pbVar9;\n    if (bVar12 != 0x2a) {\n      if ((byte)(pbVar9[1] - 0x30) < 10) {\n        do {\n          pbVar6 = pbVar14 + 1;\n          pbVar14 = pbVar14 + 1;\n        } while ((byte)(*pbVar6 - 0x30) < 10);\n        uVar7 = (long)pbVar14 - (long)pbVar9;\n        param_1 = pbVar14;\n      }\n      else {\n        uVar7 = 1;\n        param_1 = pbVar14;\n      }\n      ppbVar3[7] = param_1;\n      bVar12 = *param_1;\n      if (uVar7 <= local_68) {\n        uVar7 = local_68;\n      }\n      goto LAB_0010bc04;\n    }\n    param_1 = pbVar9 + 2;\n    ppbVar3[7] = param_1;\n    uVar7 = 2;\n    if (1 < local_68) {\n      uVar7 = local_68;\n    }\n    bVar12 = pbVar9[2];\n    pbVar6 = param_1;\n    if ((byte)(bVar12 - 0x30) < 10) {\n      do {\n        pbVar14 = pbVar6 + 1;\n        pbVar6 = pbVar6 + 1;\n      } while ((byte)(*pbVar14 - 0x30) < 10);\n      if (*pbVar14 != 0x24) goto LAB_0010bddc;\n      uVar10 = 0;\n      do {\n        pbVar6 = param_1;\n        lVar15 = -1;\n        if (uVar10 < 0x199999999999999a) {\n          lVar15 = uVar10 * 10;\n        }\n        uVar10 = xsum(lVar15,(long)((char)bVar12 + -0x30));\n        bVar12 = pbVar6[1];\n        param_1 = pbVar6 + 1;\n      } while ((byte)(bVar12 - 0x30) < 10);\n      pbVar14 = (byte *)(uVar10 - 1);\n      if ((byte *)0xfffffffffffffffd < pbVar14) goto switchD_0010bc72_caseD_26;\n      ppbVar3[8] = pbVar14;\n      param_1 = pbVar6 + 2;\n    }\n    else {\nLAB_0010bddc:\n      pbVar14 = ppbVar3[8];\n      if (ppbVar3[8] == (byte *)0xffffffffffffffff) {\n        ppbVar3[8] = local_60;\n        bVar18 = local_60 == (byte *)0xffffffffffffffff;\n        pbVar14 = local_60;\n        local_60 = local_60 + 1;\n        if (bVar18) goto switchD_0010bc72_caseD_26;\n      }\n    }\n    __src = (byte **)param_3[1];\n    __ptr = __src;\n    if (pbVar14 < pbVar17) {\nLAB_0010bdf7:\n      pbVar6 = *param_3;\n      if (pbVar6 <= pbVar14) {\n        do {\n          pbVar6 = pbVar6 + 1;\n          *(undefined4 *)(__ptr + (long)pbVar6 * 4 + -4) = 0;\n        } while (pbVar6 <= pbVar14);\n        *param_3 = pbVar6;\n      }\n      iVar11 = *(int *)(__ptr + (long)pbVar14 * 4);\n      if (iVar11 == 0) {\n        *(undefined4 *)(__ptr + (long)pbVar14 * 4) = 5;\n        bVar12 = *param_1;\nLAB_0010bc04:\n        local_68 = uVar7;\n        uVar5 = 0;\n        do {\n          param_1 = param_1 + 1;\n          if (bVar12 == 0x68) {\n            uVar5 = uVar5 | 1 << ((byte)uVar5 & 1);\n          }\n          else if (bVar12 == 0x4c) {\n            uVar5 = uVar5 | 4;\n          }\n          else {\n            if ((((bVar12 != 0x6c) && (bVar12 != 0x6a)) && ((bVar12 & 0xdf) != 0x5a)) &&\n               (bVar12 != 0x74)) goto code_r0x0010bc61;\n            uVar5 = uVar5 + 8;\n          }\n          bVar12 = *param_1;\n        } while( true );\n      }\n      if (iVar11 == 5) {\n        bVar12 = *param_1;\n        goto LAB_0010bc04;\n      }\n      goto LAB_0010bfe6;\n    }\n    pbVar17 = (byte *)((long)pbVar17 * 2);\n    if (pbVar17 <= pbVar14) {\n      pbVar17 = (byte *)xsum(pbVar14,1);\n    }\n    if (pbVar17 < (byte *)0x800000000000000) {\n      if (ppbVar2 == __src) {\n        __ptr = (byte **)malloc((long)pbVar17 << 5);\n        if (__ptr == (byte **)0x0) goto LAB_0010c44a;\nLAB_0010c61a:\n        __ptr = (byte **)memcpy(__ptr,__src,(long)*param_3 << 5);\nLAB_0010c54e:\n        param_3[1] = (byte *)__ptr;\n        goto LAB_0010bdf7;\n      }\n      __ptr = (byte **)realloc(__src,(long)pbVar17 << 5);\n      if (__ptr != (byte **)0x0) {\n        __src = ppbVar2;\n        if (ppbVar2 == (byte **)param_3[1]) goto LAB_0010c61a;\n        goto LAB_0010c54e;\n      }\n      goto LAB_0010c64f;\n    }\n    goto LAB_0010c653;\n  }\n  ppbVar3[3] = param_1;\n  ppbVar3[4] = pbVar6;\n  bVar12 = param_1[1];\n  uVar7 = 1;\n  if (local_78 != 0) {\n    uVar7 = local_78;\n  }\n  pbVar14 = pbVar6;\n  if ((byte)(bVar12 - 0x30) < 10) {\n    do {\n      pbVar9 = pbVar14 + 1;\n      pbVar14 = pbVar14 + 1;\n    } while ((byte)(*pbVar9 - 0x30) < 10);\n    if (*pbVar9 != 0x24) goto LAB_0010be6e;\n    uVar10 = 0;\n    do {\n      pbVar14 = pbVar6;\n      lVar15 = -1;\n      if (uVar10 < 0x199999999999999a) {\n        lVar15 = uVar10 * 10;\n      }\n      uVar10 = xsum(lVar15,(long)((char)bVar12 + -0x30));\n      bVar12 = pbVar14[1];\n      pbVar6 = pbVar14 + 1;\n    } while ((byte)(bVar12 - 0x30) < 10);\n    pbVar13 = (byte *)(uVar10 - 1);\n    if ((byte *)0xfffffffffffffffd < pbVar13) goto switchD_0010bc72_caseD_26;\n    ppbVar3[5] = pbVar13;\n    pbVar6 = pbVar14 + 2;\n  }\n  else {\nLAB_0010be6e:\n    ppbVar3[5] = local_60;\n    bVar18 = local_60 == (byte *)0xffffffffffffffff;\n    pbVar13 = local_60;\n    local_60 = local_60 + 1;\n    if (bVar18) goto switchD_0010bc72_caseD_26;\n  }\n  __ptr = (byte **)param_3[1];\n  if (pbVar13 < pbVar17) {\n    pbVar14 = *param_3;\nLAB_0010bf0e:\n    if (pbVar14 <= pbVar13) {\n      do {\n        pbVar14 = pbVar14 + 1;\n        *(undefined4 *)(__ptr + (long)pbVar14 * 4 + -4) = 0;\n      } while (pbVar14 <= pbVar13);\n      *param_3 = pbVar14;\n    }\n    iVar11 = *(int *)(__ptr + (long)pbVar13 * 4);\n    pbVar9 = pbVar6;\n    if (iVar11 == 0) {\n      *(undefined4 *)(__ptr + (long)pbVar13 * 4) = 5;\n      pbVar14 = pbVar6 + 1;\n      bVar12 = *pbVar6;\n    }\n    else {\n      if (iVar11 != 5) goto LAB_0010bfe6;\n      bVar12 = *pbVar6;\n      pbVar14 = pbVar6 + 1;\n    }\n    goto LAB_0010bbfb;\n  }\n  pbVar17 = (byte *)((long)pbVar17 * 2);\n  if (pbVar17 <= pbVar13) {\n    pbVar17 = (byte *)xsum(pbVar13,1);\n  }\n  __src = __ptr;\n  if ((byte *)0x7ffffffffffffff < pbVar17) goto LAB_0010c653;\n  if (ppbVar2 != __ptr) {\n    __ptr = (byte **)realloc(__ptr,(long)pbVar17 << 5);\n    __src = (byte **)param_3[1];\n    if (__ptr != (byte **)0x0) {\n      pbVar14 = *param_3;\n      if (ppbVar2 == __src) goto LAB_0010c491;\n      goto LAB_0010bf0a;\n    }\n    goto LAB_0010c653;\n  }\n  __ptr = (byte **)malloc((long)pbVar17 << 5);\n  if (__ptr != (byte **)0x0) {\n    pbVar14 = *param_3;\n    __src = ppbVar2;\nLAB_0010c491:\n    memcpy(__ptr,__src,(long)pbVar14 << 5);\n    pbVar14 = *param_3;\nLAB_0010bf0a:\n    param_3[1] = (byte *)__ptr;\n    goto LAB_0010bf0e;\n  }\n  goto LAB_0010c44a;\ncode_r0x0010bc61:\n  switch(bVar12) {\n  case 0x25:\n    goto switchD_0010bc72_caseD_25;\n  default:\n    goto switchD_0010bc72_caseD_26;\n  case 0x41:\n  case 0x45:\n  case 0x46:\n  case 0x47:\n  case 0x61:\n  case 0x65:\n  case 0x66:\n  case 0x67:\n    iVar11 = 0xc;\n    if ((int)uVar5 < 0x10) {\n      iVar11 = ((uVar5 & 4) != 0) + 0xb;\n    }\n    break;\n  case 0x43:\n    iVar11 = 0xe;\n    bVar12 = 99;\n    break;\n  case 0x53:\n    iVar11 = 0x10;\n    bVar12 = 0x73;\n    break;\n  case 0x58:\n  case 0x6f:\n  case 0x75:\n  case 0x78:\n    iVar11 = 10;\n    if (((((int)uVar5 < 0x10) && ((uVar5 & 4) == 0)) && (iVar11 = 8, (int)uVar5 < 8)) &&\n       (iVar11 = 2, (uVar5 & 2) == 0)) {\n      iVar11 = (-(uint)((uVar5 & 1) == 0) & 2) + 4;\n    }\n    break;\n  case 99:\n    iVar11 = (7 < (int)uVar5) + 0xd;\n    break;\n  case 100:\n  case 0x69:\n    iVar11 = 9;\n    if ((((int)uVar5 < 0x10) && ((uVar5 & 4) == 0)) &&\n       ((iVar11 = 7, (int)uVar5 < 8 && (iVar11 = 1, (uVar5 & 2) == 0)))) {\n      iVar11 = (-(uint)((uVar5 & 1) == 0) & 2) + 3;\n    }\n    break;\n  case 0x6e:\n    iVar11 = 0x16;\n    if ((((int)uVar5 < 0x10) && ((uVar5 & 4) == 0)) &&\n       ((iVar11 = 0x15, (int)uVar5 < 8 && (iVar11 = 0x12, (uVar5 & 2) == 0)))) {\n      iVar11 = 0x14 - (uVar5 & 1);\n    }\n    break;\n  case 0x70:\n    iVar11 = 0x11;\n    break;\n  case 0x73:\n    iVar11 = (7 < (int)uVar5) + 0xf;\n  }\n  if (pbVar16 == (byte *)0xffffffffffffffff) {\n    ppbVar3[10] = local_60;\n    if (local_60 == (byte *)0xffffffffffffffff) {\nswitchD_0010bc72_caseD_26:\n      __ptr = (byte **)param_3[1];\n      goto LAB_0010bfe6;\n    }\n    __src = (byte **)param_3[1];\n    pbVar6 = local_60 + 1;\n    pbVar16 = local_60;\n  }\n  else {\n    ppbVar3[10] = pbVar16;\n    __src = (byte **)param_3[1];\n    pbVar6 = local_60;\n  }\n  local_60 = pbVar6;\n  __ptr = __src;\n  if (pbVar16 < pbVar17) {\nLAB_0010bcbb:\n    pbVar6 = *param_3;\n    if (pbVar6 <= pbVar16) {\n      do {\n        pbVar6 = pbVar6 + 1;\n        *(undefined4 *)(__ptr + (long)pbVar6 * 4 + -4) = 0;\n      } while (pbVar6 <= pbVar16);\n      *param_3 = pbVar6;\n    }\n    iVar4 = *(int *)(__ptr + (long)pbVar16 * 4);\n    if (iVar4 == 0) {\n      *(int *)(__ptr + (long)pbVar16 * 4) = iVar11;\n    }\n    else if (iVar4 != iVar11) {\nLAB_0010bfe6:\n      if (ppbVar2 != __ptr) {\n        free(__ptr);\n      }\n      if (puVar1 != (ulong *)param_2[1]) {\n        free((ulong *)param_2[1]);\n      }\n      piVar8 = __errno_location();\n      *piVar8 = 0x16;\n      return 0xffffffff;\n    }\nswitchD_0010bc72_caseD_25:\n    *(byte *)(ppbVar3 + 9) = bVar12;\n    uVar7 = *param_2;\n    ppbVar3[1] = param_1;\n    uVar7 = uVar7 + 1;\n    *param_2 = uVar7;\n    if (uVar7 < local_80) {\n      __dest = (ulong *)param_2[1];\n      goto LAB_0010babb;\n    }\n    if (((long)local_80 < 0) || (0x2e8ba2e8ba2e8ba < local_80 * 2)) {\nLAB_0010c64f:\n      __src = (byte **)param_3[1];\n      goto LAB_0010c653;\n    }\n    __ptr_00 = (ulong *)param_2[1];\n    if (puVar1 != __ptr_00) {\n      __dest = (ulong *)realloc(__ptr_00,local_80 * 0xb0);\n      if (__dest != (ulong *)0x0) {\n        __ptr_00 = (ulong *)param_2[1];\n        uVar7 = *param_2;\n        if (puVar1 != __ptr_00) goto LAB_0010bd88;\n        goto LAB_0010c31a;\n      }\n      goto LAB_0010c64f;\n    }\n    __dest = (ulong *)malloc(local_80 * 0xb0);\n    if (__dest != (ulong *)0x0) {\nLAB_0010c31a:\n      __dest = (ulong *)memcpy(__dest,__ptr_00,uVar7 * 0x58);\n      uVar7 = *param_2;\nLAB_0010bd88:\n      param_2[1] = (ulong)__dest;\n      local_80 = local_80 * 2;\n      goto LAB_0010babb;\n    }\n    __src = (byte **)param_3[1];\n    if (ppbVar2 == __src) goto LAB_0010c45a;\n  }\n  else {\n    pbVar17 = (byte *)((long)pbVar17 * 2);\n    if (pbVar17 <= pbVar16) {\n      pbVar17 = (byte *)xsum(pbVar16,1);\n    }\n    if (pbVar17 < (byte *)0x800000000000000) {\n      if (ppbVar2 == __src) {\n        __ptr = (byte **)malloc((long)pbVar17 << 5);\n        if (__ptr == (byte **)0x0) goto LAB_0010c44a;\nLAB_0010c2d1:\n        __ptr = (byte **)memcpy(__ptr,__src,(long)*param_3 << 5);\nLAB_0010c288:\n        param_3[1] = (byte *)__ptr;\n        goto LAB_0010bcbb;\n      }\n      __ptr = (byte **)realloc(__src,(long)pbVar17 << 5);\n      if (__ptr != (byte **)0x0) {\n        __src = ppbVar2;\n        if (ppbVar2 == (byte **)param_3[1]) goto LAB_0010c2d1;\n        goto LAB_0010c288;\n      }\n      goto LAB_0010c64f;\n    }\nLAB_0010c653:\n    if (ppbVar2 == __src) goto LAB_0010c44a;\n  }\n  free(__src);\nLAB_0010c44a:\n  if (puVar1 != (ulong *)param_2[1]) {\n    free((ulong *)param_2[1]);\n  }\nLAB_0010c45a:\n  piVar8 = __errno_location();\n  *piVar8 = 0xc;\n  return 0xffffffff;\n}\n\n", 
    "001049b0": "\nvoid display_speed(termios *param_1,char param_2)\n\n{\n  speed_t sVar1;\n  speed_t sVar2;\n  undefined8 uVar3;\n  undefined8 uVar4;\n  char *pcVar5;\n  \n  sVar1 = cfgetispeed(param_1);\n  if (sVar1 != 0) {\n    sVar1 = cfgetispeed(param_1);\n    sVar2 = cfgetospeed(param_1);\n    if (sVar1 != sVar2) {\n      sVar1 = cfgetospeed(param_1);\n      uVar3 = baud_to_value(sVar1);\n      sVar1 = cfgetispeed(param_1);\n      uVar4 = baud_to_value(sVar1);\n      pcVar5 = \"ispeed %lu baud; ospeed %lu baud;\";\n      if (param_2 == '\\0') {\n        pcVar5 = \"%lu %lu\\n\";\n      }\n      wrapf(pcVar5,uVar4,uVar3);\n      goto LAB_00104a07;\n    }\n  }\n  sVar1 = cfgetospeed(param_1);\n  uVar3 = baud_to_value(sVar1);\n  pcVar5 = \"speed %lu baud;\";\n  if (param_2 == '\\0') {\n    pcVar5 = \"%lu\\n\";\n  }\n  wrapf(pcVar5,uVar3);\nLAB_00104a07:\n  if (param_2 == '\\0') {\n    current_col = 0;\n  }\n  return;\n}\n\n", 
    "001037a0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint iswprint(wint_t __wc)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_iswprint_00114fb0)();\n  return iVar1;\n}\n\n", 
    "0010a5a0": "\nint rpl_fclose(FILE *param_1)\n\n{\n  int iVar1;\n  int iVar2;\n  int *piVar3;\n  __off_t _Var4;\n  \n  iVar1 = fileno(param_1);\n  if (-1 < iVar1) {\n    iVar1 = __freading();\n    if (iVar1 != 0) {\n      iVar1 = fileno(param_1);\n      _Var4 = lseek(iVar1,0,1);\n      if (_Var4 == -1) goto LAB_0010a60f;\n    }\n    iVar1 = rpl_fflush(param_1);\n    if (iVar1 != 0) {\n      piVar3 = __errno_location();\n      iVar1 = *piVar3;\n      iVar2 = fclose(param_1);\n      if (iVar1 != 0) {\n        *piVar3 = iVar1;\n        iVar2 = -1;\n      }\n      return iVar2;\n    }\n  }\nLAB_0010a60f:\n  iVar1 = fclose(param_1);\n  return iVar1;\n}\n\n", 
    "0010b7b0": "\nlong xsum(ulong param_1,ulong param_2)\n\n{\n  long lVar1;\n  \n  lVar1 = -1;\n  if (!CARRY8(param_1,param_2)) {\n    lVar1 = param_1 + param_2;\n  }\n  return lVar1;\n}\n\n", 
    "00106f30": "\nundefined8\nstrcaseeq3(long param_1,undefined8 param_2,byte param_3,char param_4,char param_5,char param_6,\n          char param_7)\n\n{\n  char cVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  \n  cVar1 = c_isupper((int)(char)param_3);\n  bVar2 = *(byte *)(param_1 + 3);\n  if (cVar1 != '\\0') {\n    bVar2 = bVar2 & 0xdf;\n  }\n  if (param_3 != bVar2) {\n    return 0;\n  }\n  if (param_3 == 0) {\n    return 1;\n  }\n  uVar3 = strcaseeq4(param_1,param_2,(int)param_4,(int)param_5,(int)param_6,(int)param_7);\n  return uVar3;\n}\n\n", 
    "001087b0": "\nundefined4 set_quoting_flags(undefined1 *param_1,undefined4 param_2)\n\n{\n  undefined4 uVar1;\n  \n  if (param_1 == (undefined1 *)0x0) {\n    param_1 = default_quoting_options;\n  }\n  uVar1 = *(undefined4 *)(param_1 + 4);\n  *(undefined4 *)(param_1 + 4) = param_2;\n  return uVar1;\n}\n\n", 
    "001053c0": "\nint strtoul_cc_t_constprop_0(char *param_1,char **param_2,undefined *param_3,char param_4)\n\n{\n  int *piVar1;\n  ulong uVar2;\n  int iVar3;\n  \n  piVar1 = __errno_location();\n  *piVar1 = 0;\n  uVar2 = strtoul(param_1,param_2,0x10);\n  iVar3 = *piVar1;\n  if ((((iVar3 == 0) && (**param_2 == param_4)) && (param_1 != *param_2)) &&\n     ((uVar2 & 0xffffffffffffff00) == 0)) {\n    *param_3 = (char)uVar2;\n  }\n  else {\n    iVar3 = -1;\n  }\n  return iVar3;\n}\n\n", 
    "00108cf0": "\nvoid quotearg_n_custom_mem\n               (undefined4 param_1,undefined8 param_2,undefined8 param_3,undefined8 param_4,\n               undefined8 param_5)\n\n{\n  long in_FS_OFFSET;\n  undefined8 local_68;\n  undefined8 uStack_60;\n  undefined8 local_58;\n  undefined8 uStack_50;\n  undefined8 local_48;\n  undefined8 uStack_40;\n  undefined8 local_38;\n  long local_30;\n  \n  local_30 = *(long *)(in_FS_OFFSET + 0x28);\n  local_68 = default_quoting_options._0_8_;\n  uStack_60 = default_quoting_options._8_8_;\n  local_38 = default_quoting_options._48_8_;\n  local_58 = default_quoting_options._16_8_;\n  uStack_50 = default_quoting_options._24_8_;\n  local_48 = default_quoting_options._32_8_;\n  uStack_40 = default_quoting_options._40_8_;\n  set_custom_quoting(&local_68);\n  quotearg_n_options(param_1,param_4,param_5,&local_68);\n  if (local_30 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "001052a0": "\nvoid display_recoverable_constprop_0(void)\n\n{\n  undefined uVar1;\n  undefined *puVar2;\n  \n  puVar2 = mode_7139 + 0x11;\n  __printf_chk(1,\"%lx:%lx:%lx:%lx\",mode_7139._0_4_,mode_7139._4_4_,mode_7139._8_4_,mode_7139._12_4_)\n  ;\n  do {\n    uVar1 = *puVar2;\n    puVar2 = puVar2 + 1;\n    __printf_chk(1,\":%lx\",uVar1);\n  } while (puVar2 != mode_7139 + 0x31);\n  putchar_unlocked(10);\n  return;\n}\n\n", 
    "001041b0": "\nlong mode_type_flag(undefined4 param_1,long param_2)\n\n{\n  switch(param_1) {\n  case 0:\n    return param_2 + 8;\n  case 1:\n    return param_2;\n  case 2:\n    return param_2 + 4;\n  case 3:\n    return param_2 + 0xc;\n  case 4:\n    return 0;\n  default:\n                    /* WARNING: Subroutine does not return */\n    abort();\n  }\n}\n\n", 
    "0010a510": "\nbool hard_locale(int param_1)\n\n{\n  byte *pbVar1;\n  long lVar2;\n  byte *pbVar3;\n  bool bVar4;\n  bool bVar5;\n  byte bVar6;\n  \n  bVar6 = 0;\n  pbVar1 = (byte *)setlocale(param_1,(char *)0x0);\n  bVar4 = true;\n  if (pbVar1 != (byte *)0x0) {\n    bVar4 = *pbVar1 < 0x43;\n    bVar5 = *pbVar1 == 0x43;\n    if (bVar5) {\n      bVar4 = false;\n      bVar5 = pbVar1[1] == 0;\n      if (bVar5) {\n        return false;\n      }\n    }\n    lVar2 = 6;\n    pbVar3 = (byte *)\"POSIX\";\n    do {\n      if (lVar2 == 0) break;\n      lVar2 = lVar2 + -1;\n      bVar4 = *pbVar1 < *pbVar3;\n      bVar5 = *pbVar1 == *pbVar3;\n      pbVar1 = pbVar1 + (ulong)bVar6 * -2 + 1;\n      pbVar3 = pbVar3 + (ulong)bVar6 * -2 + 1;\n    } while (bVar5);\n    bVar4 = (!bVar4 && !bVar5) != bVar4;\n  }\n  return bVar4;\n}\n\n", 
    "0010a630": "\nvoid clear_ungetc_buffer_preserving_position(uint *param_1)\n\n{\n  if ((*param_1 & 0x100) == 0) {\n    return;\n  }\n  rpl_fseeko(param_1,0,1);\n  return;\n}\n\n", 
    "00105430": "\nundefined8 recover_mode(long param_1,undefined8 *param_2)\n\n{\n  int iVar1;\n  undefined8 uVar2;\n  undefined8 *puVar3;\n  long lVar4;\n  long in_FS_OFFSET;\n  long local_50;\n  undefined8 local_48;\n  undefined8 local_40;\n  undefined8 local_38;\n  long local_30;\n  \n  local_30 = *(long *)(in_FS_OFFSET + 0x28);\n  puVar3 = &local_48;\n  do {\n    iVar1 = strtoul_tcflag_t_constprop_0(param_1,&local_50,puVar3);\n    if (iVar1 != 0) goto LAB_001054d2;\n    puVar3 = (undefined8 *)((long)puVar3 + 4);\n    param_1 = local_50 + 1;\n  } while (puVar3 != &local_38);\n  lVar4 = 0;\n  *param_2 = local_48;\n  param_2[1] = local_40;\n  do {\n    iVar1 = strtoul_cc_t_constprop_0(param_1,&local_50,(long)param_2 + lVar4 + 0x11,0x3a);\n    if (iVar1 != 0) goto LAB_001054d2;\n    lVar4 = lVar4 + 1;\n    param_1 = local_50 + 1;\n  } while (lVar4 != 0x1f);\n  iVar1 = strtoul_cc_t_constprop_0(param_1,&local_50,param_2 + 6,0);\n  if (iVar1 == 0) {\n    uVar2 = 1;\n  }\n  else {\nLAB_001054d2:\n    uVar2 = 0;\n  }\n  if (local_30 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return uVar2;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "00108c50": "\nvoid quotearg_n_style_colon(undefined4 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  undefined8 *puVar1;\n  long in_FS_OFFSET;\n  undefined8 local_98;\n  undefined8 uStack_90;\n  undefined8 local_88;\n  undefined8 uStack_80;\n  undefined8 local_78;\n  undefined8 uStack_70;\n  undefined8 local_68;\n  undefined8 local_58;\n  undefined8 uStack_50;\n  undefined8 local_48;\n  undefined8 uStack_40;\n  undefined8 local_38;\n  undefined8 uStack_30;\n  undefined8 local_28;\n  long local_20;\n  \n  local_20 = *(long *)(in_FS_OFFSET + 0x28);\n  quoting_options_from_style(&local_98);\n  puVar1 = &local_58;\n  local_58 = local_98;\n  uStack_50 = uStack_90;\n  local_48 = local_88;\n  uStack_40 = uStack_80;\n  local_38 = local_78;\n  uStack_30 = uStack_70;\n  local_28 = local_68;\n  set_char_quoting(puVar1,0x3a,1);\n  quotearg_n_options(param_1,param_3,0xffffffffffffffff,puVar1);\n  if (local_20 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "00104220": "\nvoid sane_mode(long param_1)\n\n{\n  byte bVar1;\n  undefined *puVar2;\n  uint *puVar3;\n  undefined uVar4;\n  long lVar5;\n  undefined4 *puVar6;\n  undefined1 *puVar7;\n  \n  uVar4 = 3;\n  lVar5 = 0;\n  puVar7 = &DAT_0010d014;\n  puVar2 = control_info + 0x20;\n  while (*(undefined *)(param_1 + 0x11 + lVar5) = uVar4, puVar7 != (undefined1 *)0x0) {\n    lVar5 = *(long *)(puVar2 + 8);\n    uVar4 = *puVar2;\n    puVar7 = *(undefined1 **)(puVar2 + 0x10);\n    puVar2 = puVar2 + 0x18;\n  }\n  bVar1 = 0;\n  puVar6 = (undefined4 *)(mode_info + 8);\n  do {\n    if ((bVar1 & 0x10) == 0) {\n      if ((bVar1 & 1) != 0) {\n        puVar3 = (uint *)mode_type_flag(*puVar6,param_1);\n        if (puVar3 == (uint *)0x0) {\n                    /* WARNING: Subroutine does not return */\n          __assert_fail(\"bitsp\",\"src/stty.c\",0x8cb,\"sane_mode\");\n        }\n        *puVar3 = ~puVar6[4] & *puVar3 | puVar6[2];\n        goto LAB_0010428b;\n      }\n      if ((bVar1 & 2) == 0) goto LAB_0010428b;\n      puVar3 = (uint *)mode_type_flag(*puVar6,param_1);\n      if (puVar3 == (uint *)0x0) {\n                    /* WARNING: Subroutine does not return */\n        __assert_fail(\"bitsp\",\"src/stty.c\",0x8d1,\"sane_mode\");\n      }\n      *puVar3 = *puVar3 & ~((uint)*(undefined8 *)(puVar6 + 2) | puVar6[4]);\n      lVar5 = *(long *)(puVar6 + 6);\n    }\n    else {\nLAB_0010428b:\n      lVar5 = *(long *)(puVar6 + 6);\n    }\n    if (lVar5 == 0) {\n      return;\n    }\n    bVar1 = *(byte *)(puVar6 + 9);\n    puVar6 = puVar6 + 8;\n  } while( true );\n}\n\n", 
    "00109c20": "\nuint bkm_scale_by_power(undefined8 param_1,uint param_2,int param_3)\n\n{\n  uint uVar1;\n  uint uVar2;\n  ulong uVar3;\n  \n  uVar3 = (ulong)param_2;\n  param_3 = param_3 + -1;\n  uVar2 = 0;\n  do {\n    uVar1 = bkm_scale(param_1,uVar3 & 0xffffffff);\n    param_3 = param_3 + -1;\n    uVar2 = uVar2 | uVar1;\n  } while (param_3 != -1);\n  return uVar2;\n}\n\n", 
    "00103490": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nspeed_t cfgetispeed(termios *__termios_p)\n\n{\n  speed_t sVar1;\n  \n  sVar1 = (*(code *)PTR_cfgetispeed_00114e28)();\n  return sVar1;\n}\n\n", 
    "00104c20": "\n/* WARNING: Could not reconcile some variable overlaps */\n\nvoid set_window_size(int param_1,int param_2,undefined8 param_3)\n\n{\n  int iVar1;\n  int *piVar2;\n  undefined8 uVar3;\n  long in_FS_OFFSET;\n  ulong local_38;\n  long local_30;\n  \n  local_30 = *(long *)(in_FS_OFFSET + 0x28);\n  iVar1 = get_win_size(0,&local_38);\n  if (iVar1 != 0) {\n    piVar2 = __errno_location();\n    if (*piVar2 != 0x16) {\n      uVar3 = quotearg_n_style_colon(0,3,param_3);\n                    /* WARNING: Subroutine does not return */\n      error(1,*piVar2,\"%s\",uVar3);\n    }\n    local_38 = 0;\n  }\n  if (-1 < param_1) {\n    local_38 = local_38 & 0xffffffffffff0000 | (ulong)(ushort)param_1;\n  }\n  if (-1 < param_2) {\n    local_38._0_4_ = CONCAT22((short)param_2,(undefined2)local_38);\n    local_38 = local_38 & 0xffffffff00000000 | (ulong)(uint)local_38;\n  }\n  iVar1 = ioctl(0,0x5414,&local_38);\n  if (iVar1 == 0) {\n    if (local_30 == *(long *)(in_FS_OFFSET + 0x28)) {\n      return;\n    }\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  uVar3 = quotearg_n_style_colon(0,3,param_3);\n  piVar2 = __errno_location();\n                    /* WARNING: Subroutine does not return */\n  error(1,*piVar2,\"%s\",uVar3);\n}\n\n", 
    "00109460": "\nvoid xmalloc(size_t param_1)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(param_1);\n  if ((pvVar1 == (void *)0x0) && (param_1 != 0)) {\n                    /* WARNING: Subroutine does not return */\n    xalloc_die();\n  }\n  return;\n}\n\n", 
    "00105500": "\nvoid emit_ancillary_info_constprop_0(void)\n\n{\n  int iVar1;\n  undefined8 uVar2;\n  char *pcVar3;\n  long lVar4;\n  undefined **ppuVar5;\n  byte *pbVar6;\n  byte *pbVar7;\n  undefined1 *puVar8;\n  long in_FS_OFFSET;\n  bool bVar9;\n  bool bVar10;\n  undefined *local_98;\n  char *local_90;\n  char *local_88;\n  char *local_80 [5];\n  char *local_58;\n  char *local_50;\n  char *local_48;\n  char *local_40;\n  undefined8 local_38;\n  undefined8 local_30;\n  long local_20;\n  \n  pbVar7 = (byte *)0x10d1c9;\n  local_20 = *(long *)(in_FS_OFFSET + 0x28);\n  local_80[3] = \"sha256sum\";\n  local_98 = &DAT_0010d14f;\n  local_90 = \"test invocation\";\n  local_80[0] = \"Multi-call invocation\";\n  local_80[1] = \"sha224sum\";\n  local_58 = \"sha384sum\";\n  local_48 = \"sha512sum\";\n  local_88 = \"coreutils\";\n  local_80[2] = \"sha2 utilities\";\n  local_80[4] = \"sha2 utilities\";\n  local_50 = \"sha2 utilities\";\n  local_40 = \"sha2 utilities\";\n  local_38 = 0;\n  local_30 = 0;\n  ppuVar5 = &local_98;\n  while( true ) {\n    bVar9 = false;\n    bVar10 = pbVar7 == (byte *)0x0;\n    if (bVar10) break;\n    lVar4 = 5;\n    pbVar6 = &DAT_0010d14a;\n    do {\n      if (lVar4 == 0) break;\n      lVar4 = lVar4 + -1;\n      bVar9 = *pbVar6 < *pbVar7;\n      bVar10 = *pbVar6 == *pbVar7;\n      pbVar6 = pbVar6 + 1;\n      pbVar7 = pbVar7 + 1;\n    } while (bVar10);\n    if ((!bVar9 && !bVar10) == bVar9) break;\n    pbVar7 = *(byte **)((long)ppuVar5 + 0x20);\n    ppuVar5 = (undefined **)((long)ppuVar5 + 0x10);\n  }\n  puVar8 = *(undefined1 **)((long)ppuVar5 + 0x18);\n  if (puVar8 == (undefined1 *)0x0) {\n    uVar2 = dcgettext(0,\"\\n%s online help: <%s>\\n\",5);\n    __printf_chk(1,uVar2,\"GNU coreutils\",\"https://www.gnu.org/software/coreutils/\");\n    pcVar3 = setlocale(5,(char *)0x0);\n    if (pcVar3 != (char *)0x0) {\n      iVar1 = strncmp(pcVar3,\"en_\",3);\n      if (iVar1 != 0) {\n        puVar8 = &DAT_0010d14a;\n        goto LAB_0010571e;\n      }\n    }\n    uVar2 = dcgettext(0,\"Full documentation at: <%s%s>\\n\",5);\n    puVar8 = &DAT_0010d14a;\n    __printf_chk(1,uVar2,\"https://www.gnu.org/software/coreutils/\",&DAT_0010d14a);\n    pcVar3 = \" invocation\";\n  }\n  else {\n    uVar2 = dcgettext(0,\"\\n%s online help: <%s>\\n\",5);\n    __printf_chk(1,uVar2,\"GNU coreutils\",\"https://www.gnu.org/software/coreutils/\");\n    pcVar3 = setlocale(5,(char *)0x0);\n    if (pcVar3 != (char *)0x0) {\n      iVar1 = strncmp(pcVar3,\"en_\",3);\n      if (iVar1 != 0) {\nLAB_0010571e:\n        uVar2 = dcgettext(0,\"Report %s translation bugs to <https://translationproject.org/team/>\\n\"\n                          ,5);\n        __printf_chk(1,uVar2,&DAT_0010d14a);\n      }\n    }\n    uVar2 = dcgettext(0,\"Full documentation at: <%s%s>\\n\",5);\n    pcVar3 = \" invocation\";\n    __printf_chk(1,uVar2,\"https://www.gnu.org/software/coreutils/\",&DAT_0010d14a);\n    if (puVar8 != &DAT_0010d14a) {\n      pcVar3 = \"\";\n    }\n  }\n  uVar2 = dcgettext(0,\"or available locally via: info \\'(coreutils) %s%s\\'\\n\",5);\n  if (local_20 == *(long *)(in_FS_OFFSET + 0x28)) {\n    __printf_chk(1,uVar2,puVar8,pcVar3);\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "00103440": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = (int *)(*(code *)PTR___errno_location_00114e00)();\n  return piVar1;\n}\n\n", 
    "00103ef0": "\nvoid __do_global_dtors_aux(void)\n\n{\n  if (completed_8061 == '\\0') {\n    if (PTR___cxa_finalize_00114fe0 != (undefined *)0x0) {\n      __cxa_finalize(__dso_handle);\n    }\n    deregister_tm_clones();\n    completed_8061 = 1;\n    return;\n  }\n  return;\n}\n\n", 
    "001095f0": "\nvoid xcalloc(size_t param_1,ulong param_2)\n\n{\n  void *pvVar1;\n  \n  if ((-1 < SUB168(ZEXT816(param_1) * ZEXT816(param_2),0)) &&\n     (SUB168(ZEXT816(param_1) * ZEXT816(param_2) >> 0x40,0) == 0)) {\n    pvVar1 = calloc(param_1,param_2);\n    if (pvVar1 != (void *)0x0) {\n      return;\n    }\n  }\n                    /* WARNING: Subroutine does not return */\n  xalloc_die();\n}\n\n", 
    "00103560": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = (char *)(*(code *)PTR_strrchr_00114e90)();\n  return pcVar1;\n}\n\n", 
    "0010b810": "\nulong xmax(ulong param_1,ulong param_2)\n\n{\n  if (param_2 <= param_1) {\n    param_2 = param_1;\n  }\n  return param_2;\n}\n\n", 
    "00103680": "\nvoid __freading(void)\n\n{\n  (*(code *)PTR___freading_00114f20)();\n  return;\n}\n\n", 
    "001069f0": "\nvoid close_stdout(void)\n\n{\n  int iVar1;\n  int *piVar2;\n  undefined8 uVar3;\n  undefined8 uVar4;\n  \n  iVar1 = close_stream(stdout);\n  if (iVar1 != 0) {\n    piVar2 = __errno_location();\n    if ((ignore_EPIPE == '\\0') || (*piVar2 != 0x20)) {\n      uVar3 = dcgettext(0,\"write error\",5);\n      if (file_name != 0) {\n        uVar4 = quotearg_colon();\n                    /* WARNING: Subroutine does not return */\n        error(0,*piVar2,\"%s: %s\",uVar4,uVar3);\n      }\n                    /* WARNING: Subroutine does not return */\n      error(0,*piVar2,\"%s\",uVar3);\n    }\n  }\n  iVar1 = close_stream(stderr);\n  if (iVar1 == 0) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  _exit(exit_failure);\n}\n\n", 
    "00108df0": "\nvoid quote_mem(undefined8 param_1,undefined8 param_2)\n\n{\n  quote_n_mem(0,param_1,param_2);\n  return;\n}\n\n", 
    "001034e0": "\nvoid dcgettext(void)\n\n{\n  (*(code *)PTR_dcgettext_00114e50)();\n  return;\n}\n\n", 
    "00116088": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nsize_t strlen(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strlen@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00116080": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nsize_t __ctype_get_mb_cur_max(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __ctype_get_mb_cur_max@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00103430": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid abort(void)\n\n{\n  (*(code *)PTR_abort_00114df8)();\n  return;\n}\n\n", 
    "00103550": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = (char *)(*(code *)PTR_strchr_00114e88)();\n  return pcVar1;\n}\n\n", 
    "0010b820": "\nundefined8 printf_fetchargs(uint *param_1,ulong *param_2)\n\n{\n  uint uVar1;\n  undefined4 *puVar2;\n  ulong uVar3;\n  unkbyte10 *pVar4;\n  undefined1 *puVar5;\n  char *pcVar6;\n  undefined8 *puVar7;\n  undefined4 *puVar8;\n  long *plVar9;\n  char **ppcVar10;\n  \n  puVar2 = (undefined4 *)param_2[1];\n  if (*param_2 != 0) {\n    uVar3 = 0;\n    do {\n      switch(*puVar2) {\n      default:\n        return 0xffffffff;\n      case 1:\n      case 2:\n        uVar1 = *param_1;\n        if (uVar1 < 0x30) {\n          puVar8 = (undefined4 *)((ulong)uVar1 + *(long *)(param_1 + 4));\n          *param_1 = uVar1 + 8;\n        }\n        else {\n          puVar8 = *(undefined4 **)(param_1 + 2);\n          *(undefined4 **)(param_1 + 2) = puVar8 + 2;\n        }\n        *(char *)(puVar2 + 4) = (char)*puVar8;\n        break;\n      case 3:\n      case 4:\n        uVar1 = *param_1;\n        if (uVar1 < 0x30) {\n          puVar8 = (undefined4 *)((ulong)uVar1 + *(long *)(param_1 + 4));\n          *param_1 = uVar1 + 8;\n        }\n        else {\n          puVar8 = *(undefined4 **)(param_1 + 2);\n          *(undefined4 **)(param_1 + 2) = puVar8 + 2;\n        }\n        *(short *)(puVar2 + 4) = (short)*puVar8;\n        break;\n      case 5:\n      case 6:\n      case 0xd:\n      case 0xe:\n        uVar1 = *param_1;\n        if (uVar1 < 0x30) {\n          puVar8 = (undefined4 *)((ulong)uVar1 + *(long *)(param_1 + 4));\n          *param_1 = uVar1 + 8;\n        }\n        else {\n          puVar8 = *(undefined4 **)(param_1 + 2);\n          *(undefined4 **)(param_1 + 2) = puVar8 + 2;\n        }\n        puVar2[4] = *puVar8;\n        break;\n      case 7:\n      case 8:\n      case 9:\n      case 10:\n      case 0x11:\n      case 0x12:\n      case 0x13:\n      case 0x14:\n      case 0x15:\n      case 0x16:\n        uVar1 = *param_1;\n        if (uVar1 < 0x30) {\n          puVar7 = (undefined8 *)((ulong)uVar1 + *(long *)(param_1 + 4));\n          *param_1 = uVar1 + 8;\n        }\n        else {\n          puVar7 = *(undefined8 **)(param_1 + 2);\n          *(undefined8 **)(param_1 + 2) = puVar7 + 1;\n        }\n        *(undefined8 *)(puVar2 + 4) = *puVar7;\n        break;\n      case 0xb:\n        uVar1 = param_1[1];\n        if (uVar1 < 0xb0) {\n          puVar7 = (undefined8 *)((ulong)uVar1 + *(long *)(param_1 + 4));\n          param_1[1] = uVar1 + 0x10;\n        }\n        else {\n          puVar7 = *(undefined8 **)(param_1 + 2);\n          *(undefined8 **)(param_1 + 2) = puVar7 + 1;\n        }\n        *(undefined8 *)(puVar2 + 4) = *puVar7;\n        break;\n      case 0xc:\n        pVar4 = (unkbyte10 *)(*(long *)(param_1 + 2) + 0xfU & 0xfffffffffffffff0);\n        *(long *)(param_1 + 2) = (long)pVar4 + 0x10;\n        *(unkbyte10 *)(puVar2 + 4) = *pVar4;\n        break;\n      case 0xf:\n        uVar1 = *param_1;\n        if (uVar1 < 0x30) {\n          ppcVar10 = (char **)((ulong)uVar1 + *(long *)(param_1 + 4));\n          *param_1 = uVar1 + 8;\n        }\n        else {\n          ppcVar10 = *(char ***)(param_1 + 2);\n          *(char ***)(param_1 + 2) = ppcVar10 + 1;\n        }\n        pcVar6 = *ppcVar10;\n        if (pcVar6 == (char *)0x0) {\n          pcVar6 = \"(NULL)\";\n        }\n        *(char **)(puVar2 + 4) = pcVar6;\n        break;\n      case 0x10:\n        uVar1 = *param_1;\n        if (uVar1 < 0x30) {\n          plVar9 = (long *)((ulong)uVar1 + *(long *)(param_1 + 4));\n          *param_1 = uVar1 + 8;\n        }\n        else {\n          plVar9 = *(long **)(param_1 + 2);\n          *(long **)(param_1 + 2) = plVar9 + 1;\n        }\n        puVar5 = (undefined1 *)*plVar9;\n        if (puVar5 == (undefined1 *)0x0) {\n          puVar5 = wide_null_string_2831;\n        }\n        *(undefined1 **)(puVar2 + 4) = puVar5;\n      }\n      uVar3 = uVar3 + 1;\n      puVar2 = puVar2 + 8;\n    } while (uVar3 <= *param_2 && *param_2 != uVar3);\n  }\n  return 0;\n}\n\n", 
    "00103670": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nchar * nl_langinfo(nl_item __item)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = (char *)(*(code *)PTR_nl_langinfo_00114f18)();\n  return pcVar1;\n}\n\n", 
    "00103790": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint mbsinit(mbstate_t *__ps)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_mbsinit_00114fa8)();\n  return iVar1;\n}\n\n", 
    "00108c30": "\nvoid quotearg_colon(undefined8 param_1)\n\n{\n  quotearg_char(param_1,0x3a);\n  return;\n}\n\n", 
    "00104e00": "\nvoid display_changed_constprop_0(void)\n\n{\n  byte bVar1;\n  int iVar2;\n  bool bVar3;\n  undefined8 uVar4;\n  uint *puVar5;\n  long lVar6;\n  byte *pbVar7;\n  int *piVar8;\n  byte *pbVar9;\n  byte *pbVar10;\n  byte *pbVar11;\n  int iVar12;\n  char *pcVar13;\n  bool bVar14;\n  bool bVar15;\n  bool bVar16;\n  byte bVar17;\n  \n  bVar17 = 0;\n  pbVar7 = control_info + 8;\n  display_speed(mode_7139,1);\n  wrapf(\"line = %d;\",mode_7139[16]);\n  putchar_unlocked(10);\n  bVar3 = true;\n  current_col = 0;\n  pbVar11 = &DAT_0010d0e1;\n  do {\n    bVar1 = mode_7139[*(long *)(pbVar7 + 8) + 0x11];\n    bVar14 = bVar1 < *pbVar7;\n    bVar16 = bVar1 == *pbVar7;\n    if (!bVar16) {\n      lVar6 = 6;\n      pbVar9 = pbVar11;\n      pbVar10 = (byte *)\"flush\";\n      do {\n        bVar15 = bVar14;\n        if (lVar6 == 0) break;\n        lVar6 = lVar6 + -1;\n        bVar14 = *pbVar9 < *pbVar10;\n        bVar16 = *pbVar9 == *pbVar10;\n        pbVar9 = pbVar9 + (ulong)bVar17 * -2 + 1;\n        pbVar10 = pbVar10 + (ulong)bVar17 * -2 + 1;\n        bVar15 = bVar14;\n      } while (bVar16);\n      bVar14 = false;\n      bVar16 = (!bVar15 && !bVar16) == bVar15;\n      if (!bVar16) {\n        uVar4 = visible(bVar1);\n        wrapf(\"%s = %s;\",pbVar11,uVar4);\n        bVar14 = false;\n        bVar3 = false;\n        bVar16 = true;\n      }\n    }\n    pbVar11 = *(byte **)(pbVar7 + 0x10);\n    lVar6 = 4;\n    pbVar9 = pbVar11;\n    pbVar10 = &DAT_0010d0d2;\n    do {\n      if (lVar6 == 0) break;\n      lVar6 = lVar6 + -1;\n      bVar14 = *pbVar9 < *pbVar10;\n      bVar16 = *pbVar9 == *pbVar10;\n      pbVar9 = pbVar9 + (ulong)bVar17 * -2 + 1;\n      pbVar10 = pbVar10 + (ulong)bVar17 * -2 + 1;\n    } while (bVar16);\n    pbVar7 = pbVar7 + 0x18;\n  } while ((!bVar14 && !bVar16) != bVar14);\n  if ((mode_7139[12] & 2) == 0) {\n    wrapf(\"min = %lu; time = %lu;\\n\",mode_7139[23],mode_7139[22]);\n  }\n  else if (!bVar3) {\n    putchar_unlocked(10);\n  }\n  bVar17 = 4;\n  bVar3 = true;\n  iVar12 = 0;\n  current_col = 0;\n  pcVar13 = \"parenb\";\n  piVar8 = (int *)(mode_info + 8);\n  do {\n    if ((bVar17 & 8) == 0) {\n      iVar2 = *piVar8;\n      if ((iVar2 != iVar12) && (iVar12 = iVar2, !bVar3)) {\n        bVar3 = true;\n        putchar_unlocked(10);\n        current_col = 0;\n      }\n      puVar5 = (uint *)mode_type_flag(iVar2,mode_7139);\n      lVar6 = *(long *)(piVar8 + 4);\n      if (lVar6 == 0) {\n        lVar6 = *(long *)(piVar8 + 2);\n      }\n      if (puVar5 == (uint *)0x0) {\n                    /* WARNING: Subroutine does not return */\n        __assert_fail(\"bitsp\",\"src/stty.c\",0x7a2,\"display_changed\");\n      }\n      if ((ulong)((uint)lVar6 & *puVar5) != *(ulong *)(piVar8 + 2)) {\n        if ((bVar17 & 5) == 5) {\n          bVar3 = false;\n          wrapf(&DAT_0010d11f,pcVar13);\n        }\n        goto LAB_00104f2d;\n      }\n      if ((bVar17 & 2) == 0) goto LAB_00104f2d;\n      wrapf(\"%s\",pcVar13);\n      pcVar13 = *(char **)(piVar8 + 6);\n      bVar3 = false;\n    }\n    else {\nLAB_00104f2d:\n      pcVar13 = *(char **)(piVar8 + 6);\n    }\n    if (pcVar13 == (char *)0x0) {\n      if (!bVar3) {\n        putchar_unlocked(10);\n      }\n      current_col = 0;\n      return;\n    }\n    bVar17 = *(byte *)(piVar8 + 9);\n    piVar8 = piVar8 + 8;\n  } while( true );\n}\n\n", 
    "001034d0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint cfsetospeed(termios *__termios_p,speed_t __speed)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_cfsetospeed_00114e48)();\n  return iVar1;\n}\n\n", 
    "00103f50": "\nundefined8 baud_to_value(int param_1)\n\n{\n  long *plVar1;\n  int iVar2;\n  int iVar3;\n  \n  iVar2 = 0;\n  iVar3 = 0;\n  plVar1 = (long *)(speeds + 0x18);\n  while( true ) {\n    if (iVar2 == param_1) {\n      return *(undefined8 *)(speeds + (long)iVar3 * 0x18 + 0x10);\n    }\n    iVar3 = iVar3 + 1;\n    if (*plVar1 == 0) break;\n    iVar2 = *(int *)(plVar1 + 1);\n    plVar1 = plVar1 + 3;\n  }\n  return 0;\n}\n\n", 
    "001069e0": "\nvoid close_stdout_set_ignore_EPIPE(undefined param_1)\n\n{\n  ignore_EPIPE = param_1;\n  return;\n}\n\n", 
    "00109680": "\nvoid xalloc_die(void)\n\n{\n  undefined8 uVar1;\n  \n  uVar1 = dcgettext(0,\"memory exhausted\",5);\n                    /* WARNING: Subroutine does not return */\n  error(exit_failure,0,\"%s\",uVar1);\n}\n\n", 
    "00116098": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid getopt_long(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getopt_long@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "001035f0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid * calloc(size_t __nmemb,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = (void *)(*(code *)PTR_calloc_00114ed8)();\n  return pvVar1;\n}\n\n", 
    "00109320": "\nvoid version_etc(void)\n\n{\n  long lVar1;\n  long in_FS_OFFSET;\n  \n  lVar1 = *(long *)(in_FS_OFFSET + 0x28);\n  version_etc_va();\n  if (lVar1 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "001071b0": "\nundefined8\nstrcaseeq0_constprop_0\n          (byte *param_1,undefined8 param_2,byte param_3,char param_4,char param_5,char param_6,\n          char param_7,char param_8,char param_9)\n\n{\n  char cVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  \n  cVar1 = c_isupper((int)(char)param_3);\n  bVar2 = *param_1;\n  if (cVar1 != '\\0') {\n    bVar2 = bVar2 & 0xdf;\n  }\n  uVar3 = 0;\n  if (bVar2 == param_3) {\n    uVar3 = strcaseeq1(param_1,param_2,(int)param_4,(int)param_5,(int)param_6,(int)param_7,\n                       (int)param_8,(int)param_9,0,0);\n  }\n  return uVar3;\n}\n\n", 
    "00116090": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid __stack_chk_fail(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __stack_chk_fail@@GLIBC_2.4 */\n  halt_baddata();\n}\n\n", 
    "00104310": "\nundefined4 set_mode(byte **param_1,undefined4 param_2,ulong *param_3)\n\n{\n  byte bVar1;\n  int iVar2;\n  uint *puVar3;\n  long lVar4;\n  char cVar5;\n  byte *pbVar6;\n  byte *pbVar7;\n  byte *__s1;\n  bool bVar8;\n  bool bVar9;\n  bool bVar10;\n  byte bVar11;\n  \n  bVar11 = 0;\n  cVar5 = (char)param_2;\n  if (cVar5 == '\\0') {\n    puVar3 = (uint *)mode_type_flag(*(undefined4 *)(param_1 + 1),param_3);\n    bVar8 = false;\n    bVar10 = puVar3 == (uint *)0x0;\n    if (!bVar10) {\n      *puVar3 = ~*(uint *)(param_1 + 3) & *puVar3 | *(uint *)(param_1 + 2);\n      return 1;\n    }\n    __s1 = *param_1;\n    lVar4 = 6;\n    pbVar6 = __s1;\n    pbVar7 = (byte *)\"evenp\";\n    do {\n      if (lVar4 == 0) break;\n      lVar4 = lVar4 + -1;\n      bVar8 = *pbVar6 < *pbVar7;\n      bVar10 = *pbVar6 == *pbVar7;\n      pbVar6 = pbVar6 + (ulong)bVar11 * -2 + 1;\n      pbVar7 = pbVar7 + (ulong)bVar11 * -2 + 1;\n    } while (bVar10);\n    bVar9 = false;\n    bVar8 = (!bVar8 && !bVar10) == bVar8;\n    if (bVar8) {\nLAB_00104450:\n      *(uint *)(param_3 + 1) = *(uint *)(param_3 + 1) & 0xfffffccf | 0x120;\n      return 1;\n    }\n    lVar4 = 7;\n    pbVar6 = __s1;\n    pbVar7 = (byte *)\"parity\";\n    do {\n      if (lVar4 == 0) break;\n      lVar4 = lVar4 + -1;\n      bVar9 = *pbVar6 < *pbVar7;\n      bVar8 = *pbVar6 == *pbVar7;\n      pbVar6 = pbVar6 + (ulong)bVar11 * -2 + 1;\n      pbVar7 = pbVar7 + (ulong)bVar11 * -2 + 1;\n    } while (bVar8);\n    bVar10 = false;\n    bVar8 = (!bVar9 && !bVar8) == bVar9;\n    if (bVar8) goto LAB_00104450;\n    lVar4 = 5;\n    pbVar6 = __s1;\n    pbVar7 = &DAT_0010d07c;\n    do {\n      if (lVar4 == 0) break;\n      lVar4 = lVar4 + -1;\n      bVar10 = *pbVar6 < *pbVar7;\n      bVar8 = *pbVar6 == *pbVar7;\n      pbVar6 = pbVar6 + (ulong)bVar11 * -2 + 1;\n      pbVar7 = pbVar7 + (ulong)bVar11 * -2 + 1;\n    } while (bVar8);\n    if ((!bVar10 && !bVar8) == bVar10) {\n      *(uint *)(param_3 + 1) = *(uint *)(param_3 + 1) & 0xfffffccf | 800;\n      return 1;\n    }\n  }\n  else {\n    if ((*(byte *)((long)param_1 + 0xc) & 4) == 0) {\n      return 0;\n    }\n    puVar3 = (uint *)mode_type_flag(*(undefined4 *)(param_1 + 1),param_3);\n    bVar8 = false;\n    bVar10 = puVar3 == (uint *)0x0;\n    if (!bVar10) {\n      *puVar3 = *puVar3 & ~((uint)param_1[2] | *(uint *)(param_1 + 3));\n      return param_2;\n    }\n    __s1 = *param_1;\n    lVar4 = 6;\n    pbVar6 = __s1;\n    pbVar7 = (byte *)\"evenp\";\n    do {\n      if (lVar4 == 0) break;\n      lVar4 = lVar4 + -1;\n      bVar8 = *pbVar6 < *pbVar7;\n      bVar10 = *pbVar6 == *pbVar7;\n      pbVar6 = pbVar6 + (ulong)bVar11 * -2 + 1;\n      pbVar7 = pbVar7 + (ulong)bVar11 * -2 + 1;\n    } while (bVar10);\n    bVar9 = false;\n    bVar8 = (!bVar8 && !bVar10) == bVar8;\n    if (bVar8) {\nLAB_001044ad:\n      *(uint *)(param_3 + 1) = *(uint *)(param_3 + 1) & 0xfffffecf | 0x30;\n      return param_2;\n    }\n    lVar4 = 7;\n    pbVar6 = __s1;\n    pbVar7 = (byte *)\"parity\";\n    do {\n      if (lVar4 == 0) break;\n      lVar4 = lVar4 + -1;\n      bVar9 = *pbVar6 < *pbVar7;\n      bVar8 = *pbVar6 == *pbVar7;\n      pbVar6 = pbVar6 + (ulong)bVar11 * -2 + 1;\n      pbVar7 = pbVar7 + (ulong)bVar11 * -2 + 1;\n    } while (bVar8);\n    if (((!bVar9 && !bVar8) == bVar9) || (iVar2 = strcmp((char *)__s1,\"oddp\"), iVar2 == 0))\n    goto LAB_001044ad;\n  }\n  bVar1 = *__s1;\n  if (((bVar1 == 0x6e) && (__s1[1] == 0x6c)) && (__s1[2] == 0)) {\n    if (cVar5 != '\\0') {\n      *(uint *)param_3 = *(uint *)param_3 & 0xfffffe3f | 0x100;\n      *(uint *)((long)param_3 + 4) = *(uint *)((long)param_3 + 4) & 0xffffffd3 | 4;\n      return param_2;\n    }\n    *param_3 = *param_3 & 0xfffffffbfffffeff;\n    return 1;\n  }\n  bVar8 = bVar1 < 0x65;\n  bVar10 = bVar1 == 0x65;\n  if (bVar10) {\n    bVar8 = __s1[1] < 0x6b;\n    bVar10 = __s1[1] == 0x6b;\n    if (bVar10) {\n      bVar8 = false;\n      bVar10 = __s1[2] == 0;\n      if (bVar10) {\n        *(undefined2 *)((long)param_3 + 0x13) = 0x157f;\n        return 1;\n      }\n    }\n  }\n  lVar4 = 5;\n  pbVar6 = __s1;\n  pbVar7 = &DAT_0010d02a;\n  do {\n    if (lVar4 == 0) break;\n    lVar4 = lVar4 + -1;\n    bVar8 = *pbVar6 < *pbVar7;\n    bVar10 = *pbVar6 == *pbVar7;\n    pbVar6 = pbVar6 + (ulong)bVar11 * -2 + 1;\n    pbVar7 = pbVar7 + (ulong)bVar11 * -2 + 1;\n  } while (bVar10);\n  bVar9 = false;\n  bVar8 = (!bVar8 && !bVar10) == bVar8;\n  if (bVar8) {\n    sane_mode(param_3);\n    return 1;\n  }\n  lVar4 = 7;\n  pbVar6 = __s1;\n  pbVar7 = (byte *)\"cbreak\";\n  do {\n    if (lVar4 == 0) break;\n    lVar4 = lVar4 + -1;\n    bVar9 = *pbVar6 < *pbVar7;\n    bVar8 = *pbVar6 == *pbVar7;\n    pbVar6 = pbVar6 + (ulong)bVar11 * -2 + 1;\n    pbVar7 = pbVar7 + (ulong)bVar11 * -2 + 1;\n  } while (bVar8);\n  bVar10 = false;\n  bVar8 = (!bVar9 && !bVar8) == bVar9;\n  if (bVar8) {\n    if (cVar5 != '\\0') {\n      *(uint *)((long)param_3 + 0xc) = *(uint *)((long)param_3 + 0xc) | 2;\n      return param_2;\n    }\n    *(uint *)((long)param_3 + 0xc) = *(uint *)((long)param_3 + 0xc) & 0xfffffffd;\n    return 1;\n  }\n  lVar4 = 6;\n  pbVar6 = __s1;\n  pbVar7 = (byte *)\"pass8\";\n  do {\n    if (lVar4 == 0) break;\n    lVar4 = lVar4 + -1;\n    bVar10 = *pbVar6 < *pbVar7;\n    bVar8 = *pbVar6 == *pbVar7;\n    pbVar6 = pbVar6 + (ulong)bVar11 * -2 + 1;\n    pbVar7 = pbVar7 + (ulong)bVar11 * -2 + 1;\n  } while (bVar8);\n  bVar9 = false;\n  bVar8 = (!bVar10 && !bVar8) == bVar10;\n  if (bVar8) {\n    if (cVar5 != '\\0') {\n      *(uint *)(param_3 + 1) = *(uint *)(param_3 + 1) & 0xfffffecf | 0x120;\n      *(uint *)param_3 = *(uint *)param_3 | 0x20;\n      return param_2;\n    }\n    *(uint *)(param_3 + 1) = *(uint *)(param_3 + 1) & 0xfffffecf | 0x30;\n    *(uint *)param_3 = *(uint *)param_3 & 0xffffffdf;\n    return 1;\n  }\n  lVar4 = 7;\n  pbVar6 = __s1;\n  pbVar7 = (byte *)\"litout\";\n  do {\n    if (lVar4 == 0) break;\n    lVar4 = lVar4 + -1;\n    bVar9 = *pbVar6 < *pbVar7;\n    bVar8 = *pbVar6 == *pbVar7;\n    pbVar6 = pbVar6 + (ulong)bVar11 * -2 + 1;\n    pbVar7 = pbVar7 + (ulong)bVar11 * -2 + 1;\n  } while (bVar8);\n  if ((!bVar9 && !bVar8) == bVar9) {\n    if (cVar5 != '\\0') {\n      *param_3 = *param_3 | 0x100000020;\n      *(uint *)(param_3 + 1) = *(uint *)(param_3 + 1) & 0xfffffecf | 0x120;\n      return param_2;\n    }\n    *param_3 = *param_3 & 0xfffffffeffffffdf;\n    *(uint *)(param_3 + 1) = *(uint *)(param_3 + 1) & 0xfffffecf | 0x30;\n    return 1;\n  }\n  iVar2 = strcmp((char *)__s1,\"raw\");\n  if ((iVar2 != 0) && (iVar2 = strcmp((char *)__s1,\"cooked\"), iVar2 != 0)) {\n    iVar2 = strcmp((char *)__s1,\"decctlq\");\n    if (iVar2 == 0) {\n      if (cVar5 != '\\0') {\n        *(uint *)param_3 = *(uint *)param_3 | 0x800;\n        return param_2;\n      }\n      *(uint *)param_3 = *(uint *)param_3 & 0xfffff7ff;\n      return 1;\n    }\n    iVar2 = strcmp((char *)__s1,\"tabs\");\n    if (iVar2 == 0) {\n      if (cVar5 != '\\0') {\n        *(uint *)((long)param_3 + 4) = *(uint *)((long)param_3 + 4) | 0x1800;\n        return param_2;\n      }\n      *(uint *)((long)param_3 + 4) = *(uint *)((long)param_3 + 4) & 0xffffe7ff;\n      return 1;\n    }\n    iVar2 = strcmp((char *)__s1,\"lcase\");\n    if ((iVar2 != 0) && (iVar2 = strcmp((char *)__s1,\"LCASE\"), iVar2 != 0)) {\n      iVar2 = strcmp((char *)__s1,\"crt\");\n      if (iVar2 == 0) {\n        *(uint *)((long)param_3 + 0xc) = *(uint *)((long)param_3 + 0xc) | 0xa10;\n        return 1;\n      }\n      iVar2 = strcmp((char *)__s1,\"dec\");\n      if (iVar2 != 0) {\n        return 1;\n      }\n      *(uint *)((long)param_3 + 0xc) = *(uint *)((long)param_3 + 0xc) | 0xa10;\n      *(uint *)param_3 = *(uint *)param_3 & 0xfffff7ff;\n      *(undefined *)((long)param_3 + 0x11) = 3;\n      *(undefined2 *)((long)param_3 + 0x13) = 0x157f;\n      return 1;\n    }\n    if (cVar5 != '\\0') {\n      *param_3 = *param_3 & 0xfffffffdfffffdff;\n      *(uint *)((long)param_3 + 0xc) = *(uint *)((long)param_3 + 0xc) & 0xfffffffb;\n      return param_2;\n    }\n    *param_3 = *param_3 | 0x200000200;\n    *(uint *)((long)param_3 + 0xc) = *(uint *)((long)param_3 + 0xc) | 4;\n    return 1;\n  }\n  if (*__s1 == 0x72) {\n    if (cVar5 != '\\0') goto LAB_0010471b;\n  }\n  else if ((*__s1 == 99) && (cVar5 == '\\0')) {\nLAB_0010471b:\n    *(uint *)((long)param_3 + 0xc) = *(uint *)((long)param_3 + 0xc) | 3;\n    *param_3 = *param_3 | 0x100000526;\n    return 1;\n  }\n  *(uint *)((long)param_3 + 4) = *(uint *)((long)param_3 + 4) & 0xfffffffe;\n  *(uint *)((long)param_3 + 0xc) = *(uint *)((long)param_3 + 0xc) & 0xfffffff8;\n  *(uint *)param_3 = 0;\n  *(undefined2 *)((long)param_3 + 0x16) = 0x100;\n  return 1;\n}\n\n", 
    "00103580": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\n\n{\n  (*(code *)PTR___assert_fail_00114ea0)();\n  return;\n}\n\n", 
    "00103460": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid _exit(int __status)\n\n{\n  (*(code *)PTR__exit_00114e10)();\n  return;\n}\n\n", 
    "001095d0": "\nvoid xzalloc(size_t param_1)\n\n{\n  void *__s;\n  \n  __s = (void *)xmalloc();\n  memset(__s,0,param_1);\n  return;\n}\n\n", 
    "001094b0": "\nvoid xcharalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n", 
    "00107260": "\nchar * gettext_quote(char *param_1,int param_2)\n\n{\n  int iVar1;\n  char *pcVar2;\n  undefined8 uVar3;\n  \n  pcVar2 = (char *)dcgettext(0,param_1,5);\n  if (param_1 == pcVar2) {\n    uVar3 = locale_charset();\n    iVar1 = strcaseeq0_constprop_0(uVar3,\"UTF-8\",0x55,0x54,0x46,0x2d,0x38,0,0);\n    if (iVar1 == 0) {\n      iVar1 = strcaseeq0_constprop_0(uVar3,\"GB18030\",0x47,0x42,0x31,0x38,0x30,0x33,0x30);\n      if (iVar1 == 0) {\n        pcVar2 = \"\\\"\";\n        if (param_2 != 9) {\n          pcVar2 = \"\\'\";\n        }\n        return pcVar2;\n      }\n      if (*pcVar2 == '`') {\n        pcVar2 = &DAT_0010f821;\n      }\n      else {\n        pcVar2 = &DAT_0010f81e;\n      }\n    }\n    else if (*pcVar2 == '`') {\n      pcVar2 = &DAT_0010f825;\n    }\n    else {\n      pcVar2 = &DAT_0010f81a;\n    }\n  }\n  return pcVar2;\n}\n\n", 
    "00105080": "\nvoid display_all_constprop_0(undefined8 param_1)\n\n{\n  undefined8 uVar1;\n  uint *puVar2;\n  long lVar3;\n  int *piVar4;\n  byte *pbVar5;\n  byte *pbVar6;\n  byte *pbVar7;\n  long *plVar8;\n  char *pcVar9;\n  int iVar10;\n  int iVar11;\n  undefined uVar12;\n  undefined uVar13;\n  undefined uVar14;\n  byte bVar15;\n  \n  bVar15 = 0;\n  plVar8 = (long *)(control_info + 0x10);\n  display_speed(mode_7139,1);\n  display_window_size(1,param_1);\n  uVar12 = 0;\n  uVar14 = 1;\n  wrapf(\"line = %d;\",mode_7139[16]);\n  putchar_unlocked(10);\n  pbVar7 = &DAT_0010d0e1;\n  current_col = 0;\n  do {\n    lVar3 = 6;\n    pbVar5 = pbVar7;\n    pbVar6 = (byte *)\"flush\";\n    do {\n      if (lVar3 == 0) break;\n      lVar3 = lVar3 + -1;\n      uVar12 = *pbVar5 < *pbVar6;\n      uVar14 = *pbVar5 == *pbVar6;\n      pbVar5 = pbVar5 + (ulong)bVar15 * -2 + 1;\n      pbVar6 = pbVar6 + (ulong)bVar15 * -2 + 1;\n    } while ((bool)uVar14);\n    uVar13 = 0;\n    uVar14 = (!(bool)uVar12 && !(bool)uVar14) == (bool)uVar12;\n    if (!(bool)uVar14) {\n      uVar1 = visible(mode_7139[*plVar8 + 0x11]);\n      uVar13 = 0;\n      uVar14 = 1;\n      wrapf(\"%s = %s;\",pbVar7,uVar1);\n    }\n    pbVar7 = (byte *)plVar8[1];\n    lVar3 = 4;\n    pbVar5 = pbVar7;\n    pbVar6 = &DAT_0010d0d2;\n    do {\n      if (lVar3 == 0) break;\n      lVar3 = lVar3 + -1;\n      uVar13 = *pbVar5 < *pbVar6;\n      uVar14 = *pbVar5 == *pbVar6;\n      pbVar5 = pbVar5 + (ulong)bVar15 * -2 + 1;\n      pbVar6 = pbVar6 + (ulong)bVar15 * -2 + 1;\n    } while ((bool)uVar14);\n    plVar8 = plVar8 + 3;\n    uVar12 = 0;\n    uVar14 = (!(bool)uVar13 && !(bool)uVar14) == (bool)uVar13;\n  } while (!(bool)uVar14);\n  wrapf(\"min = %lu; time = %lu;\",mode_7139[23],mode_7139[22]);\n  if (current_col != 0) {\n    putchar_unlocked(10);\n  }\n  bVar15 = 4;\n  current_col = 0;\n  pcVar9 = \"parenb\";\n  iVar11 = 0;\n  piVar4 = (int *)(mode_info + 8);\n  do {\n    iVar10 = iVar11;\n    if ((bVar15 & 8) == 0) {\n      iVar10 = *piVar4;\n      if (iVar10 != iVar11) {\n        putchar_unlocked(10);\n        current_col = 0;\n      }\n      puVar2 = (uint *)mode_type_flag(iVar10,mode_7139);\n      lVar3 = *(long *)(piVar4 + 4);\n      if (lVar3 == 0) {\n        lVar3 = *(long *)(piVar4 + 2);\n      }\n      if (puVar2 == (uint *)0x0) {\n                    /* WARNING: Subroutine does not return */\n        __assert_fail(\"bitsp\",\"src/stty.c\",0x7f6,\"display_all\");\n      }\n      if ((ulong)((uint)lVar3 & *puVar2) == *(ulong *)(piVar4 + 2)) {\n        wrapf(\"%s\",pcVar9);\n        goto LAB_001051b0;\n      }\n      if ((bVar15 & 4) == 0) goto LAB_001051b0;\n      wrapf(&DAT_0010d11f,pcVar9);\n      pcVar9 = *(char **)(piVar4 + 6);\n      iVar11 = iVar10;\n    }\n    else {\nLAB_001051b0:\n      pcVar9 = *(char **)(piVar4 + 6);\n      iVar11 = iVar10;\n    }\n    if (pcVar9 == (char *)0x0) {\n      putchar_unlocked(10);\n      current_col = 0;\n      return;\n    }\n    bVar15 = *(byte *)(piVar4 + 9);\n    piVar4 = piVar4 + 8;\n  } while( true );\n}\n\n", 
    "00104d10": "\nvoid set_control_char_isra_0(byte *param_1,long *param_2,byte *param_3,long param_4)\n\n{\n  byte bVar1;\n  byte bVar2;\n  byte bVar3;\n  undefined uVar4;\n  long lVar5;\n  byte *pbVar6;\n  byte *pbVar7;\n  bool bVar8;\n  bool bVar9;\n  bool bVar10;\n  \n  lVar5 = 4;\n  bVar8 = &stack0xfffffffffffffff0 < (undefined *)0x8;\n  bVar10 = &stack0x00000000 == (undefined *)0x18;\n  pbVar6 = param_1;\n  pbVar7 = &DAT_0010d0d2;\n  do {\n    if (lVar5 == 0) break;\n    lVar5 = lVar5 + -1;\n    bVar8 = *pbVar6 < *pbVar7;\n    bVar10 = *pbVar6 == *pbVar7;\n    pbVar6 = pbVar6 + 1;\n    pbVar7 = pbVar7 + 1;\n  } while (bVar10);\n  bVar9 = false;\n  bVar8 = (!bVar8 && !bVar10) == bVar8;\n  if (!bVar8) {\n    lVar5 = 5;\n    pbVar6 = &DAT_0010d0d6;\n    do {\n      if (lVar5 == 0) break;\n      lVar5 = lVar5 + -1;\n      bVar9 = *param_1 < *pbVar6;\n      bVar8 = *param_1 == *pbVar6;\n      param_1 = param_1 + 1;\n      pbVar6 = pbVar6 + 1;\n    } while (bVar8);\n    if ((!bVar9 && !bVar8) != bVar9) {\n      bVar1 = *param_3;\n      if (bVar1 == 0) {\nLAB_00104de0:\n        uVar4 = to_uchar((int)(char)bVar1);\n        *(undefined *)(param_4 + 0x11 + *param_2) = uVar4;\n        return;\n      }\n      bVar2 = param_3[1];\n      if (bVar2 == 0) goto LAB_00104de0;\n      bVar8 = *param_3 < 0x5e;\n      bVar10 = *param_3 == 0x5e;\n      if (bVar10) {\n        bVar8 = param_3[1] < 0x2d;\n        bVar10 = param_3[1] == 0x2d;\n        if (bVar10) {\n          bVar3 = 0;\n          bVar8 = false;\n          bVar10 = param_3[2] == 0;\n          if (bVar10) goto LAB_00104d64;\n        }\n      }\n      lVar5 = 6;\n      pbVar6 = param_3;\n      pbVar7 = (byte *)\"undef\";\n      do {\n        if (lVar5 == 0) break;\n        lVar5 = lVar5 + -1;\n        bVar8 = *pbVar6 < *pbVar7;\n        bVar10 = *pbVar6 == *pbVar7;\n        pbVar6 = pbVar6 + 1;\n        pbVar7 = pbVar7 + 1;\n      } while (bVar10);\n      bVar3 = 0;\n      if ((!bVar8 && !bVar10) == bVar8) goto LAB_00104d64;\n      if (bVar1 == 0x5e) {\n        bVar3 = 0x7f;\n        if (bVar2 != 0x3f) {\n          bVar3 = to_uchar((int)(char)bVar2);\n          bVar3 = bVar3 & 0x9f;\n        }\n        goto LAB_00104d64;\n      }\n    }\n  }\n  bVar3 = integer_arg(param_3,0xff);\nLAB_00104d64:\n  *(byte *)(param_4 + 0x11 + *param_2) = bVar3;\n  return;\n}\n\n", 
    "00116068": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid bindtextdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* bindtextdomain@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00109fe0": "\n/* WARNING: Restarted to delay deadcode elimination for space: stack */\n\nint rpl_fcntl(ulong param_1,int param_2,ulong param_3)\n\n{\n  long lVar1;\n  int iVar2;\n  uint uVar3;\n  int iVar4;\n  int *piVar5;\n  int __fd;\n  long in_FS_OFFSET;\n  \n  lVar1 = *(long *)(in_FS_OFFSET + 0x28);\n  if (param_2 != 0x406) {\n    iVar2 = fcntl((int)param_1,param_2,param_3);\n    goto LAB_0010a064;\n  }\n  if (have_dupfd_cloexec_3397 < 0) {\n    iVar2 = rpl_fcntl(param_1,0,param_3 & 0xffffffff);\n    if ((iVar2 < 0) || (__fd = iVar2, have_dupfd_cloexec_3397 != -1)) goto LAB_0010a064;\nLAB_0010a0a1:\n    uVar3 = fcntl(__fd,1);\n    if (-1 < (int)uVar3) {\n      iVar4 = fcntl(__fd,2,(ulong)(uVar3 | 1));\n      iVar2 = __fd;\n      if (iVar4 != -1) goto LAB_0010a064;\n    }\n    piVar5 = __errno_location();\n    iVar2 = -1;\n    iVar4 = *piVar5;\n    close(__fd);\n    *piVar5 = iVar4;\n  }\n  else {\n    iVar2 = fcntl((int)param_1,0x406);\n    if (iVar2 < 0) {\n      piVar5 = __errno_location();\n      if (*piVar5 == 0x16) {\n        iVar2 = rpl_fcntl(param_1 & 0xffffffff,0,param_3 & 0xffffffff);\n        if (iVar2 < 0) goto LAB_0010a064;\n        have_dupfd_cloexec_3397 = -1;\n        __fd = iVar2;\n        goto LAB_0010a0a1;\n      }\n    }\n    have_dupfd_cloexec_3397 = 1;\n  }\nLAB_0010a064:\n  if (lVar1 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return iVar2;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "00116188": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint tcgetattr(int __fd,termios *__termios_p)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* tcgetattr@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00109530": "\nvoid x2nrealloc(long param_1,ulong *param_2,ulong param_3)\n\n{\n  undefined auVar1 [16];\n  ulong uVar2;\n  ulong uVar3;\n  \n  uVar3 = *param_2;\n  if (param_1 == 0) {\n    if (uVar3 == 0) {\n      uVar3 = (ulong)(0x80 < param_3) +\n              SUB168((ZEXT816(0) << 0x40 | ZEXT816(0x80)) / ZEXT816(param_3),0);\n    }\n    uVar2 = (ulong)(SUB168(ZEXT816(uVar3) * ZEXT816(param_3) >> 0x40,0) != 0);\n    if ((SUB168(ZEXT816(uVar3) * ZEXT816(param_3),0) < 0) || (uVar2 != 0)) goto LAB_0010958b;\n  }\n  else {\n    auVar1 = ZEXT816(0) << 0x40 | ZEXT816(0x5555555555555554);\n    uVar2 = SUB168(auVar1 % ZEXT816(param_3),0);\n    if (SUB168(auVar1 / ZEXT816(param_3),0) <= uVar3) {\nLAB_0010958b:\n                    /* WARNING: Subroutine does not return */\n      xalloc_die(param_1,uVar3,uVar2);\n    }\n    uVar3 = (uVar3 >> 1) + 1 + uVar3;\n  }\n  *param_2 = uVar3;\n  xrealloc(param_1,uVar3 * param_3);\n  return;\n}\n\n", 
    "00116060": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint fclose(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fclose@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "001070c0": "\nundefined8\nstrcaseeq1(long param_1,undefined8 param_2,byte param_3,char param_4,char param_5,char param_6,\n          char param_7)\n\n{\n  char cVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  \n  cVar1 = c_isupper((int)(char)param_3);\n  bVar2 = *(byte *)(param_1 + 1);\n  if (cVar1 != '\\0') {\n    bVar2 = bVar2 & 0xdf;\n  }\n  if (param_3 != bVar2) {\n    return 0;\n  }\n  if (param_3 == 0) {\n    return 1;\n  }\n  uVar3 = strcaseeq2(param_1,param_2,(int)param_4,(int)param_5,(int)param_6,(int)param_7);\n  return uVar3;\n}\n\n", 
    "00116180": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid error(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* error@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00103690": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid * realloc(void *__ptr,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = (void *)(*(code *)PTR_realloc_00114f28)();\n  return pvVar1;\n}\n\n", 
    "00103450": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint strncmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_strncmp_00114e08)();\n  return iVar1;\n}\n\n", 
    "0010a710": "\n/* WARNING: Could not reconcile some variable overlaps */\n\nvoid * vasnprintf(void *param_1,int **param_2,void *param_3,undefined8 param_4)\n\n{\n  uint *puVar1;\n  unkbyte10 Var2;\n  uint uVar3;\n  long lVar4;\n  int iVar5;\n  ulong uVar6;\n  int *__n;\n  void *pvVar7;\n  size_t sVar8;\n  int *piVar9;\n  undefined8 uVar10;\n  ulong uVar11;\n  void *pvVar12;\n  int *piVar13;\n  ulong uVar14;\n  undefined *puVar15;\n  undefined *puVar17;\n  undefined *puVar18;\n  int *piVar19;\n  void **ppvVar20;\n  long in_FS_OFFSET;\n  bool bVar21;\n  undefined auStack_428 [8];\n  ulong local_420;\n  undefined *local_418;\n  int **local_410;\n  long local_408;\n  void *local_400;\n  int *local_3f8;\n  undefined *local_3f0;\n  int local_3e8;\n  uint local_3e4;\n  int *local_3e0;\n  int *local_3d8;\n  int *local_3d0;\n  int local_3c4;\n  uint local_3c0 [2];\n  undefined local_3b8 [8];\n  int *local_3b0;\n  int local_3a8 [56];\n  long local_2c8;\n  void **local_2c0;\n  undefined8 local_2b8;\n  undefined8 local_2b0;\n  void *local_2a8 [77];\n  long local_40;\n  undefined *puVar16;\n  \n  puVar16 = auStack_428;\n  puVar15 = auStack_428;\n  puVar17 = auStack_428;\n  puVar18 = auStack_428;\n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  local_410 = param_2;\n  local_400 = param_1;\n  iVar5 = printf_parse(param_3,&local_2c8,local_3b8);\n  if (iVar5 < 0) {\n    pvVar7 = (void *)0x0;\n    goto LAB_0010af43;\n  }\n  iVar5 = printf_fetchargs(param_4,local_3b8);\n  if (iVar5 < 0) {\n    if (local_2c0 != local_2a8) {\n      free(local_2c0);\n    }\n    if (local_3b0 != local_3a8) {\n      free(local_3b0);\n    }\n    piVar19 = __errno_location();\n    pvVar7 = (void *)0x0;\n    *piVar19 = 0x16;\n    puVar18 = auStack_428;\n    goto LAB_0010af43;\n  }\n  uVar6 = xsum4(7,local_2b8,local_2b0,6);\n  if (uVar6 < 4000) {\n    puVar18 = auStack_428;\n    while (puVar16 != auStack_428 + -(uVar6 + 0x17 & 0xfffffffffffff000)) {\n      puVar15 = puVar18 + -0x1000;\n      *(undefined8 *)(puVar18 + -8) = *(undefined8 *)(puVar18 + -8);\n      puVar16 = puVar18 + -0x1000;\n      puVar18 = puVar18 + -0x1000;\n    }\n    uVar6 = (ulong)((uint)(uVar6 + 0x17) & 0xff0);\n    lVar4 = -uVar6;\n    puVar18 = puVar15 + lVar4;\n    if (uVar6 != 0) {\n      *(undefined8 *)(puVar15 + -8) = *(undefined8 *)(puVar15 + -8);\n    }\n    local_418 = (undefined *)0x0;\n    local_3f0 = (undefined *)((ulong)(puVar15 + lVar4 + 0xf) & 0xfffffffffffffff0);\nLAB_0010a7d1:\n    piVar19 = (int *)0x0;\n    if (local_400 != (void *)0x0) {\n      piVar19 = *local_410;\n    }\n    __n = (int *)0x0;\n    local_408 = 0;\n    pvVar7 = *local_2c0;\n    ppvVar20 = local_2c0;\n    pvVar12 = local_400;\n    if (pvVar7 == param_3) goto LAB_0010a8c6;\n    do {\n      local_3d0 = __n;\n      local_3d8 = (int *)((long)pvVar7 - (long)param_3);\n      *(undefined8 *)(puVar18 + -8) = 0x10a82c;\n      __n = (int *)xsum(__n,(int *)((long)pvVar7 - (long)param_3));\n      piVar9 = local_3d8;\n      piVar13 = local_3d0;\n      pvVar7 = pvVar12;\n      if (__n <= piVar19) goto LAB_0010a8b7;\n      if (piVar19 != (int *)0x0) {\n        if (-1 < (long)piVar19) {\n          piVar19 = (int *)((long)piVar19 * 2);\n          goto LAB_0010a855;\n        }\ncode_r0x0010b324:\n        *(undefined8 *)(puVar18 + -8) = 0x10b329;\n        local_3e0 = __errno_location();\n        if (pvVar12 == local_400) goto LAB_0010adc9;\nLAB_0010adbc:\n        if (pvVar12 == (void *)0x0) goto LAB_0010adc9;\n        goto LAB_0010adc1;\n      }\n      piVar19 = (int *)0xc;\nLAB_0010a855:\n      if (piVar19 < __n) {\n        piVar19 = __n;\n      }\n      if (piVar19 == (int *)0xffffffffffffffff) goto code_r0x0010b324;\n      if ((pvVar12 == (void *)0x0) || (pvVar12 == local_400)) {\n        local_3e0 = local_3d0;\n        local_3d8 = (int *)((ulong)local_3d8 & 0xffffffffffffff00 | (ulong)(pvVar12 == local_400));\n        local_3d0 = piVar9;\n        *(undefined8 *)(puVar18 + -8) = 0x10b29c;\n        pvVar7 = malloc((size_t)piVar19);\n        piVar13 = local_3e0;\n        if (pvVar7 == (void *)0x0) goto code_r0x0010b324;\n        piVar9 = local_3d0;\n        if ((local_3e0 != (int *)0x0) && ((char)local_3d8 != '\\0')) {\n          local_3d8 = local_3d0;\n          local_3d0 = local_3e0;\n          *(undefined8 *)(puVar18 + -8) = 0x10b2e6;\n          pvVar7 = memcpy(pvVar7,pvVar12,(size_t)piVar13);\n          piVar9 = local_3d8;\n          piVar13 = local_3d0;\n        }\n      }\n      else {\n        local_3d8 = local_3d0;\n        local_3d0 = piVar9;\n        *(undefined8 *)(puVar18 + -8) = 0x10a89d;\n        pvVar7 = realloc(pvVar12,(size_t)piVar19);\n        piVar9 = local_3d0;\n        piVar13 = local_3d8;\n        if (pvVar7 == (void *)0x0) goto LAB_0010b79c;\n      }\nLAB_0010a8b7:\n      *(undefined8 *)(puVar18 + -8) = 0x10a8c6;\n      memcpy((void *)((long)pvVar7 + (long)piVar13),param_3,(size_t)piVar9);\n      pvVar12 = pvVar7;\nLAB_0010a8c6:\n      do {\n        if (local_2c8 == local_408) {\n          *(undefined8 *)(puVar18 + -8) = 0x10b679;\n          piVar9 = (int *)xsum(__n,1);\n          pvVar7 = pvVar12;\n          if (piVar19 < piVar9) {\n            if (piVar19 == (int *)0x0) {\n              piVar13 = (int *)0xc;\n            }\n            else {\n              piVar13 = (int *)((long)piVar19 * 2);\n              if ((long)piVar19 < 0) goto code_r0x0010b324;\n            }\n            piVar19 = piVar13;\n            if (piVar13 <= piVar9) {\n              piVar19 = piVar9;\n            }\n            if (piVar19 == (int *)0xffffffffffffffff) goto code_r0x0010b324;\n            bVar21 = pvVar12 == local_400;\n            if ((pvVar12 == (void *)0x0) || (bVar21)) {\n              *(undefined8 *)(puVar18 + -8) = 0x10b764;\n              pvVar7 = malloc((size_t)piVar19);\n              if (pvVar7 == (void *)0x0) goto code_r0x0010b324;\n              if ((__n != (int *)0x0) && (bVar21)) {\n                *(undefined8 *)(puVar18 + -8) = 0x10b787;\n                pvVar7 = memcpy(pvVar7,pvVar12,(size_t)__n);\n              }\n            }\n            else {\n              *(undefined8 *)(puVar18 + -8) = 0x10b6cb;\n              pvVar7 = realloc(pvVar12,(size_t)piVar19);\n              if (pvVar7 == (void *)0x0) goto LAB_0010b79c;\n            }\n          }\n          *(undefined *)((long)pvVar7 + (long)__n) = 0;\n          if ((pvVar7 != local_400) && ((int *)((long)__n + 1) < piVar19)) {\n            *(undefined8 *)(puVar18 + -8) = 0x10b753;\n            pvVar12 = realloc(pvVar7,(size_t)(int *)((long)__n + 1));\n            if (pvVar12 != (void *)0x0) {\n              pvVar7 = pvVar12;\n            }\n          }\n          puVar15 = local_418;\n          if (local_418 != (undefined *)0x0) {\n            *(undefined8 *)(puVar18 + -8) = 0x10b702;\n            free(puVar15);\n          }\n          if (local_2c0 != local_2a8) {\n            *(undefined8 *)(puVar18 + -8) = 0x10b71a;\n            free(local_2c0);\n          }\n          if (local_3b0 != local_3a8) {\n            *(undefined8 *)(puVar18 + -8) = 0x10b732;\n            free(local_3b0);\n          }\n          *local_410 = __n;\n          goto LAB_0010af43;\n        }\n        pvVar7 = ppvVar20[10];\n        if (*(char *)(ppvVar20 + 9) == '%') {\n          if (pvVar7 != (void *)0xffffffffffffffff) goto LAB_001037e3;\n          *(undefined8 *)(puVar18 + -8) = 0x10b1d7;\n          piVar9 = (int *)xsum(__n,1);\n          pvVar7 = pvVar12;\n          if (piVar19 < piVar9) {\n            if (piVar19 == (int *)0x0) {\n              piVar19 = (int *)0xc;\n            }\n            else {\n              if ((long)piVar19 < 0) goto code_r0x0010b324;\n              piVar19 = (int *)((long)piVar19 * 2);\n            }\n            if (piVar19 < piVar9) {\n              piVar19 = piVar9;\n            }\n            if (piVar19 == (int *)0xffffffffffffffff) goto code_r0x0010b324;\n            bVar21 = pvVar12 == local_400;\n            local_3d0 = piVar9;\n            if ((pvVar12 == (void *)0x0) || (bVar21)) {\n              *(undefined8 *)(puVar18 + -8) = 0x10b5b8;\n              pvVar7 = malloc((size_t)piVar19);\n              if (pvVar7 == (void *)0x0) goto code_r0x0010b324;\n              piVar9 = local_3d0;\n              if ((__n != (int *)0x0) && (bVar21)) {\n                *(undefined8 *)(puVar18 + -8) = 0x10b5f1;\n                pvVar7 = memcpy(pvVar7,pvVar12,(size_t)__n);\n                piVar9 = local_3d0;\n              }\n            }\n            else {\n              *(undefined8 *)(puVar18 + -8) = 0x10b22f;\n              pvVar7 = realloc(pvVar12,(size_t)piVar19);\n              piVar9 = local_3d0;\n              if (pvVar7 == (void *)0x0) goto LAB_0010b79c;\n            }\n          }\n          pvVar12 = pvVar7;\n          *(undefined *)((long)pvVar12 + (long)__n) = 0x25;\n          __n = piVar9;\n        }\n        else {\n          if (pvVar7 == (void *)0xffffffffffffffff) {\nLAB_001037e3:\n                    /* WARNING: Subroutine does not return */\n            *(undefined **)(puVar18 + -8) = &UNK_001037e8;\n            abort();\n          }\n          puVar1 = (uint *)(local_3b0 + (long)pvVar7 * 8);\n          local_3d0 = (int *)((ulong)local_3d0 & 0xffffffff00000000 | (ulong)*puVar1);\n          if (*(char *)(ppvVar20 + 9) == 'n') {\n            switch(*puVar1) {\n            case 0x12:\n              **(undefined **)(puVar1 + 4) = (char)__n;\n              break;\n            case 0x13:\n              **(undefined2 **)(puVar1 + 4) = (short)__n;\n              break;\n            case 0x14:\n              **(undefined4 **)(puVar1 + 4) = (int)__n;\n              break;\n            case 0x15:\n            case 0x16:\n              **(int ***)(puVar1 + 4) = __n;\n              break;\n            default:\nvasnprintf_cold:\n                    /* WARNING: Subroutine does not return */\n              *(undefined8 *)(puVar18 + -8) = 0x1037e3;\n              abort();\n            }\n          }\n          else {\n            uVar3 = *(uint *)(ppvVar20 + 2);\n            *local_3f0 = 0x25;\n            if ((uVar3 & 1) == 0) {\n              local_3d8 = (int *)(local_3f0 + 1);\n            }\n            else {\n              local_3f0[1] = 0x27;\n              local_3d8 = (int *)(local_3f0 + 2);\n            }\n            if ((uVar3 & 2) != 0) {\n              *(undefined *)local_3d8 = 0x2d;\n              local_3d8 = (int *)((long)local_3d8 + 1);\n            }\n            if ((uVar3 & 4) != 0) {\n              *(undefined *)local_3d8 = 0x2b;\n              local_3d8 = (int *)((long)local_3d8 + 1);\n            }\n            if ((uVar3 & 8) != 0) {\n              *(undefined *)local_3d8 = 0x20;\n              local_3d8 = (int *)((long)local_3d8 + 1);\n            }\n            if ((uVar3 & 0x10) != 0) {\n              *(undefined *)local_3d8 = 0x23;\n              local_3d8 = (int *)((long)local_3d8 + 1);\n            }\n            if ((uVar3 & 0x40) != 0) {\n              *(undefined *)local_3d8 = 0x49;\n              local_3d8 = (int *)((long)local_3d8 + 1);\n            }\n            if ((uVar3 & 0x20) != 0) {\n              *(undefined *)local_3d8 = 0x30;\n              local_3d8 = (int *)((long)local_3d8 + 1);\n            }\n            piVar9 = local_3d8;\n            pvVar7 = ppvVar20[3];\n            piVar13 = local_3b0;\n            if (pvVar7 != ppvVar20[4]) {\n              sVar8 = (long)ppvVar20[4] - (long)pvVar7;\n              local_3e0 = local_3b0;\n              *(undefined8 *)(puVar18 + -8) = 0x10a9f6;\n              memcpy(piVar9,pvVar7,sVar8);\n              local_3d8 = (int *)((long)local_3d8 + sVar8);\n              piVar13 = local_3e0;\n            }\n            piVar9 = local_3d8;\n            pvVar7 = ppvVar20[6];\n            if (pvVar7 != ppvVar20[7]) {\n              sVar8 = (long)ppvVar20[7] - (long)pvVar7;\n              local_3e0 = piVar13;\n              *(undefined8 *)(puVar18 + -8) = 0x10aa2d;\n              memcpy(piVar9,pvVar7,sVar8);\n              local_3d8 = (int *)((long)local_3d8 + sVar8);\n              piVar13 = local_3e0;\n            }\n            switch(local_3d0._0_4_) {\n            case 9:\n            case 10:\n              *(undefined *)local_3d8 = 0x6c;\n              local_3d8 = (int *)((long)local_3d8 + 1);\n            case 7:\n            case 8:\n            case 0xe:\n            case 0x10:\n              *(undefined *)local_3d8 = 0x6c;\n              local_3d8 = (int *)((long)local_3d8 + 1);\n              break;\n            case 0xc:\n              *(undefined *)local_3d8 = 0x4c;\n              local_3d8 = (int *)((long)local_3d8 + 1);\n            }\n            *(undefined *)local_3d8 = *(undefined *)(ppvVar20 + 9);\n            *(undefined *)((long)local_3d8 + 1) = 0;\n            if (ppvVar20[5] == (void *)0xffffffffffffffff) {\n              local_3e4 = 0;\n            }\n            else {\n              if (piVar13[(long)ppvVar20[5] * 8] != 5) goto LAB_001037e3;\n              local_3e4 = 1;\n              local_3c0[0] = (piVar13 + (long)ppvVar20[5] * 8)[4];\n            }\n            if (ppvVar20[8] != (void *)0xffffffffffffffff) {\n              if (piVar13[(long)ppvVar20[8] * 8] != 5) goto LAB_001037e3;\n              local_3c0[local_3e4] = (piVar13 + (long)ppvVar20[8] * 8)[4];\n              local_3e4 = local_3e4 + 1;\n            }\n            *(undefined8 *)(puVar18 + -8) = 0x10ab77;\n            piVar9 = (int *)xsum(__n,2);\n            pvVar7 = pvVar12;\n            if (piVar19 < piVar9) {\n              if (piVar19 == (int *)0x0) {\n                piVar19 = (int *)0xc;\n              }\n              else {\n                if ((long)piVar19 < 0) goto code_r0x0010b324;\n                piVar19 = (int *)((long)piVar19 * 2);\n              }\n              if (piVar19 <= piVar9) {\n                piVar19 = piVar9;\n              }\n              if (piVar19 == (int *)0xffffffffffffffff) goto code_r0x0010b324;\n              if ((pvVar12 == (void *)0x0) || (pvVar12 == local_400)) {\n                local_3e0 = (int *)((ulong)local_3e0 & 0xffffffffffffff00 |\n                                   (ulong)(pvVar12 == local_400));\n                *(undefined8 *)(puVar18 + -8) = 0x10b56e;\n                pvVar7 = malloc((size_t)piVar19);\n                if (pvVar7 == (void *)0x0) goto code_r0x0010b324;\n                if ((__n != (int *)0x0) && ((char)local_3e0 != '\\0')) {\n                  *(undefined8 *)(puVar18 + -8) = 0x10b5a0;\n                  pvVar7 = memcpy(pvVar7,pvVar12,(size_t)__n);\n                }\n              }\n              else {\n                *(undefined8 *)(puVar18 + -8) = 0x10abc5;\n                pvVar7 = realloc(pvVar12,(size_t)piVar19);\n                if (pvVar7 == (void *)0x0) goto code_r0x0010b324;\n              }\n            }\n            *(undefined *)((long)pvVar7 + (long)__n) = 0;\n            *(undefined8 *)(puVar18 + -8) = 0x10abdb;\n            local_3e0 = __errno_location();\n            local_3e8 = *local_3e0;\n            local_3f8 = &local_3c4;\nLAB_0010ac04:\n            pvVar12 = pvVar7;\n            puVar15 = local_3f0;\n            piVar9 = local_3f8;\n            local_3c4 = -1;\n            uVar14 = (long)piVar19 - (long)__n;\n            uVar6 = 0x7fffffff;\n            if (uVar14 < 0x80000000) {\n              uVar6 = uVar14;\n            }\n            *local_3e0 = 0;\n            switch((ulong)local_3d0 & 0xffffffff) {\n            default:\n              goto vasnprintf_cold;\n            case 1:\n              uVar11 = (ulong)(uint)(int)*(char *)(local_3b0 + (long)ppvVar20[10] * 8 + 4);\n              break;\n            case 2:\n              uVar11 = (ulong)*(byte *)(local_3b0 + (long)ppvVar20[10] * 8 + 4);\n              break;\n            case 3:\n              uVar11 = (ulong)(uint)(int)*(short *)(local_3b0 + (long)ppvVar20[10] * 8 + 4);\n              break;\n            case 4:\n              uVar11 = (ulong)*(ushort *)(local_3b0 + (long)ppvVar20[10] * 8 + 4);\n              break;\n            case 5:\n            case 6:\n            case 0xd:\n            case 0xe:\n              uVar11 = (ulong)(uint)local_3b0[(long)ppvVar20[10] * 8 + 4];\n              break;\n            case 7:\n            case 8:\n            case 9:\n            case 10:\n            case 0xf:\n            case 0x10:\n            case 0x11:\n              piVar9 = *(int **)(local_3b0 + (long)ppvVar20[10] * 8 + 4);\n              if (local_3e4 == 1) {\n                *(int **)(puVar18 + -8) = local_3f8;\n                *(int **)(puVar18 + -0x10) = piVar9;\n                goto LAB_0010b058;\n              }\n              if (local_3e4 != 2) {\n                *(int **)(puVar18 + -0x10) = local_3f8;\nLAB_0010acba:\n                puVar15 = local_3f0;\n                local_420 = uVar6;\n                *(undefined8 *)(puVar18 + -0x18) = 0x10acdb;\n                iVar5 = __snprintf_chk((long)pvVar12 + (long)__n,uVar6,1,0xffffffffffffffff,puVar15,\n                                       piVar9);\n                goto joined_r0x0010acec;\n              }\n              *(int **)(puVar18 + -0x10) = local_3f8;\n              *(int **)(puVar18 + -0x18) = piVar9;\n              goto LAB_0010b0a4;\n            case 0xb:\n              uVar10 = *(undefined8 *)(local_3b0 + (long)ppvVar20[10] * 8 + 4);\n              if (local_3e4 == 1) {\n                *(int **)(puVar18 + -0x10) = local_3f8;\n              }\n              else {\n                if (local_3e4 != 2) {\n                  local_420 = uVar6;\n                  *(undefined8 *)(puVar18 + -8) = 0x10b014;\n                  iVar5 = __snprintf_chk(uVar10,(long)pvVar12 + (long)__n,uVar6,1,0xffffffffffffffff\n                                         ,puVar15,piVar9);\n                  goto joined_r0x0010acec;\n                }\n                uVar11 = (ulong)local_3c0[1];\n                *(int **)(puVar18 + -8) = local_3f8;\n                *(ulong *)(puVar18 + -0x10) = uVar11;\n              }\n              uVar3 = local_3c0[0];\n              puVar15 = local_3f0;\n              local_420 = uVar6;\n              *(undefined8 *)(puVar18 + -0x18) = 0x10b418;\n              iVar5 = __snprintf_chk(uVar10,(long)pvVar12 + (long)__n,uVar6,1,0xffffffffffffffff,\n                                     puVar15,uVar3);\n              goto joined_r0x0010acec;\n            case 0xc:\n              Var2 = *(unkbyte10 *)(local_3b0 + (long)ppvVar20[10] * 8 + 4);\n              if (local_3e4 != 1) {\n                if (local_3e4 != 2) {\n                  *(unkbyte10 *)(puVar18 + -0x10) = Var2;\n                  goto LAB_0010acba;\n                }\n                *(int **)(puVar18 + -0x10) = local_3f8;\n                uVar3 = local_3c0[0];\n                puVar15 = local_3f0;\n                uVar11 = (ulong)local_3c0[1];\n                local_420 = uVar6;\n                *(unkbyte10 *)(puVar18 + -0x20) = Var2;\n                *(ulong *)(puVar18 + -0x30) = uVar11;\n                *(undefined8 *)(puVar18 + -0x38) = 0x10b3b1;\n                iVar5 = __snprintf_chk((long)pvVar12 + (long)__n,uVar6,1,0xffffffffffffffff,puVar15,\n                                       uVar3);\n                goto joined_r0x0010acec;\n              }\n              *(int **)(puVar18 + -0x10) = local_3f8;\n              *(unkbyte10 *)(puVar18 + -0x20) = Var2;\n              goto LAB_0010b0ab;\n            }\n            if (local_3e4 == 1) {\n              *(int **)(puVar18 + -8) = local_3f8;\n              *(ulong *)(puVar18 + -0x10) = uVar11;\nLAB_0010b058:\n              uVar11 = (ulong)local_3c0[0];\nLAB_0010ae62:\n              puVar15 = local_3f0;\n              local_420 = uVar6;\n              *(undefined8 *)(puVar18 + -0x18) = 0x10ae83;\n              iVar5 = __snprintf_chk((long)pvVar12 + (long)__n,uVar6,1,0xffffffffffffffff,puVar15,\n                                     uVar11);\n            }\n            else {\n              if (local_3e4 != 2) {\n                *(int **)(puVar18 + -0x10) = local_3f8;\n                goto LAB_0010ae62;\n              }\n              *(int **)(puVar18 + -0x10) = local_3f8;\n              *(ulong *)(puVar18 + -0x18) = uVar11;\nLAB_0010b0a4:\n              *(ulong *)(puVar18 + -0x20) = (ulong)local_3c0[1];\nLAB_0010b0ab:\n              uVar3 = local_3c0[0];\n              puVar15 = local_3f0;\n              local_420 = uVar6;\n              *(undefined8 *)(puVar18 + -0x28) = 0x10b0d3;\n              iVar5 = __snprintf_chk((long)pvVar12 + (long)__n,uVar6,1,0xffffffffffffffff,puVar15,\n                                     uVar3);\n            }\njoined_r0x0010acec:\n            pvVar7 = pvVar12;\n            if (local_3c4 < 0) {\n              if (*(char *)((long)local_3d8 + 1) == '\\0') {\n                if (-1 < iVar5) goto LAB_0010ad0c;\n                iVar5 = *local_3e0;\n                if ((iVar5 == 0) && (iVar5 = 0x54, (*(byte *)(ppvVar20 + 9) & 0xef) != 99)) {\n                  iVar5 = 0x16;\n                }\n                if ((pvVar12 != local_400) && (pvVar12 != (void *)0x0)) {\n                  *(undefined8 *)(puVar18 + -8) = 0x10aef3;\n                  free(pvVar12);\n                }\n                puVar15 = local_418;\n                if (local_418 != (undefined *)0x0) {\n                  *(undefined8 *)(puVar18 + -8) = 0x10af07;\n                  free(puVar15);\n                }\n                if (local_2c0 != local_2a8) {\n                  *(undefined8 *)(puVar18 + -8) = 0x10af1f;\n                  free(local_2c0);\n                }\n                if (local_3b0 != local_3a8) {\n                  *(undefined8 *)(puVar18 + -8) = 0x10af37;\n                  free(local_3b0);\n                }\n                pvVar7 = (void *)0x0;\n                *local_3e0 = iVar5;\n                goto LAB_0010af43;\n              }\n              *(undefined *)((long)local_3d8 + 1) = 0;\n              goto LAB_0010ac04;\n            }\n            if (((ulong)(long)local_3c4 < local_420) &&\n               (*(char *)((long)local_3c4 + (long)pvVar12 + (long)__n) != '\\0')) goto LAB_001037e3;\n            if (local_3c4 < iVar5) {\nLAB_0010ad0c:\n              local_3c4 = iVar5;\n            }\n            if (local_420 <= local_3c4 + 1) {\n              if (0x7ffffffe < uVar14) {\n                if ((pvVar12 != local_400) && (pvVar12 != (void *)0x0)) {\n                  *(undefined8 *)(puVar18 + -8) = 0x10b506;\n                  free(pvVar12);\n                }\n                puVar15 = local_418;\n                if (local_418 != (undefined *)0x0) {\n                  *(undefined8 *)(puVar18 + -8) = 0x10b51a;\n                  free(puVar15);\n                }\n                if (local_2c0 != local_2a8) {\n                  *(undefined8 *)(puVar18 + -8) = 0x10b532;\n                  free(local_2c0);\n                }\n                if (local_3b0 != local_3a8) {\n                  *(undefined8 *)(puVar18 + -8) = 0x10b54a;\n                  free(local_3b0);\n                }\n                pvVar7 = (void *)0x0;\n                *local_3e0 = 0x4b;\n                goto LAB_0010af43;\n              }\n              iVar5 = local_3c4 + 2;\n              piVar9 = (int *)((long)piVar19 * 2);\n              if ((long)piVar19 < 0) {\n                piVar9 = (int *)0xffffffffffffffff;\n              }\n              *(undefined8 *)(puVar18 + -8) = 0x10ad4a;\n              uVar10 = xsum(__n,iVar5);\n              *(undefined8 *)(puVar18 + -8) = 0x10ad55;\n              piVar13 = (int *)xmax(uVar10,piVar9);\n              if (piVar19 < piVar13) {\n                if (piVar19 == (int *)0x0) {\n                  piVar9 = (int *)0xc;\n                }\n                piVar19 = piVar13;\n                if (piVar13 <= piVar9) {\n                  piVar19 = piVar9;\n                }\n                if (piVar19 != (int *)0xffffffffffffffff) {\n                  bVar21 = pvVar12 == local_400;\n                  if ((pvVar12 == (void *)0x0) || (bVar21)) {\n                    *(undefined8 *)(puVar18 + -8) = 0x10b150;\n                    pvVar7 = malloc((size_t)piVar19);\n                    if (pvVar7 != (void *)0x0) {\n                      if ((__n != (int *)0x0) && (bVar21)) {\n                        *(undefined8 *)(puVar18 + -8) = 0x10b173;\n                        pvVar7 = memcpy(pvVar7,pvVar12,(size_t)__n);\n                      }\n                      goto LAB_0010ac04;\n                    }\n                  }\n                  else {\n                    *(undefined8 *)(puVar18 + -8) = 0x10ada0;\n                    pvVar7 = realloc(pvVar12,(size_t)piVar19);\n                    if (pvVar7 != (void *)0x0) goto LAB_0010ac04;\n                  }\n                }\n                if (pvVar12 == local_400) goto LAB_0010adc9;\n                goto LAB_0010adbc;\n              }\n              goto LAB_0010ac04;\n            }\n            __n = (int *)((long)local_3c4 + (long)__n);\n            *local_3e0 = local_3e8;\n          }\n        }\n        param_3 = ppvVar20[1];\n        pvVar7 = ppvVar20[0xb];\n        ppvVar20 = ppvVar20 + 0xb;\n        local_408 = local_408 + 1;\n      } while (pvVar7 == param_3);\n    } while( true );\n  }\n  if (uVar6 != 0xffffffffffffffff) {\n    local_3f0 = (undefined *)malloc(uVar6);\n    if (local_3f0 != (undefined *)0x0) {\n      local_418 = local_3f0;\n      puVar18 = auStack_428;\n      goto LAB_0010a7d1;\n    }\n  }\n  local_3e0 = __errno_location();\n  goto LAB_0010addd;\nLAB_0010b79c:\n  *(undefined8 *)(puVar18 + -8) = 0x10b7a1;\n  local_3e0 = __errno_location();\nLAB_0010adc1:\n  *(undefined8 *)(puVar18 + -8) = 0x10adc9;\n  free(pvVar12);\nLAB_0010adc9:\n  puVar15 = local_418;\n  puVar17 = puVar18;\n  if (local_418 != (undefined *)0x0) {\n    *(undefined8 *)(puVar18 + -8) = 0x10addd;\n    free(puVar15);\n  }\nLAB_0010addd:\n  if (local_2c0 != local_2a8) {\n    *(undefined8 *)(puVar17 + -8) = 0x10adf5;\n    free(local_2c0);\n  }\n  if (local_3b0 != local_3a8) {\n    *(undefined8 *)(puVar17 + -8) = 0x10ae0d;\n    free(local_3b0);\n  }\n  pvVar7 = (void *)0x0;\n  *local_3e0 = 0xc;\n  puVar18 = puVar17;\nLAB_0010af43:\n  if (local_40 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    *(undefined8 *)(puVar18 + -8) = 0x10b79c;\n    __stack_chk_fail();\n  }\n  return pvVar7;\n}\n\n", 
    "00103570": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = (*(code *)PTR_lseek_00114e98)();\n  return _Var1;\n}\n\n", 
    "001094c0": "\nvoid * xrealloc(void *param_1,size_t param_2)\n\n{\n  void *pvVar1;\n  \n  if ((param_2 == 0) && (param_1 != (void *)0x0)) {\n    free(param_1);\n    return (void *)0x0;\n  }\n  pvVar1 = realloc(param_1,param_2);\n  if ((pvVar1 == (void *)0x0) && (param_2 != 0)) {\n                    /* WARNING: Subroutine does not return */\n    xalloc_die();\n  }\n  return pvVar1;\n}\n\n", 
    "00108c10": "\nvoid quotearg_char(undefined8 param_1,char param_2)\n\n{\n  quotearg_char_mem(param_1,0xffffffffffffffff,(int)param_2);\n  return;\n}\n\n", 
    "00103e50": "\nvoid _start(undefined8 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  undefined8 unaff_retaddr;\n  undefined auStack_8 [8];\n  \n  (*(code *)PTR___libc_start_main_00114fc8)\n            (main,unaff_retaddr,&stack0x00000008,__libc_csu_init,__libc_csu_fini,param_3,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n", 
    "00108de0": "\nvoid quote_n_mem(void)\n\n{\n  quotearg_n_options();\n  return;\n}\n\n", 
    "00109660": "\nvoid xstrdup(char *param_1)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(param_1);\n  xmemdup(param_1,sVar1 + 1);\n  return;\n}\n\n", 
    "00116198": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint open(char *__file,int __oflag,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* open@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "001034f0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nsize_t __ctype_get_mb_cur_max(void)\n\n{\n  size_t sVar1;\n  \n  sVar1 = (*(code *)PTR___ctype_get_mb_cur_max_00114e58)();\n  return sVar1;\n}\n\n", 
    "00116078": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid dcgettext(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* dcgettext@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "0010a150": "\nsize_t rpl_mbrtowc(wchar_t *param_1,byte *param_2,size_t param_3,mbstate_t *param_4)\n\n{\n  char cVar1;\n  size_t sVar2;\n  long in_FS_OFFSET;\n  wchar_t local_34;\n  long local_30;\n  \n  local_30 = *(long *)(in_FS_OFFSET + 0x28);\n  if (param_1 == (wchar_t *)0x0) {\n    param_1 = &local_34;\n  }\n  sVar2 = mbrtowc(param_1,(char *)param_2,param_3,param_4);\n  if ((0xfffffffffffffffd < sVar2) && (param_3 != 0)) {\n    cVar1 = hard_locale(0);\n    if (cVar1 == '\\0') {\n      sVar2 = 1;\n      *param_1 = (uint)*param_2;\n    }\n  }\n  if (local_30 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return sVar2;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "0010a270": "\nulong c_isalnum(int param_1)\n\n{\n  ulong in_RAX;\n  ulong uVar1;\n  \n  if (param_1 < 0x5b) {\n    uVar1 = 1;\n    if (param_1 < 0x41) {\n      return (ulong)(param_1 - 0x30U < 10);\n    }\n  }\n  else {\n    uVar1 = in_RAX & 0xffffffffffffff00 | (ulong)(param_1 - 0x61U < 0x1a);\n  }\n  return uVar1;\n}\n\n", 
    "00116190": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint tcsetattr(int __fd,int __optional_actions,termios *__termios_p)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* tcsetattr@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00116070": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint cfsetospeed(termios *__termios_p,speed_t __speed)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* cfsetospeed@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00103760": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid exit(int __status)\n\n{\n  (*(code *)PTR_exit_00114f90)();\n  return;\n}\n\n", 
    "00103eb0": "\n/* WARNING: Removing unreachable block (ram,0x00103ed4) */\n/* WARNING: Removing unreachable block (ram,0x00103ee0) */\n\nvoid register_tm_clones(void)\n\n{\n  return;\n}\n\n", 
    "001160e8": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid __libc_start_main(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __libc_start_main@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00103520": "\nvoid getopt_long(void)\n\n{\n  (*(code *)PTR_getopt_long_00114e70)();\n  return;\n}\n\n", 
    "00103640": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint fileno(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_fileno_00114f00)();\n  return iVar1;\n}\n\n", 
    "00106aa0": "\nint fd_reopen(int param_1,char *param_2,int param_3,uint param_4)\n\n{\n  int iVar1;\n  int __fd;\n  int iVar2;\n  int *piVar3;\n  \n  __fd = open(param_2,param_3,(ulong)param_4);\n  if ((param_1 != __fd) && (-1 < __fd)) {\n    iVar2 = dup2(__fd,param_1);\n    piVar3 = __errno_location();\n    iVar1 = *piVar3;\n    close(__fd);\n    *piVar3 = iVar1;\n    return iVar2;\n  }\n  return __fd;\n}\n\n", 
    "001097f0": "\nundefined8 bkm_scale(long *param_1,int param_2)\n\n{\n  long lVar1;\n  long lVar2;\n  long lVar3;\n  \n  lVar3 = -0x8000000000000000;\n  lVar2 = (long)param_2;\n  lVar1 = *param_1;\n  if ((SUB168((SEXT816(-0x8000000000000000) & (undefined  [16])0xffffffffffffffff |\n              ZEXT816(0x8000000000000000)) / SEXT816(lVar2),0) <= lVar1) &&\n     (lVar3 = 0x7fffffffffffffff,\n     lVar1 <= SUB168((SEXT816(0x7fffffffffffffff) & (undefined  [16])0xffffffffffffffff |\n                     ZEXT816(0x7fffffffffffffff)) / SEXT816(lVar2),0))) {\n    *param_1 = lVar2 * lVar1;\n    return 0;\n  }\n  *param_1 = lVar3;\n  return 1;\n}\n\n", 
    "00108770": "\nuint set_char_quoting(undefined1 *param_1,byte param_2,uint param_3)\n\n{\n  uint uVar1;\n  uint uVar2;\n  \n  if (param_1 == (undefined1 *)0x0) {\n    param_1 = default_quoting_options;\n  }\n  uVar1 = *(uint *)(param_1 + (ulong)(param_2 >> 5) * 4 + 8);\n  uVar2 = uVar1 >> (param_2 & 0x1f);\n  *(uint *)(param_1 + (ulong)(param_2 >> 5) * 4 + 8) =\n       ((param_3 ^ uVar2) & 1) << (param_2 & 0x1f) ^ uVar1;\n  return uVar2 & 1;\n}\n\n", 
    "0010a2f0": "\nulong c_iscntrl(uint param_1)\n\n{\n  ulong in_RAX;\n  \n  if ((int)param_1 < 0x20) {\n    return (ulong)(~param_1 >> 0x1f);\n  }\n  return in_RAX & 0xffffffffffffff00 | (ulong)(param_1 == 0x7f);\n}\n\n", 
    "00108890": "\nundefined8\nquotearg_alloc_mem(undefined8 param_1,undefined8 param_2,long *param_3,undefined1 *param_4)\n\n{\n  int iVar1;\n  int *piVar2;\n  long lVar3;\n  undefined8 uVar4;\n  uint uVar5;\n  \n  if ((undefined4 *)param_4 == (undefined4 *)0x0) {\n    param_4 = default_quoting_options;\n  }\n  piVar2 = __errno_location();\n  iVar1 = *piVar2;\n  uVar5 = (uint)(param_3 == (long *)0x0) | *(uint *)((long)param_4 + 4);\n  lVar3 = quotearg_buffer_restyled\n                    (0,0,param_1,param_2,*(undefined4 *)param_4,uVar5,\n                     (undefined4 *)((long)param_4 + 8),*(undefined8 *)((long)param_4 + 0x28),\n                     *(undefined8 *)((long)param_4 + 0x30));\n  uVar4 = xcharalloc(lVar3 + 1);\n  quotearg_buffer_restyled\n            (uVar4,lVar3 + 1,param_1,param_2,*(undefined4 *)param_4,uVar5,\n             (undefined4 *)((long)param_4 + 8),*(undefined8 *)((long)param_4 + 0x28),\n             *(undefined8 *)((long)param_4 + 0x30));\n  *piVar2 = iVar1;\n  if (param_3 != (long *)0x0) {\n    *param_3 = lVar3;\n  }\n  return uVar4;\n}\n\n", 
    "001160e0": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint close(int __fd)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* close@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00108e20": "\nundefined8\nversion_etc_arn(FILE *param_1,long param_2,undefined8 param_3,undefined8 param_4,undefined8 *param_5\n               ,undefined8 param_6)\n\n{\n  undefined8 uVar1;\n  char *pcVar2;\n  undefined8 uVar3;\n  undefined8 uVar4;\n  undefined8 uVar5;\n  undefined8 uVar6;\n  undefined8 local_60;\n  undefined8 local_58;\n  undefined8 local_50;\n  undefined8 local_48;\n  \n  if (param_2 == 0) {\n    __fprintf_chk(param_1,1,\"%s %s\\n\",param_3,param_4);\n  }\n  else {\n    __fprintf_chk(param_1,1,\"%s (%s) %s\\n\",param_2,param_3,param_4);\n  }\n  uVar1 = dcgettext(0,&DAT_0010ff7b,5);\n  __fprintf_chk(param_1,1,\"Copyright %s %d Free Software Foundation, Inc.\",uVar1,0x7e2);\n  pcVar2 = (char *)dcgettext(0,\n                             \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\"\n                             ,5);\n  fputs_unlocked(pcVar2,param_1);\n  switch(param_6) {\n  case 0:\n                    /* WARNING: Subroutine does not return */\n    abort();\n  case 1:\n    uVar1 = *param_5;\n    uVar4 = dcgettext(0,\"Written by %s.\\n\",5);\n    uVar1 = __fprintf_chk(param_1,1,uVar4,uVar1);\n    return uVar1;\n  case 2:\n    uVar1 = param_5[1];\n    uVar4 = *param_5;\n    uVar5 = dcgettext(0,\"Written by %s and %s.\\n\",5);\n    uVar1 = __fprintf_chk(param_1,1,uVar5,uVar4,uVar1);\n    return uVar1;\n  case 3:\n    uVar1 = param_5[2];\n    uVar4 = param_5[1];\n    uVar5 = *param_5;\n    uVar6 = dcgettext(0,\"Written by %s, %s, and %s.\\n\",5);\n    uVar1 = __fprintf_chk(param_1,1,uVar6,uVar5,uVar4,uVar1);\n    return uVar1;\n  case 4:\n    uVar1 = param_5[3];\n    uVar4 = param_5[2];\n    uVar5 = param_5[1];\n    uVar6 = *param_5;\n    uVar3 = dcgettext(0,\"Written by %s, %s, %s,\\nand %s.\\n\",5);\n    goto LAB_001090e9;\n  case 5:\n    uVar1 = param_5[3];\n    uVar4 = param_5[2];\n    uVar5 = param_5[1];\n    uVar6 = *param_5;\n    uVar3 = dcgettext(0,\"Written by %s, %s, %s,\\n%s, and %s.\\n\",5);\nLAB_001090e9:\n    __fprintf_chk(param_1,1,uVar3,uVar6,uVar5,uVar4);\n    return uVar1;\n  case 6:\n    local_58 = param_5[5];\n    local_60 = param_5[4];\n    uVar1 = param_5[3];\n    uVar4 = param_5[2];\n    uVar5 = param_5[1];\n    uVar6 = *param_5;\n    uVar3 = dcgettext(0,\"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\",5);\n    goto LAB_0010918b;\n  case 7:\n    local_58 = param_5[5];\n    local_60 = param_5[4];\n    uVar1 = param_5[3];\n    uVar4 = param_5[2];\n    uVar5 = param_5[1];\n    uVar6 = *param_5;\n    uVar3 = dcgettext(0,\"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\",5);\nLAB_0010918b:\n    uVar1 = __fprintf_chk(param_1,1,uVar3,uVar6,uVar5,uVar4,uVar1,local_60,local_58);\n    return uVar1;\n  case 8:\n    local_48 = param_5[7];\n    local_50 = param_5[6];\n    local_58 = param_5[5];\n    local_60 = param_5[4];\n    uVar1 = param_5[3];\n    uVar4 = param_5[2];\n    uVar5 = param_5[1];\n    uVar6 = *param_5;\n    uVar3 = dcgettext(0,\"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\",5);\n    goto LAB_00108f3d;\n  case 9:\n    local_48 = param_5[7];\n    pcVar2 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n    local_50 = param_5[6];\n    local_58 = param_5[5];\n    local_60 = param_5[4];\n    uVar1 = param_5[3];\n    uVar4 = param_5[2];\n    uVar5 = param_5[1];\n    uVar6 = *param_5;\n    break;\n  default:\n    local_48 = param_5[7];\n    pcVar2 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n    local_50 = param_5[6];\n    local_58 = param_5[5];\n    local_60 = param_5[4];\n    uVar1 = param_5[3];\n    uVar4 = param_5[2];\n    uVar5 = param_5[1];\n    uVar6 = *param_5;\n  }\n  uVar3 = dcgettext(0,pcVar2,5);\nLAB_00108f3d:\n  uVar1 = __fprintf_chk(param_1,1,uVar3,uVar6,uVar5,uVar4,uVar1,local_60,local_58,local_50,local_48)\n  ;\n  return uVar1;\n}\n\n", 
    "001057a0": "\nvoid usage(int param_1)\n\n{\n  FILE *pFVar1;\n  undefined8 uVar2;\n  char *pcVar3;\n  undefined8 uVar4;\n  \n  uVar4 = program_name;\n  if (param_1 == 0) {\n    uVar2 = dcgettext(0,\n                      \"Usage: %s [-F DEVICE | --file=DEVICE] [SETTING]...\\n  or:  %s [-F DEVICE | --file=DEVICE] [-a|--all]\\n  or:  %s [-F DEVICE | --file=DEVICE] [-g|--save]\\n\"\n                      ,5);\n    __printf_chk(1,uVar2,uVar4,uVar4,uVar4);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\"Print or change terminal characteristics.\\n\",5);\n    fputs_unlocked(pcVar3,pFVar1);\n    emit_mandatory_arg_note();\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\n                               \"  -a, --all          print all current settings in human-readable form\\n  -g, --save         print all current settings in a stty-readable form\\n  -F, --file=DEVICE  open and use the specified DEVICE instead of stdin\\n\"\n                               ,5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\"      --help     display this help and exit\\n\",5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\"      --version  output version information and exit\\n\",5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\n                               \"\\nOptional - before SETTING indicates negation.  An * marks non-POSIX\\nsettings.  The underlying system defines which settings are available.\\n\"\n                               ,5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\"\\nSpecial characters:\\n\",5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\" * discard CHAR  CHAR will toggle discarding of output\\n\",5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\n                               \"   eof CHAR      CHAR will send an end of file (terminate the input)\\n   eol CHAR      CHAR will end the line\\n\"\n                               ,5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\" * eol2 CHAR     alternate CHAR for ending the line\\n\",5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\n                               \"   erase CHAR    CHAR will erase the last character typed\\n   intr CHAR     CHAR will send an interrupt signal\\n   kill CHAR     CHAR will erase the current line\\n\"\n                               ,5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\" * lnext CHAR    CHAR will enter the next character quoted\\n\",5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\"   quit CHAR     CHAR will send a quit signal\\n\",5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\" * rprnt CHAR    CHAR will redraw the current line\\n\",5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\n                               \"   start CHAR    CHAR will restart the output after stopping it\\n   stop CHAR     CHAR will stop the output\\n   susp CHAR     CHAR will send a terminal stop signal\\n\"\n                               ,5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\" * swtch CHAR    CHAR will switch to a different shell layer\\n\",5)\n    ;\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\" * werase CHAR   CHAR will erase the last word typed\\n\",5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\n                               \"\\nSpecial settings:\\n   N             set the input and output speeds to N bauds\\n\"\n                               ,5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\n                               \" * cols N        tell the kernel that the terminal has N columns\\n * columns N     same as cols N\\n\"\n                               ,5);\n    fputs_unlocked(pcVar3,pFVar1);\n    if (tcsetattr_options == 1) {\n      uVar4 = dcgettext(0,\"on\",5);\n    }\n    else {\n      uVar4 = dcgettext(0,&DAT_0010d4c8,5);\n    }\n    uVar2 = dcgettext(0,\n                      \" * [-]drain      wait for transmission before applying settings (%s by default)\\n\"\n                      ,5);\n    __printf_chk(1,uVar2,uVar4);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\"   ispeed N      set the input speed to N\\n\",5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\" * line N        use line discipline N\\n\",5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\n                               \"   min N         with -icanon, set N characters minimum for a completed read\\n   ospeed N      set the output speed to N\\n\"\n                               ,5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\n                               \" * rows N        tell the kernel that the terminal has N rows\\n * size          print the number of rows and columns according to the kernel\\n\"\n                               ,5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\n                               \"   speed         print the terminal speed\\n   time N        with -icanon, set read timeout of N tenths of a second\\n\"\n                               ,5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\n                               \"\\nControl settings:\\n   [-]clocal     disable modem control signals\\n   [-]cread      allow input to be received\\n\"\n                               ,5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\" * [-]crtscts    enable RTS/CTS handshaking\\n\",5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\"   csN           set character size to N bits, N in [5..8]\\n\",5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\n                               \"   [-]cstopb     use two stop bits per character (one with \\'-\\')\\n   [-]hup        send a hangup signal when the last process closes the tty\\n   [-]hupcl      same as [-]hup\\n   [-]parenb     generate parity bit in output and expect parity bit in input\\n   [-]parodd     set odd parity (or even parity with \\'-\\')\\n\"\n                               ,5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\" * [-]cmspar     use \\\"stick\\\" (mark/space) parity\\n\",5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\n                               \"\\nInput settings:\\n   [-]brkint     breaks cause an interrupt signal\\n   [-]icrnl      translate carriage return to newline\\n   [-]ignbrk     ignore break characters\\n   [-]igncr      ignore carriage return\\n   [-]ignpar     ignore characters with parity errors\\n\"\n                               ,5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\n                               \" * [-]imaxbel    beep and do not flush a full input buffer on a character\\n\"\n                               ,5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\n                               \"   [-]inlcr      translate newline to carriage return\\n   [-]inpck      enable input parity checking\\n   [-]istrip     clear high (8th) bit of input characters\\n\"\n                               ,5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\" * [-]iutf8      assume input characters are UTF-8 encoded\\n\",5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\" * [-]iuclc      translate uppercase characters to lowercase\\n\",5)\n    ;\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\n                               \" * [-]ixany      let any character restart output, not only start character\\n\"\n                               ,5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\n                               \"   [-]ixoff      enable sending of start/stop characters\\n   [-]ixon       enable XON/XOFF flow control\\n   [-]parmrk     mark parity errors (with a 255-0-character sequence)\\n   [-]tandem     same as [-]ixoff\\n\"\n                               ,5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\"\\nOutput settings:\\n\",5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\" * bsN           backspace delay style, N in [0..1]\\n\",5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\" * crN           carriage return delay style, N in [0..3]\\n\",5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\" * ffN           form feed delay style, N in [0..1]\\n\",5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\" * nlN           newline delay style, N in [0..1]\\n\",5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\" * [-]ocrnl      translate carriage return to newline\\n\",5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\n                               \" * [-]ofdel      use delete characters for fill instead of NUL characters\\n\"\n                               ,5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\n                               \" * [-]ofill      use fill (padding) characters instead of timing for delays\\n\"\n                               ,5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\" * [-]olcuc      translate lowercase characters to uppercase\\n\",5)\n    ;\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\" * [-]onlcr      translate newline to carriage return-newline\\n\",5\n                              );\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\" * [-]onlret     newline performs a carriage return\\n\",5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\n                               \" * [-]onocr      do not print carriage returns in the first column\\n\"\n                               ,5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\"   [-]opost      postprocess output\\n\",5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\n                               \" * tabN          horizontal tab delay style, N in [0..3]\\n * tabs          same as tab0\\n * -tabs         same as tab3\\n\"\n                               ,5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\" * vtN           vertical tab delay style, N in [0..1]\\n\",5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\n                               \"\\nLocal settings:\\n   [-]crterase   echo erase characters as backspace-space-backspace\\n\"\n                               ,5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\n                               \" * crtkill       kill all line by obeying the echoprt and echoe settings\\n * -crtkill      kill all line by obeying the echoctl and echok settings\\n\"\n                               ,5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\n                               \" * [-]ctlecho    echo control characters in hat notation (\\'^c\\')\\n\"\n                               ,5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\"   [-]echo       echo input characters\\n\",5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\" * [-]echoctl    same as [-]ctlecho\\n\",5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\n                               \"   [-]echoe      same as [-]crterase\\n   [-]echok      echo a newline after a kill character\\n\"\n                               ,5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\" * [-]echoke     same as [-]crtkill\\n\",5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\n                               \"   [-]echonl     echo newline even if not echoing other characters\\n\"\n                               ,5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\n                               \" * [-]echoprt    echo erased characters backward, between \\'\\\\\\' and \\'/\\'\\n\"\n                               ,5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\n                               \" * [-]extproc    enable \\\"LINEMODE\\\"; useful with high latency links\\n\"\n                               ,5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\" * [-]flusho     discard output\\n\",5);\n    fputs_unlocked(pcVar3,pFVar1);\n    uVar4 = dcgettext(0,\n                      \"   [-]icanon     enable special characters: %s\\n   [-]iexten     enable non-POSIX special characters\\n\"\n                      ,5);\n    __printf_chk(1,uVar4,\"erase, kill, werase, rprnt\");\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\n                               \"   [-]isig       enable interrupt, quit, and suspend special characters\\n   [-]noflsh     disable flushing after interrupt and quit special characters\\n\"\n                               ,5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\" * [-]prterase   same as [-]echoprt\\n\",5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\n                               \" * [-]tostop     stop background jobs that try to write to the terminal\\n\"\n                               ,5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\n                               \" * [-]xcase      with icanon, escape with \\'\\\\\\' for uppercase characters\\n\"\n                               ,5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\"\\nCombination settings:\\n\",5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\" * [-]LCASE      same as [-]lcase\\n\",5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\n                               \"   cbreak        same as -icanon\\n   -cbreak       same as icanon\\n\"\n                               ,5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\n                               \"   cooked        same as brkint ignpar istrip icrnl ixon opost isig\\n                 icanon, eof and eol characters to their default values\\n   -cooked       same as raw\\n\"\n                               ,5);\n    fputs_unlocked(pcVar3,pFVar1);\n    uVar4 = dcgettext(0,\"   crt           same as %s\\n\",5);\n    __printf_chk(1,uVar4,\"echoe echoctl echoke\");\n    uVar4 = dcgettext(0,\"   dec           same as %s intr ^c erase 0177\\n                 kill ^u\\n\"\n                      ,5);\n    __printf_chk(1,uVar4,\"echoe echoctl echoke -ixany\");\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\" * [-]decctlq    same as [-]ixany\\n\",5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\n                               \"   ek            erase and kill characters to their default values\\n   evenp         same as parenb -parodd cs7\\n   -evenp        same as -parenb cs8\\n\"\n                               ,5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\" * [-]lcase      same as xcase iuclc olcuc\\n\",5);\n    fputs_unlocked(pcVar3,pFVar1);\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\n                               \"   litout        same as -parenb -istrip -opost cs8\\n   -litout       same as parenb istrip opost cs7\\n\"\n                               ,5);\n    fputs_unlocked(pcVar3,pFVar1);\n    uVar4 = dcgettext(0,\"   nl            same as %s\\n   -nl           same as %s\\n\",5);\n    __printf_chk(1,uVar4,\"-icrnl -onlcr\",\"icrnl -inlcr -igncr onlcr -ocrnl -onlret\");\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\n                               \"   oddp          same as parenb parodd cs7\\n   -oddp         same as -parenb cs8\\n   [-]parity     same as [-]evenp\\n   pass8         same as -parenb -istrip cs8\\n   -pass8        same as parenb istrip cs7\\n\"\n                               ,5);\n    fputs_unlocked(pcVar3,pFVar1);\n    uVar4 = dcgettext(0,\n                      \"   raw           same as -ignbrk -brkint -ignpar -parmrk -inpck -istrip\\n                 -inlcr -igncr -icrnl -ixon -ixoff -icanon -opost\\n                 -isig%s min 1 time 0\\n   -raw          same as cooked\\n\"\n                      ,5);\n    __printf_chk(1,uVar4,\" -iuclc -ixany -imaxbel -xcase\");\n    uVar4 = dcgettext(0,\n                      \"   sane          same as cread -ignbrk brkint -inlcr -igncr icrnl\\n                 icanon iexten echo echoe echok -echonl -noflsh\\n                 %s\\n                 %s\\n                 %s,\\n                 all special characters to their default values\\n\"\n                      ,5);\n    __printf_chk(1,uVar4,\"-ixoff -iutf8 -iuclc -ixany imaxbel -xcase -olcuc -ocrnl\",\n                 \"opost -ofill onlcr -onocr -onlret nl0 cr0 tab0 bs0 vt0 ff0\",\n                 \"isig -tostop -ofdel -echoprt echoctl echoke -extproc -flusho\");\n    pFVar1 = stdout;\n    pcVar3 = (char *)dcgettext(0,\n                               \"\\nHandle the tty line connected to standard input.  Without arguments,\\nprints baud rate, line discipline, and deviations from stty sane.  In\\nsettings, CHAR is taken literally, or coded as in ^c, 0x37, 0177 or\\n127; special values ^- or undef used to disable special characters.\\n\"\n                               ,5);\n    fputs_unlocked(pcVar3,pFVar1);\n    emit_ancillary_info_constprop_0();\n  }\n  else {\n    uVar2 = dcgettext(0,\"Try \\'%s --help\\' for more information.\\n\",5);\n    __fprintf_chk(stderr,1,uVar2,uVar4);\n  }\n                    /* WARNING: Subroutine does not return */\n  exit(param_1);\n}\n\n", 
    "001036e0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint tcgetattr(int __fd,termios *__termios_p)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_tcgetattr_00114f50)();\n  return iVar1;\n}\n\n", 
    "00116168": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nchar * setlocale(int __category,char *__locale)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* setlocale@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "001034a0": "\nvoid textdomain(void)\n\n{\n  (*(code *)PTR_textdomain_00114e30)();\n  return;\n}\n\n", 
    "00116048": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint fcntl(int __fd,int __cmd,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fcntl@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "001035c0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint memcmp(void *__s1,void *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_memcmp_00114ec0)();\n  return iVar1;\n}\n\n", 
    "00106c30": "\nbool strcaseeq9(long param_1,long param_2)\n\n{\n  int iVar1;\n  \n  iVar1 = c_strcasecmp(param_1 + 9,param_2 + 9);\n  return iVar1 == 0;\n}\n\n", 
    "00109870": "\nuint xstrtol(char *param_1,char **param_2,uint param_3,long *param_4,char *param_5)\n\n{\n  char cVar1;\n  char cVar2;\n  uint uVar3;\n  int *piVar4;\n  long lVar5;\n  char *pcVar6;\n  char *pcVar7;\n  undefined8 uVar8;\n  uint uVar9;\n  int iVar10;\n  long in_FS_OFFSET;\n  char *local_50;\n  long local_48;\n  long local_40;\n  \n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  if (0x24 < param_3) {\n                    /* WARNING: Subroutine does not return */\n    __assert_fail(\"0 <= strtol_base && strtol_base <= 36\",\"lib/xstrtol.c\",0x60,\"xstrtol\");\n  }\n  if (param_2 == (char **)0x0) {\n    param_2 = &local_50;\n  }\n  piVar4 = __errno_location();\n  *piVar4 = 0;\n  lVar5 = strtol(param_1,param_2,param_3);\n  pcVar7 = *param_2;\n  local_48 = lVar5;\n  if (pcVar7 == param_1) {\n    if (param_5 == (char *)0x0) {\n      uVar9 = 4;\n      goto LAB_001098ff;\n    }\n    cVar1 = *pcVar7;\n    uVar9 = 4;\n    if (cVar1 == '\\0') goto LAB_001098ff;\n    iVar10 = (int)cVar1;\n    pcVar6 = strchr(param_5,iVar10);\n    if (pcVar6 == (char *)0x0) goto LAB_001098ff;\n    local_48 = 1;\n    uVar9 = 0;\nLAB_00109982:\n    pcVar6 = strchr(param_5,iVar10);\n    if (pcVar6 == (char *)0x0) {\nswitchD_001099e3_caseD_43:\n      uVar9 = uVar9 | 2;\n      *param_4 = local_48;\n      goto LAB_001098ff;\n    }\n    switch(cVar1) {\n    case 'E':\n    case 'G':\n    case 'K':\n    case 'M':\n    case 'P':\n    case 'T':\n    case 'Y':\n    case 'Z':\n    case 'g':\n    case 'k':\n    case 'm':\n    case 't':\n      pcVar6 = strchr(param_5,0x30);\n      if (pcVar6 == (char *)0x0) goto switchD_001099ba_caseD_46;\n      cVar2 = pcVar7[1];\n      if (cVar2 == 'D') {\n        iVar10 = 2;\n        uVar8 = 1000;\n      }\n      else if (cVar2 == 'i') {\n        uVar8 = 0x400;\n        iVar10 = (pcVar7[2] == 'B') + 1 + (uint)(pcVar7[2] == 'B');\n      }\n      else {\n        iVar10 = (cVar2 == 'B') + 1;\n        uVar8 = 1000;\n        if (cVar2 != 'B') {\n          uVar8 = 0x400;\n        }\n      }\n      break;\n    default:\nswitchD_001099ba_caseD_46:\n      iVar10 = 1;\n      uVar8 = 0x400;\n    }\n    switch(cVar1) {\n    case 'B':\n      uVar3 = bkm_scale(&local_48,0x400);\n      pcVar7 = *param_2;\n      uVar9 = uVar9 | uVar3;\n      break;\n    default:\n      goto switchD_001099e3_caseD_43;\n    case 'E':\n      uVar3 = bkm_scale_by_power(&local_48,uVar8,6);\n      pcVar7 = *param_2;\n      uVar9 = uVar9 | uVar3;\n      break;\n    case 'G':\n    case 'g':\n      uVar3 = bkm_scale_by_power(&local_48,uVar8,3);\n      pcVar7 = *param_2;\n      uVar9 = uVar9 | uVar3;\n      break;\n    case 'K':\n    case 'k':\n      uVar3 = bkm_scale_by_power(&local_48,uVar8,1);\n      pcVar7 = *param_2;\n      uVar9 = uVar9 | uVar3;\n      break;\n    case 'M':\n    case 'm':\n      uVar3 = bkm_scale_by_power(&local_48,uVar8,2);\n      pcVar7 = *param_2;\n      uVar9 = uVar9 | uVar3;\n      break;\n    case 'P':\n      uVar3 = bkm_scale_by_power(&local_48,uVar8,5);\n      pcVar7 = *param_2;\n      uVar9 = uVar9 | uVar3;\n      break;\n    case 'T':\n    case 't':\n      uVar3 = bkm_scale_by_power(&local_48,uVar8,4);\n      pcVar7 = *param_2;\n      uVar9 = uVar9 | uVar3;\n      break;\n    case 'Y':\n      uVar3 = bkm_scale_by_power(&local_48,uVar8,8);\n      pcVar7 = *param_2;\n      uVar9 = uVar9 | uVar3;\n      break;\n    case 'Z':\n      uVar3 = bkm_scale_by_power(&local_48,uVar8,7);\n      pcVar7 = *param_2;\n      uVar9 = uVar9 | uVar3;\n      break;\n    case 'b':\n      uVar3 = bkm_scale(&local_48,0x200);\n      pcVar7 = *param_2;\n      uVar9 = uVar9 | uVar3;\n      break;\n    case 'c':\n      break;\n    case 'w':\n      uVar3 = bkm_scale(&local_48,2);\n      pcVar7 = *param_2;\n      uVar9 = uVar9 | uVar3;\n    }\n    lVar5 = local_48;\n    *param_2 = pcVar7 + iVar10;\n    if (pcVar7[iVar10] != '\\0') {\n      uVar9 = uVar9 | 2;\n    }\n  }\n  else {\n    if (*piVar4 == 0) {\n      uVar9 = 0;\n    }\n    else {\n      uVar9 = 4;\n      if (*piVar4 != 0x22) goto LAB_001098ff;\n      uVar9 = 1;\n    }\n    if ((param_5 != (char *)0x0) && (cVar1 = *pcVar7, cVar1 != '\\0')) {\n      iVar10 = (int)cVar1;\n      goto LAB_00109982;\n    }\n  }\n  *param_4 = lVar5;\nLAB_001098ff:\n  if (local_40 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return uVar9;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "00104b70": "\nvoid integer_arg(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined8 uVar1;\n  \n  uVar1 = dcgettext(0,\"invalid integer argument\",5);\n  xnumtoumax(param_1,0,0,param_2,&DAT_0010d0cf,uVar1,0);\n  return;\n}\n\n", 
    "001086f0": "\nvoid clone_quoting_options(undefined1 *param_1)\n\n{\n  int iVar1;\n  int *piVar2;\n  \n  piVar2 = __errno_location();\n  iVar1 = *piVar2;\n  if (param_1 == (undefined1 *)0x0) {\n    param_1 = default_quoting_options;\n  }\n  xmemdup(param_1,0x38);\n  *piVar2 = iVar1;\n  return;\n}\n\n", 
    "00109630": "\nvoid xmemdup(void *param_1,size_t param_2)\n\n{\n  void *__dest;\n  \n  __dest = (void *)xmalloc(param_2);\n  memcpy(__dest,param_1,param_2);\n  return;\n}\n\n", 
    "00116160": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid * realloc(void *__ptr,size_t __size)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* realloc@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00116040": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid __fpending(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __fpending@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00103510": "\nvoid __stack_chk_fail(void)\n\n{\n  (*(code *)PTR___stack_chk_fail_00114e68)();\n  return;\n}\n\n", 
    "001160f8": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint fputs_unlocked(char *__s,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fputs_unlocked@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00103630": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint putchar_unlocked(int __c)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_putchar_unlocked_00114ef8)();\n  return iVar1;\n}\n\n", 
    "00103750": "\nvoid __cxa_atexit(void)\n\n{\n  (*(code *)PTR___cxa_atexit_00114f88)();\n  return;\n}\n\n", 
    "001095c0": "\nvoid x2realloc(undefined8 param_1,undefined8 param_2)\n\n{\n  x2nrealloc(param_1,param_2,1);\n  return;\n}\n\n", 
    "0010a1e0": "\nulong rpl_vasprintf(void **param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  void *__ptr;\n  int *piVar1;\n  long in_FS_OFFSET;\n  ulong local_18;\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  __ptr = (void *)vasnprintf(0,&local_18,param_2,param_3);\n  if (__ptr == (void *)0x0) {\n    local_18 = 0xffffffff;\n  }\n  else if (local_18 < 0x80000000) {\n    *param_1 = __ptr;\n    local_18 = local_18 & 0xffffffff;\n  }\n  else {\n    free(__ptr);\n    piVar1 = __errno_location();\n    *piVar1 = 0x4b;\n    local_18 = 0xffffffff;\n  }\n  if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return local_18;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "001160f0": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint memcmp(void *__s1,void *__s2,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memcmp@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00106460": "\nvoid apply_settings(char param_1,undefined8 param_2,long param_3,int param_4,long param_5,\n                   undefined *param_6,undefined *param_7)\n\n{\n  long lVar1;\n  long *plVar2;\n  char cVar3;\n  int iVar4;\n  int iVar5;\n  undefined8 uVar6;\n  ulong uVar7;\n  undefined8 uVar8;\n  long lVar9;\n  int iVar10;\n  char *pcVar11;\n  byte *pbVar12;\n  byte *pbVar13;\n  char **ppcVar14;\n  byte *__s1;\n  bool bVar15;\n  bool bVar16;\n  bool bVar17;\n  byte bVar18;\n  \n  bVar18 = 0;\n  if (1 < param_4) {\n    iVar10 = 1;\n    do {\n      while( true ) {\n        __s1 = *(byte **)(param_3 + (long)iVar10 * 8);\n        lVar1 = (long)iVar10 * 8;\n        if (__s1 != (byte *)0x0) break;\nLAB_001064af:\n        iVar10 = iVar10 + 1;\n        if (param_4 <= iVar10) {\n          return;\n        }\n      }\n      bVar15 = *__s1 < 0x2d;\n      bVar16 = *__s1 == 0x2d;\n      bVar17 = bVar16;\n      if (bVar16) {\n        bVar15 = (byte *)0xfffffffffffffffe < __s1;\n        __s1 = __s1 + 1;\n        bVar17 = __s1 == (byte *)0x0;\n      }\n      lVar9 = 6;\n      pbVar12 = __s1;\n      pbVar13 = (byte *)0x10d328;\n      do {\n        if (lVar9 == 0) break;\n        lVar9 = lVar9 + -1;\n        bVar15 = *pbVar12 < *pbVar13;\n        bVar17 = *pbVar12 == *pbVar13;\n        pbVar12 = pbVar12 + (ulong)bVar18 * -2 + 1;\n        pbVar13 = pbVar13 + (ulong)bVar18 * -2 + 1;\n      } while (bVar17);\n      if ((!bVar15 && !bVar17) == bVar15) {\n        tcsetattr_options = bVar16 ^ 1;\n        goto LAB_001064af;\n      }\n      ppcVar14 = (char **)(mode_info + 0x20);\n      iVar5 = 0;\n      pcVar11 = \"parenb\";\n      do {\n        iVar4 = strcmp((char *)__s1,pcVar11);\n        if (iVar4 == 0) {\n          bVar17 = (mode_info[(long)iVar5 * 0x20 + 0xc] & 0x10) == 0;\n          if (!bVar17) goto LAB_00106553;\n          cVar3 = set_mode(mode_info + (long)iVar5 * 0x20,bVar16,param_5);\n          *param_7 = 1;\n          if (cVar3 == '\\x01') goto LAB_001064af;\n          if (bVar16) goto LAB_001066d8;\n          if (cVar3 != '\\0') goto LAB_001064af;\n          goto LAB_001065e9;\n        }\n        pcVar11 = *ppcVar14;\n        ppcVar14 = ppcVar14 + 4;\n        iVar5 = iVar5 + 1;\n      } while (pcVar11 != (char *)0x0);\n      if (bVar16) {\nLAB_001066d8:\n        uVar8 = quote(__s1 + -1);\n        pcVar11 = \"invalid argument %s\";\n        goto LAB_001066f3;\n      }\nLAB_001065e9:\n      ppcVar14 = (char **)(control_info + 0x18);\n      iVar5 = 0;\n      pcVar11 = \"intr\";\n      do {\n        iVar4 = strcmp((char *)__s1,pcVar11);\n        if (iVar4 == 0) {\n          if ((param_4 + -1 == iVar10) || (lVar1 = *(long *)(param_3 + 8 + lVar1), lVar1 == 0))\n          goto LAB_0010697e;\n          iVar10 = iVar10 + 1;\n          set_control_char_isra_0(pcVar11,(long)iVar5 * 0x18 + 0x113e70,lVar1,param_5);\n          *param_7 = 1;\n          goto LAB_001064af;\n        }\n        pcVar11 = *ppcVar14;\n        ppcVar14 = ppcVar14 + 3;\n        iVar5 = iVar5 + 1;\n        bVar17 = pcVar11 == (char *)0x0;\n      } while (!bVar17);\nLAB_00106553:\n      bVar15 = false;\n      lVar9 = 7;\n      pbVar12 = __s1;\n      pbVar13 = (byte *)\"ispeed\";\n      do {\n        if (lVar9 == 0) break;\n        lVar9 = lVar9 + -1;\n        bVar15 = *pbVar12 < *pbVar13;\n        bVar17 = *pbVar12 == *pbVar13;\n        pbVar12 = pbVar12 + (ulong)bVar18 * -2 + 1;\n        pbVar13 = pbVar13 + (ulong)bVar18 * -2 + 1;\n      } while (bVar17);\n      bVar16 = false;\n      bVar17 = (!bVar15 && !bVar17) == bVar15;\n      if (!bVar17) {\n        lVar9 = 7;\n        pbVar12 = __s1;\n        pbVar13 = (byte *)\"ospeed\";\n        do {\n          if (lVar9 == 0) break;\n          lVar9 = lVar9 + -1;\n          bVar16 = *pbVar12 < *pbVar13;\n          bVar17 = *pbVar12 == *pbVar13;\n          pbVar12 = pbVar12 + (ulong)bVar18 * -2 + 1;\n          pbVar13 = pbVar13 + (ulong)bVar18 * -2 + 1;\n        } while (bVar17);\n        bVar15 = false;\n        bVar17 = (!bVar16 && !bVar17) == bVar16;\n        if (bVar17) {\n          if ((param_4 + -1 == iVar10) ||\n             (pbVar12 = *(byte **)(param_3 + 8 + lVar1), pbVar12 == (byte *)0x0)) goto LAB_0010697e;\n          iVar10 = iVar10 + 1;\n          if (param_1 == '\\0') {\n            uVar8 = 1;\n            __s1 = pbVar12;\n            goto LAB_001065a8;\n          }\n        }\n        else {\n          lVar9 = 5;\n          pbVar12 = __s1;\n          pbVar13 = &DAT_0010d2c1;\n          do {\n            if (lVar9 == 0) break;\n            lVar9 = lVar9 + -1;\n            bVar15 = *pbVar12 < *pbVar13;\n            bVar17 = *pbVar12 == *pbVar13;\n            pbVar12 = pbVar12 + (ulong)bVar18 * -2 + 1;\n            pbVar13 = pbVar13 + (ulong)bVar18 * -2 + 1;\n          } while (bVar17);\n          bVar16 = false;\n          bVar17 = (!bVar15 && !bVar17) == bVar15;\n          if (bVar17) {\n            if ((param_4 + -1 == iVar10) || (lVar1 = *(long *)(param_3 + 8 + lVar1), lVar1 == 0))\n            goto LAB_0010697e;\n            iVar10 = iVar10 + 1;\n            if (param_1 == '\\0') {\n              uVar8 = integer_arg(lVar1,0x7fffffff);\n              set_window_size(uVar8,0xffffffff,param_2);\n            }\n          }\n          else {\n            lVar9 = 5;\n            pbVar12 = __s1;\n            pbVar13 = &DAT_0010d2c6;\n            do {\n              if (lVar9 == 0) break;\n              lVar9 = lVar9 + -1;\n              bVar16 = *pbVar12 < *pbVar13;\n              bVar17 = *pbVar12 == *pbVar13;\n              pbVar12 = pbVar12 + (ulong)bVar18 * -2 + 1;\n              pbVar13 = pbVar13 + (ulong)bVar18 * -2 + 1;\n            } while (bVar17);\n            if (((!bVar16 && !bVar17) == bVar16) ||\n               (iVar5 = strcmp((char *)__s1,\"columns\"), iVar5 == 0)) {\n              if ((param_4 + -1 == iVar10) || (lVar1 = *(long *)(param_3 + 8 + lVar1), lVar1 == 0))\n              goto LAB_0010697e;\n              iVar10 = iVar10 + 1;\n              if (param_1 == '\\0') {\n                uVar8 = integer_arg(lVar1,0x7fffffff);\n                set_window_size(0xffffffff,uVar8,param_2);\n              }\n            }\n            else {\n              iVar5 = strcmp((char *)__s1,\"size\");\n              if (iVar5 == 0) {\n                if (param_1 == '\\0') {\n                  max_col = screen_columns();\n                  current_col = 0;\n                  display_window_size(0,param_2);\n                }\n              }\n              else {\n                iVar5 = strcmp((char *)__s1,\"line\");\n                if (iVar5 == 0) {\n                  if (param_4 + -1 != iVar10) {\n                    plVar2 = (long *)(param_3 + 8 + lVar1);\n                    lVar1 = *plVar2;\n                    if (lVar1 != 0) {\n                      iVar10 = iVar10 + 1;\n                      uVar7 = integer_arg(lVar1,0xffffffffffffffff);\n                      *(char *)(param_5 + 0x10) = (char)uVar7;\n                      if ((uVar7 & 0xffffffffffffff00) != 0) {\n                        uVar8 = quote(*plVar2);\n                        uVar6 = dcgettext(0,\"invalid line discipline %s\",5);\n                    /* WARNING: Subroutine does not return */\n                        error(0,0,uVar6,uVar8);\n                      }\n                      goto LAB_001068a4;\n                    }\n                  }\n                  goto LAB_0010697e;\n                }\n                iVar5 = strcmp((char *)__s1,\"speed\");\n                if (iVar5 == 0) {\n                  if (param_1 == '\\0') {\n                    max_col = screen_columns();\n                    display_speed(param_5,0);\n                  }\n                }\n                else {\n                  iVar5 = string_to_baud(__s1);\n                  if (iVar5 == -1) {\n                    cVar3 = recover_mode(__s1,param_5);\n                    if (cVar3 == '\\0') {\n                      uVar8 = quote(__s1);\n                      pcVar11 = \"invalid argument %s\";\n                      goto LAB_001066f3;\n                    }\nLAB_001068a4:\n                    *param_7 = 1;\n                  }\n                  else if (param_1 == '\\0') {\n                    uVar8 = 2;\n                    goto LAB_001065a8;\n                  }\n                }\n              }\n            }\n          }\n        }\n        goto LAB_001064af;\n      }\n      if ((param_4 + -1 == iVar10) ||\n         (pbVar12 = *(byte **)(param_3 + 8 + lVar1), pbVar12 == (byte *)0x0)) {\nLAB_0010697e:\n        uVar8 = quote(__s1);\n        pcVar11 = \"missing argument to %s\";\nLAB_001066f3:\n        uVar6 = dcgettext(0,pcVar11,5);\n                    /* WARNING: Subroutine does not return */\n        error(0,0,uVar6,uVar8);\n      }\n      iVar10 = iVar10 + 1;\n      if (param_1 != '\\0') goto LAB_001064af;\n      uVar8 = 0;\n      __s1 = pbVar12;\nLAB_001065a8:\n      set_speed(uVar8,__s1,param_5);\n      iVar10 = iVar10 + 1;\n      *param_6 = 1;\n      *param_7 = 1;\n    } while (iVar10 < param_4);\n  }\n  return;\n}\n\n", 
    "001037f0": "\nundefined8 main(int param_1,undefined8 *param_2)\n\n{\n  bool bVar1;\n  bool bVar2;\n  bool bVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  undefined8 uVar7;\n  undefined8 *puVar8;\n  int *piVar9;\n  uint uVar10;\n  long lVar11;\n  long lVar12;\n  uint uVar13;\n  byte *pbVar14;\n  undefined1 *puVar15;\n  byte *pbVar16;\n  undefined8 in_R9;\n  undefined8 uVar17;\n  long in_FS_OFFSET;\n  bool bVar18;\n  bool bVar19;\n  byte bVar20;\n  long local_58;\n  char local_42;\n  char local_41;\n  long local_40;\n  \n  bVar20 = 0;\n  uVar17 = 0;\n  uVar13 = 0;\n  lVar12 = 0;\n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  set_program_name(*param_2);\n  setlocale(6,\"\");\n  bindtextdomain(\"coreutils\",\"/usr/local/share/locale\");\n  textdomain(\"coreutils\");\n  atexit(close_stdout);\n  local_58 = 0;\n  opterr = 0;\n  bVar3 = true;\n  bVar2 = false;\n  bVar1 = false;\n  uVar6 = 1;\nLAB_00103893:\n  uVar7 = getopt_long(param_1 - uVar13,param_2 + lVar12,\"-agF:\",longopts,0);\n  uVar4 = optind;\n  iVar5 = (int)uVar7;\n  if (iVar5 != -1) {\n    if (iVar5 == 0x46) {\n      if (local_58 != 0) {\n        uVar17 = dcgettext(0,\"only one device may be specified\",5);\n                    /* WARNING: Subroutine does not return */\n        error(1,0,uVar17);\n      }\n      local_58 = optarg;\n    }\n    else {\n      if (iVar5 < 0x47) {\n        if (iVar5 == -0x83) {\n          version_etc(stdout,&DAT_0010d14a,\"GNU coreutils\",Version,\"David MacKenzie\",0);\n                    /* WARNING: Subroutine does not return */\n          exit(0);\n        }\n        if (iVar5 == -0x82) {\n          usage(0);\n        }\n        else {\nLAB_0010397b:\n          bVar18 = CARRY4(uVar13,uVar6);\n          uVar13 = uVar13 + uVar6;\n          bVar19 = uVar13 == 0;\n          lVar11 = 7;\n          lVar12 = (long)(int)uVar13;\n          pbVar14 = (byte *)param_2[lVar12];\n          pbVar16 = (byte *)\"-drain\";\n          do {\n            if (lVar11 == 0) break;\n            lVar11 = lVar11 + -1;\n            bVar18 = *pbVar14 < *pbVar16;\n            bVar19 = *pbVar14 == *pbVar16;\n            pbVar14 = pbVar14 + (ulong)bVar20 * -2 + 1;\n            pbVar16 = pbVar16 + (ulong)bVar20 * -2 + 1;\n          } while (bVar19);\n          if (((!bVar18 && !bVar19) != bVar18) &&\n             (iVar5 = strcmp((char *)(byte *)param_2[lVar12],\"drain\"), iVar5 != 0)) {\n            bVar3 = false;\n          }\n          optind = 0;\n          uVar6 = 1;\n        }\n        goto LAB_00103893;\n      }\n      if (iVar5 == 0x61) {\n        bVar1 = true;\n        uVar17 = 1;\n      }\n      else {\n        if (iVar5 != 0x67) goto LAB_0010397b;\n        bVar2 = true;\n        uVar17 = 2;\n      }\n    }\n    if ((int)uVar6 < (int)optind) {\n      lVar11 = (long)(int)uVar6;\n      uVar10 = (optind - 1) - uVar6;\n      puVar8 = param_2 + lVar11 + lVar12;\n      do {\n        *puVar8 = 0;\n        puVar8 = puVar8 + 1;\n        uVar6 = uVar4;\n      } while (puVar8 != param_2 + (ulong)uVar10 + lVar11 + lVar12 + 1);\n    }\n    goto LAB_00103893;\n  }\n  if ((bVar1) && (bVar2)) {\n    uVar17 = dcgettext(0,\n                       \"the options for verbose and stty-readable output styles are\\nmutually exclusive\"\n                       ,5);\n                    /* WARNING: Subroutine does not return */\n    error(1,0,uVar17);\n  }\n  if (bVar3) {\n    if (local_58 != 0) goto LAB_00103a76;\n    local_58 = dcgettext(0,\"standard input\",5);\n    iVar5 = tcgetattr(0,(termios *)mode_7139);\n    if (iVar5 != 0) goto LAB_00103cca;\nLAB_00103b8f:\n    max_col = screen_columns();\n    current_col = 0;\n    display_settings_constprop_0(uVar17,local_58);\n  }\n  else {\n    if ((bVar1) || (bVar2)) {\n      uVar17 = dcgettext(0,\"when specifying an output style, modes may not be set\",5);\n                    /* WARNING: Subroutine does not return */\n      error(1,0,uVar17);\n    }\n    if (local_58 == 0) {\n      local_58 = dcgettext(0,\"standard input\",5);\n      apply_settings(1,local_58,param_2,param_1,check_mode_7170,&local_41,&local_42,in_R9);\n      puVar15 = mode_7139;\n      iVar5 = tcgetattr(0,(termios *)mode_7139);\n      if (iVar5 != 0) goto LAB_00103cca;\n    }\n    else {\n      apply_settings(1,local_58,param_2,param_1,check_mode_7170,&local_41,&local_42,uVar7);\nLAB_00103a76:\n      iVar5 = fd_reopen(0,local_58,0x800,0);\n      if (iVar5 < 0) {\n        uVar17 = quotearg_n_style_colon(0,3,local_58);\n        piVar9 = __errno_location();\n                    /* WARNING: Subroutine does not return */\n        error(1,*piVar9,\"%s\",uVar17);\n      }\n      uVar6 = rpl_fcntl(0,3);\n      if ((uVar6 == 0xffffffff) || (iVar5 = rpl_fcntl(0,4,uVar6 & 0xfffff7ff), iVar5 < 0)) {\n        uVar17 = quotearg_n_style_colon(0,3,local_58);\n        uVar7 = dcgettext(0,\"%s: couldn\\'t reset non-blocking mode\",5);\n        piVar9 = __errno_location();\n                    /* WARNING: Subroutine does not return */\n        error(1,*piVar9,uVar7,uVar17);\n      }\n      puVar15 = mode_7139;\n      iVar5 = tcgetattr(0,(termios *)mode_7139);\n      if (iVar5 != 0) {\nLAB_00103cca:\n        uVar17 = quotearg_n_style_colon(0,3,local_58);\n        piVar9 = __errno_location();\n                    /* WARNING: Subroutine does not return */\n        error(1,*piVar9,\"%s\",uVar17);\n      }\n      if (((bool)(bVar2 | bVar3)) || (bVar1)) goto LAB_00103b8f;\n    }\n    local_41 = '\\0';\n    local_42 = '\\0';\n    apply_settings(0,local_58,param_2,param_1,mode_7139,&local_41,&local_42,puVar15);\n    if (local_42 != '\\0') {\n      iVar5 = tcsetattr(0,tcsetattr_options,(termios *)mode_7139);\n      if (iVar5 != 0) {\n        uVar17 = quotearg_n_style_colon(0,3,local_58);\n        piVar9 = __errno_location();\n                    /* WARNING: Subroutine does not return */\n        error(1,*piVar9,\"%s\",uVar17);\n      }\n      iVar5 = tcgetattr(0,(termios *)new_mode_7178);\n      if (iVar5 != 0) {\n        uVar17 = quotearg_n_style_colon(0,3,local_58);\n        piVar9 = __errno_location();\n                    /* WARNING: Subroutine does not return */\n        error(1,*piVar9,\"%s\",uVar17);\n      }\n      iVar5 = memcmp(mode_7139,new_mode_7178,0x3c);\n      if ((iVar5 != 0) &&\n         ((new_mode_7178._8_4_ = new_mode_7178._8_4_ & 0xeff0ffff, local_41 != '\\0' ||\n          (iVar5 = memcmp(mode_7139,new_mode_7178,0x3c), iVar5 != 0)))) {\n        uVar17 = quotearg_n_style_colon(0,3,local_58);\n        uVar7 = dcgettext(0,\"%s: unable to perform all requested operations\",5);\n                    /* WARNING: Subroutine does not return */\n        error(1,0,uVar7,uVar17);\n      }\n    }\n  }\n  if (local_40 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return 0;\n}\n\n", 
    "00116178": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid __printf_chk(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __printf_chk@@GLIBC_2.3.4 */\n  halt_baddata();\n}\n\n", 
    "00116058": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid textdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* textdomain@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "001035b0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_close_00114eb8)();\n  return iVar1;\n}\n\n", 
    "001036d0": "\nvoid error(void)\n\n{\n  (*(code *)PTR_error_00114f48)();\n  return;\n}\n\n", 
    "00106d40": "\nundefined8 strcaseeq6(long param_1,undefined8 param_2,byte param_3,char param_4,char param_5)\n\n{\n  char cVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  \n  cVar1 = c_isupper((int)(char)param_3);\n  bVar2 = *(byte *)(param_1 + 6);\n  if (cVar1 != '\\0') {\n    bVar2 = bVar2 & 0xdf;\n  }\n  if (param_3 != bVar2) {\n    return 0;\n  }\n  if (param_3 == 0) {\n    return 1;\n  }\n  uVar3 = strcaseeq7(param_1,param_2,(int)param_4,(int)param_5);\n  return uVar3;\n}\n\n", 
    "00108dc0": "\nvoid quotearg_custom_mem(undefined8 param_1,undefined8 param_2,undefined8 param_3,undefined8 param_4\n                        )\n\n{\n  quotearg_n_custom_mem(0,param_1,param_2,param_3,param_4);\n  return;\n}\n\n", 
    "00116170": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nspeed_t cfgetospeed(termios *__termios_p)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* cfgetospeed@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "001037de": "\nvoid vasnprintf_cold(void)\n\n{\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n", 
    "00116050": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nspeed_t cfgetispeed(termios *__termios_p)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* cfgetispeed@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00103500": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = (*(code *)PTR_strlen_00114e60)();\n  return sVar1;\n}\n\n", 
    "00103620": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = (void *)(*(code *)PTR_memcpy_00114ef0)();\n  return pvVar1;\n}\n\n", 
    "00103540": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint dup2(int __fd,int __fd2)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_dup2_00114e80)();\n  return iVar1;\n}\n\n", 
    "00108a80": "\nvoid quotearg_n_style(undefined4 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  long in_FS_OFFSET;\n  undefined auStack_58 [56];\n  long local_20;\n  \n  local_20 = *(long *)(in_FS_OFFSET + 0x28);\n  quoting_options_from_style(auStack_58);\n  quotearg_n_options(param_1,param_3,0xffffffffffffffff,auStack_58);\n  if (local_20 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "00103660": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_fflush_00114f10)();\n  return iVar1;\n}\n\n", 
    "00104870": "\nvoid wrapf(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n          undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,\n          undefined8 param_9,undefined8 param_10,undefined8 param_11,undefined8 param_12,\n          undefined8 param_13,undefined8 param_14)\n\n{\n  char in_AL;\n  int iVar1;\n  long in_FS_OFFSET;\n  char *local_e0;\n  undefined4 local_d8;\n  undefined4 local_d4;\n  undefined *local_d0;\n  undefined *local_c8;\n  long local_c0;\n  undefined local_b8 [8];\n  undefined8 local_b0;\n  undefined8 local_a8;\n  undefined8 local_a0;\n  undefined8 local_98;\n  undefined8 local_90;\n  undefined4 local_88;\n  undefined4 local_78;\n  undefined4 local_68;\n  undefined4 local_58;\n  undefined4 local_48;\n  undefined4 local_38;\n  undefined4 local_28;\n  undefined4 local_18;\n  \n  if (in_AL != '\\0') {\n    local_88 = param_1;\n    local_78 = param_2;\n    local_68 = param_3;\n    local_58 = param_4;\n    local_48 = param_5;\n    local_38 = param_6;\n    local_28 = param_7;\n    local_18 = param_8;\n  }\n  local_c0 = *(long *)(in_FS_OFFSET + 0x28);\n  local_d0 = &stack0x00000008;\n  local_d8 = 8;\n  local_c8 = local_b8;\n  local_d4 = 0x30;\n  local_b0 = param_10;\n  local_a8 = param_11;\n  local_a0 = param_12;\n  local_98 = param_13;\n  local_90 = param_14;\n  iVar1 = rpl_vasprintf(&local_e0,param_9,&local_d8);\n  if (iVar1 < 0) {\n                    /* WARNING: Subroutine does not return */\n    xalloc_die();\n  }\n  if (0 < current_col) {\n    if (max_col - current_col < iVar1) {\n      putchar_unlocked(10);\n      current_col = 0;\n    }\n    else {\n      putchar_unlocked(0x20);\n      current_col = current_col + 1;\n    }\n  }\n  fputs_unlocked(local_e0,stdout);\n  free(local_e0);\n  current_col = current_col + iVar1;\n  if (local_c0 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "001161e8": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint mbsinit(mbstate_t *__ps)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* mbsinit@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00103420": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid free(void *__ptr)\n\n{\n  (*(code *)PTR_free_00114df0)();\n  return;\n}\n\n", 
    "001160c8": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __assert_fail@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00103780": "\nvoid __fprintf_chk(void)\n\n{\n  (*(code *)PTR___fprintf_chk_00114fa0)();\n  return;\n}\n\n", 
    "00108550": "\nundefined1 *\nquotearg_n_options(int param_1,undefined8 param_2,undefined8 param_3,undefined4 *param_4)\n\n{\n  long lVar1;\n  int iVar2;\n  uint uVar3;\n  undefined4 uVar4;\n  ulong uVar5;\n  int *piVar6;\n  undefined1 (*pauVar7) [16];\n  ulong uVar8;\n  undefined1 *__ptr;\n  \n  piVar6 = __errno_location();\n  iVar2 = *piVar6;\n  if (param_1 < 0) {\n                    /* WARNING: Subroutine does not return */\n    abort();\n  }\n  pauVar7 = (undefined1 (*) [16])slotvec;\n  if (nslots <= param_1) {\n    if (param_1 == 0x7fffffff) {\n                    /* WARNING: Subroutine does not return */\n      xalloc_die();\n    }\n    if (slotvec == slotvec0) {\n      pauVar7 = (undefined1 (*) [16])xrealloc(0);\n      slotvec = (undefined *)pauVar7;\n      *pauVar7 = slotvec0;\n    }\n    else {\n      pauVar7 = (undefined1 (*) [16])xrealloc(slotvec);\n      slotvec = (undefined *)pauVar7;\n    }\n    memset(pauVar7[nslots],0,(long)((param_1 + 1) - nslots) << 4);\n    nslots = param_1 + 1;\n  }\n  uVar3 = param_4[1];\n  pauVar7 = pauVar7[param_1];\n  uVar5 = *(ulong *)*pauVar7;\n  __ptr = *(undefined1 **)(*pauVar7 + 8);\n  uVar8 = quotearg_buffer_restyled\n                    (__ptr,uVar5,param_2,param_3,*param_4,uVar3 | 1,param_4 + 2,\n                     *(undefined8 *)(param_4 + 10),*(undefined8 *)(param_4 + 0xc));\n  if (uVar5 <= uVar8) {\n    lVar1 = uVar8 + 1;\n    *(long *)*pauVar7 = lVar1;\n    if (__ptr != slot0) {\n      free(__ptr);\n    }\n    __ptr = (undefined1 *)xcharalloc(lVar1);\n    uVar4 = *param_4;\n    *(undefined1 **)(*pauVar7 + 8) = __ptr;\n    quotearg_buffer_restyled\n              (__ptr,lVar1,param_2,param_3,uVar4,uVar3 | 1,param_4 + 2,*(undefined8 *)(param_4 + 10)\n               ,*(undefined8 *)(param_4 + 0xc));\n  }\n  *piVar6 = iVar2;\n  return __ptr;\n}\n\n", 
    "00104070": "\nvoid emit_mandatory_arg_note(void)\n\n{\n  char *__s;\n  FILE *__stream;\n  \n  __stream = stdout;\n  __s = (char *)dcgettext(0,\n                          \"\\nMandatory arguments to long options are mandatory for short options too.\\n\"\n                          ,5);\n  fputs_unlocked(__s,__stream);\n  return;\n}\n\n", 
    "00106be0": "\nint * quoting_options_from_style(int *param_1,int param_2)\n\n{\n  if (param_2 != 10) {\n    *param_1 = param_2;\n    param_1[1] = 0;\n    *(undefined8 *)(param_1 + 2) = 0;\n    *(undefined8 *)(param_1 + 4) = 0;\n    *(undefined8 *)(param_1 + 6) = 0;\n    *(undefined8 *)(param_1 + 8) = 0;\n    *(undefined8 *)(param_1 + 10) = 0;\n    *(undefined8 *)(param_1 + 0xc) = 0;\n    return param_1;\n  }\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n", 
    "001161e0": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid _ITM_registerTMCloneTable(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "001160c0": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* lseek@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00108e00": "\nvoid quote_n(undefined8 param_1,undefined8 param_2)\n\n{\n  quote_n_mem(param_1,param_2,0xffffffffffffffff);\n  return;\n}\n\n", 
    "00116138": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint fileno(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fileno@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00116018": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid abort(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* abort@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "0010a2d0": "\nuint c_isblank(int param_1,undefined8 param_2,uint param_3)\n\n{\n  uint in_EAX;\n  \n  return in_EAX & 0xffffff00 | (uint)(param_1 == 0x20) | param_3 & 0xffffff00 | (uint)(param_1 == 9)\n  ;\n}\n\n", 
    "00109290": "\nvoid version_etc_va(void)\n\n{\n  uint uVar1;\n  long *plVar2;\n  long lVar3;\n  uint *in_R8;\n  long lVar4;\n  long in_FS_OFFSET;\n  long local_68 [11];\n  long local_10;\n  \n  lVar4 = 0;\n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  do {\n    uVar1 = *in_R8;\n    if (uVar1 < 0x30) {\n      *in_R8 = uVar1 + 8;\n      lVar3 = *(long *)((ulong)uVar1 + *(long *)(in_R8 + 4));\n      local_68[lVar4] = lVar3;\n    }\n    else {\n      plVar2 = *(long **)(in_R8 + 2);\n      *(long **)(in_R8 + 2) = plVar2 + 1;\n      lVar3 = *plVar2;\n      local_68[lVar4] = lVar3;\n    }\n  } while ((lVar3 != 0) && (lVar4 = lVar4 + 1, lVar4 != 10));\n  version_etc_arn();\n  if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "00103f40": "\nundefined4 to_uchar(undefined4 param_1)\n\n{\n  return param_1;\n}\n\n", 
    "001034c0": "\nvoid bindtextdomain(void)\n\n{\n  (*(code *)PTR_bindtextdomain_00114e40)();\n  return;\n}\n\n", 
    "001069d0": "\nvoid close_stdout_set_file_name(undefined8 param_1)\n\n{\n  file_name = param_1;\n  return;\n}\n\n", 
    "001035e0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint ferror_unlocked(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_ferror_unlocked_00114ed0)();\n  return iVar1;\n}\n\n", 
    "00116148": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint fflush(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fflush@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00116020": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint * __errno_location(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __errno_location@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00106c50": "\nundefined8 strcaseeq8(long param_1,undefined8 param_2,byte param_3)\n\n{\n  char cVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  \n  cVar1 = c_isupper((int)(char)param_3);\n  bVar2 = *(byte *)(param_1 + 8);\n  if (cVar1 != '\\0') {\n    bVar2 = bVar2 & 0xdf;\n  }\n  if (param_3 != bVar2) {\n    return 0;\n  }\n  if (param_3 == 0) {\n    return 1;\n  }\n  uVar3 = strcaseeq9(param_1,param_2);\n  return uVar3;\n}\n\n", 
    "00104a70": "\nvoid display_window_size(char param_1,undefined8 param_2)\n\n{\n  int iVar1;\n  int *piVar2;\n  undefined8 uVar3;\n  undefined8 uVar4;\n  long in_FS_OFFSET;\n  undefined2 local_28;\n  undefined2 local_26;\n  long local_20;\n  \n  local_20 = *(long *)(in_FS_OFFSET + 0x28);\n  iVar1 = get_win_size(0,&local_28);\n  if (iVar1 == 0) {\n    if (param_1 == '\\0') {\n      wrapf(\"%d %d\\n\",local_28,local_26);\n      current_col = 0;\n    }\n    else {\n      wrapf(\"rows %d; columns %d;\",local_28,local_26);\n    }\n  }\n  else {\n    piVar2 = __errno_location();\n    if (*piVar2 != 0x16) {\n      uVar3 = quotearg_n_style_colon(0,3,param_2);\n                    /* WARNING: Subroutine does not return */\n      error(1,*piVar2,\"%s\",uVar3);\n    }\n    if (param_1 == '\\0') {\n      uVar3 = quotearg_n_style_colon(0,3,param_2);\n      uVar4 = dcgettext(0,\"%s: no size information for this device\",5);\n                    /* WARNING: Subroutine does not return */\n      error(1,0,uVar4,uVar3);\n    }\n  }\n  if (local_20 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "00116140": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid * malloc(size_t __size)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* malloc@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "0010a340": "\nbool c_isprint(int param_1)\n\n{\n  return param_1 - 0x20U < 0x5f;\n}\n\n", 
    "00103650": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = (void *)(*(code *)PTR_malloc_00114f08)();\n  return pvVar1;\n}\n\n", 
    "00103770": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = (*(code *)PTR_fwrite_00114f98)();\n  return sVar1;\n}\n\n", 
    "001161f8": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nushort ** __ctype_b_loc(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __ctype_b_loc@@GLIBC_2.3 */\n  halt_baddata();\n}\n\n", 
    "00103410": "\nvoid __snprintf_chk(void)\n\n{\n  (*(code *)PTR___snprintf_chk_00114de8)();\n  return;\n}\n\n", 
    "001160d8": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint ioctl(int __fd,ulong __request,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ioctl@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00103530": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nsize_t mbrtowc(wchar_t *__pwc,char *__s,size_t __n,mbstate_t *__p)\n\n{\n  size_t sVar1;\n  \n  sVar1 = (*(code *)PTR_mbrtowc_00114e78)();\n  return sVar1;\n}\n\n", 
    "001096c0": "\nulong xnumtoumax(undefined8 param_1,undefined4 param_2,ulong param_3,ulong param_4,\n                undefined8 param_5,undefined8 param_6,int param_7)\n\n{\n  int iVar1;\n  int *piVar2;\n  undefined8 uVar3;\n  long in_FS_OFFSET;\n  ulong local_48;\n  long local_40;\n  \n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  iVar1 = xstrtoumax(param_1,0,param_2,&local_48);\n  if (iVar1 == 0) {\n    if ((param_3 <= local_48) && (local_48 <= param_4)) {\n      if (local_40 == *(long *)(in_FS_OFFSET + 0x28)) {\n        return local_48;\n      }\n                    /* WARNING: Subroutine does not return */\n      __stack_chk_fail();\n    }\n    piVar2 = __errno_location();\n    *piVar2 = (-(uint)(local_48 < 0x40000000) & 0xffffffd7) + 0x4b;\n  }\n  else {\n    piVar2 = __errno_location();\n    if (iVar1 == 1) {\n      *piVar2 = 0x4b;\n    }\n    else if (iVar1 == 3) {\n      *piVar2 = 0;\n    }\n  }\n  uVar3 = quote(param_1);\n  iVar1 = *piVar2;\n  if (iVar1 == 0x16) {\n    iVar1 = 0;\n  }\n  if (param_7 == 0) {\n    param_7 = 1;\n  }\n                    /* WARNING: Subroutine does not return */\n  error(param_7,iVar1,\"%s: %s\",param_6,uVar3);\n}\n\n", 
    "001161f0": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint iswprint(wint_t __wc)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* iswprint@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "001160d0": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid * memset(void *__s,int __c,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memset@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00108e10": "\nvoid quote(undefined8 param_1)\n\n{\n  quote_n(0,param_1);\n  return;\n}\n\n", 
    "00116028": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint strncmp(char *__s1,char *__s2,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strncmp@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "001035d0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint fputs_unlocked(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_fputs_unlocked_00114ec8)();\n  return iVar1;\n}\n\n", 
    "001036f0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint tcsetattr(int __fd,int __optional_actions,termios *__termios_p)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_tcsetattr_00114f58)();\n  return iVar1;\n}\n\n", 
    "00103f30": "\nvoid frame_dummy(void)\n\n{\n  register_tm_clones();\n  return;\n}\n\n", 
    "00116158": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid __freading(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __freading@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "001034b0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_fclose_00114e38)();\n  return iVar1;\n}\n\n", 
    "00116038": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid _exit(int __status)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* _exit@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00106b20": "\nvoid set_program_name(char *param_1)\n\n{\n  char *pcVar1;\n  long lVar2;\n  ulong uVar3;\n  byte *pbVar4;\n  byte *pbVar5;\n  bool bVar6;\n  bool bVar7;\n  byte bVar8;\n  \n  bVar8 = 0;\n  if (param_1 == (char *)0x0) {\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\",1,0x37,stderr);\n                    /* WARNING: Subroutine does not return */\n    abort();\n  }\n  pcVar1 = strrchr(param_1,0x2f);\n  if (pcVar1 != (char *)0x0) {\n    program_name = pcVar1 + 1;\n    uVar3 = (long)program_name - (long)param_1;\n    bVar6 = uVar3 < 6;\n    bVar7 = uVar3 == 6;\n    if (6 < (long)uVar3) {\n      lVar2 = 7;\n      pbVar4 = (byte *)(pcVar1 + -6);\n      pbVar5 = (byte *)\"/.libs/\";\n      do {\n        if (lVar2 == 0) break;\n        lVar2 = lVar2 + -1;\n        bVar6 = *pbVar4 < *pbVar5;\n        bVar7 = *pbVar4 == *pbVar5;\n        pbVar4 = pbVar4 + (ulong)bVar8 * -2 + 1;\n        pbVar5 = pbVar5 + (ulong)bVar8 * -2 + 1;\n      } while (bVar7);\n      if ((!bVar6 && !bVar7) == bVar6) {\n        if (((pcVar1[1] != 'l') || (pcVar1[2] != 't')) || (pcVar1[3] != '-')) {\n          program_invocation_name = program_name;\n          return;\n        }\n        param_1 = pcVar1 + 4;\n        program_invocation_short_name = param_1;\n      }\n    }\n  }\n  program_name = param_1;\n  program_invocation_name = param_1;\n  return;\n}\n\n", 
    "00106e80": "\nundefined8\nstrcaseeq4(long param_1,undefined8 param_2,byte param_3,char param_4,char param_5,char param_6,\n          char param_7)\n\n{\n  char cVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  \n  cVar1 = c_isupper((int)(char)param_3);\n  bVar2 = *(byte *)(param_1 + 4);\n  if (cVar1 != '\\0') {\n    bVar2 = bVar2 & 0xdf;\n  }\n  if (param_3 != bVar2) {\n    return 0;\n  }\n  if (param_3 == 0) {\n    return 1;\n  }\n  uVar3 = strcaseeq5(param_1,param_2,(int)param_4,(int)param_5,(int)param_6,(int)param_7);\n  return uVar3;\n}\n\n", 
    "00108da0": "\nvoid quotearg_custom(undefined8 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  quotearg_n_custom(0,param_1,param_2,param_3);\n  return;\n}\n\n", 
    "00116150": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nchar * nl_langinfo(nl_item __item)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* nl_langinfo@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00109500": "\nvoid xnrealloc(undefined8 param_1,ulong param_2,ulong param_3)\n\n{\n  if ((-1 < SUB168(ZEXT816(param_2) * ZEXT816(param_3),0)) &&\n     (SUB168(ZEXT816(param_2) * ZEXT816(param_3) >> 0x40,0) == 0)) {\n    xrealloc();\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  xalloc_die();\n}\n\n", 
    "00116030": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid _ITM_deregisterTMCloneTable(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "00103400": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nchar * getenv(char *__name)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = (char *)(*(code *)PTR_getenv_00114de0)();\n  return pcVar1;\n}\n\n", 
    "0010a350": "\nulong c_ispunct(int param_1)\n\n{\n  ulong in_RAX;\n  \n  if (0x60 < param_1) {\n    return in_RAX & 0xffffffffffffff00 | (ulong)(param_1 - 0x7bU < 4);\n  }\n  if (param_1 < 0x5b) {\n    if (param_1 < 0x30) {\n      return in_RAX & 0xffffffffffffff00 | (ulong)(0x20 < param_1);\n    }\n    return in_RAX & 0xffffffffffffff00 | (ulong)(param_1 - 0x3aU < 7);\n  }\n  return 1;\n}\n\n", 
    "00108b80": "\nvoid quotearg_char_mem(undefined8 param_1,undefined8 param_2,char param_3,undefined8 param_4)\n\n{\n  undefined8 *puVar1;\n  long in_FS_OFFSET;\n  undefined8 local_48;\n  undefined8 uStack_40;\n  undefined8 local_38;\n  undefined8 uStack_30;\n  undefined8 local_28;\n  undefined8 uStack_20;\n  undefined8 local_18;\n  long local_10;\n  \n  puVar1 = &local_48;\n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  local_48 = default_quoting_options._0_8_;\n  uStack_40 = default_quoting_options._8_8_;\n  local_38 = default_quoting_options._16_8_;\n  uStack_30 = default_quoting_options._24_8_;\n  local_28 = default_quoting_options._32_8_;\n  uStack_20 = default_quoting_options._40_8_;\n  local_18 = default_quoting_options._48_8_;\n  set_char_quoting(&local_48,(int)param_3,1,param_4,param_1,param_2);\n  quotearg_n_options(0,param_1,param_2,puVar1);\n  if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "00108a60": "\nvoid quotearg(undefined8 param_1)\n\n{\n  quotearg_n(0,param_1);\n  return;\n}\n\n", 
    "00108730": "\nundefined4 get_quoting_style(undefined1 *param_1)\n\n{\n  if ((undefined4 *)param_1 == (undefined4 *)0x0) {\n    param_1 = default_quoting_options;\n  }\n  return *(undefined4 *)param_1;\n}\n\n", 
    "001161c0": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid __cxa_atexit(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __cxa_atexit@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "001160a0": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nsize_t mbrtowc(wchar_t *__pwc,char *__s,size_t __n,mbstate_t *__p)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* mbrtowc@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "001037c5": "\nvoid quoting_options_from_style_cold(void)\n\n{\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n", 
    "001036a0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = (char *)(*(code *)PTR_setlocale_00114f30)();\n  return pcVar1;\n}\n\n", 
    "001037c0": "\nvoid mode_type_flag_cold(void)\n\n{\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n", 
    "00116118": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid __gmon_start__(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n", 
    "0010a3d0": "\nulong c_isxdigit(int param_1)\n\n{\n  ulong uVar1;\n  \n  if (param_1 - 0x30U < 0x37) {\n    uVar1 = 1L << ((byte)(param_1 - 0x30U) & 0x3f);\n    return uVar1 & 0xffffffffffffff00 | (ulong)((uVar1 & 0x7e0000007e03ff) != 0);\n  }\n  return 0;\n}\n\n", 
    "00109270": "\nvoid version_etc_ar(void)\n\n{\n  long lVar1;\n  long *in_R8;\n  long lVar2;\n  \n  lVar2 = 0;\n  lVar1 = *in_R8;\n  while (lVar1 != 0) {\n    lVar2 = lVar2 + 1;\n    lVar1 = in_R8[lVar2];\n  }\n  version_etc_arn();\n  return;\n}\n\n", 
    "001087d0": "\nvoid set_custom_quoting(undefined1 *param_1,long param_2,long param_3)\n\n{\n  if ((undefined4 *)param_1 == (undefined4 *)0x0) {\n    param_1 = default_quoting_options;\n  }\n  *(undefined4 *)param_1 = 10;\n  if ((param_2 != 0) && (param_3 != 0)) {\n    *(long *)((long)param_1 + 0x28) = param_2;\n    *(long *)((long)param_1 + 0x30) = param_3;\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n", 
    "00116120": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strtol@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00116000": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nchar * getenv(char *__name)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getenv@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "0010a440": "\nint c_strcasecmp(undefined *param_1,undefined *param_2)\n\n{\n  byte bVar1;\n  byte bVar2;\n  int iVar3;\n  \n  iVar3 = 0;\n  if (param_1 != param_2) {\n    do {\n      bVar1 = c_tolower(*param_1);\n      bVar2 = c_tolower(*param_2);\n      if (bVar1 == 0) break;\n      param_1 = param_1 + 1;\n      param_2 = param_2 + 1;\n    } while (bVar1 == bVar2);\n    iVar3 = (uint)bVar1 - (uint)bVar2;\n  }\n  return iVar3;\n}\n\n", 
    "001161c8": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid exit(int __status)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* exit@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "0010a320": "\nbool c_isgraph(int param_1)\n\n{\n  return param_1 - 0x21U < 0x5e;\n}\n\n", 
    "001160a8": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint dup2(int __fd,int __fd2)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* dup2@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00103710": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint fseeko(FILE *__stream,__off_t __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_fseeko_00114f68)();\n  return iVar1;\n}\n\n", 
    "0010a560": "\nchar * locale_charset(void)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = nl_langinfo(0xe);\n  if (pcVar1 != (char *)0x0) {\n    if (*pcVar1 == '\\0') {\n      pcVar1 = \"ASCII\";\n    }\n    return pcVar1;\n  }\n  return \"ASCII\";\n}\n\n", 
    "00108a70": "\nvoid quotearg_mem(undefined8 param_1,undefined8 param_2)\n\n{\n  quotearg_n_mem(0,param_1,param_2);\n  return;\n}\n\n", 
    "001161d8": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid __fprintf_chk(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __fprintf_chk@@GLIBC_2.3.4 */\n  halt_baddata();\n}\n\n", 
    "001160b0": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nchar * strchr(char *__s,int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strchr@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00106ff0": "\nundefined8\nstrcaseeq2(long param_1,undefined8 param_2,byte param_3,char param_4,char param_5,char param_6,\n          char param_7)\n\n{\n  char cVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  \n  cVar1 = c_isupper((int)(char)param_3);\n  bVar2 = *(byte *)(param_1 + 2);\n  if (cVar1 != '\\0') {\n    bVar2 = bVar2 & 0xdf;\n  }\n  if (param_3 != bVar2) {\n    return 0;\n  }\n  if (param_3 == 0) {\n    return 1;\n  }\n  uVar3 = strcaseeq3(param_1,param_2,(int)param_4,(int)param_5,(int)param_6,(int)param_7);\n  return uVar3;\n}\n\n", 
    "00104120": "\nulong screen_columns(void)\n\n{\n  int iVar1;\n  char *pcVar2;\n  ulong uVar3;\n  long in_FS_OFFSET;\n  ulong local_20;\n  undefined local_18 [2];\n  ushort local_16;\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  iVar1 = get_win_size(1,local_18);\n  if ((iVar1 != 0) || (uVar3 = (ulong)local_16, local_16 == 0)) {\n    pcVar2 = getenv(\"COLUMNS\");\n    if (pcVar2 != (char *)0x0) {\n      iVar1 = xstrtol(pcVar2,0,0,&local_20,\"\");\n      if ((iVar1 == 0) && (uVar3 = local_20, local_20 - 1 < 0x7fffffff)) goto LAB_00104195;\n    }\n    uVar3 = 0x50;\n  }\nLAB_00104195:\n  if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return uVar3;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "001097c0": "\nvoid xdectoumax(undefined8 param_1,undefined8 param_2,undefined8 param_3,undefined8 param_4,\n               undefined8 param_5,undefined8 param_6)\n\n{\n  xnumtoumax(param_1,10,param_2,param_3,param_4,param_5,param_6);\n  return;\n}\n\n", 
    "001161d0": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fwrite@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "001037b0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nushort ** __ctype_b_loc(void)\n\n{\n  ushort **ppuVar1;\n  \n  ppuVar1 = (ushort **)(*(code *)PTR___ctype_b_loc_00114fb8)();\n  return ppuVar1;\n}\n\n", 
    "00116128": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memcpy@@GLIBC_2.14 */\n  halt_baddata();\n}\n\n", 
    "00116008": "\n/* WARNING: Control flow encountered bad instruction data */\n\nvoid __snprintf_chk(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __snprintf_chk@@GLIBC_2.3.4 */\n  halt_baddata();\n}\n\n", 
    "0010a2c0": "\nbool c_isascii(uint param_1)\n\n{\n  return param_1 < 0x80;\n}\n\n", 
    "00116130": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint putchar_unlocked(int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* putchar_unlocked@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00116010": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid free(void *__ptr)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* free@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "001040a0": "\nundefined4 string_to_baud(char *param_1)\n\n{\n  int iVar1;\n  char **ppcVar2;\n  int iVar3;\n  char *__s2;\n  \n  __s2 = \"0\";\n  iVar3 = 0;\n  ppcVar2 = (char **)(speeds + 0x18);\n  do {\n    iVar1 = strcmp(param_1,__s2);\n    if (iVar1 == 0) {\n      return *(undefined4 *)(speeds + (long)iVar3 * 0x18 + 8);\n    }\n    __s2 = *ppcVar2;\n    ppcVar2 = ppcVar2 + 3;\n    iVar3 = iVar3 + 1;\n  } while (__s2 != (char *)0x0);\n  return 0xffffffff;\n}\n\n", 
    "0010a690": "\nint rpl_fseeko(FILE *param_1,__off_t param_2,int param_3)\n\n{\n  int iVar1;\n  __off_t _Var2;\n  \n  if (((param_1->_IO_read_end == param_1->_IO_read_ptr) &&\n      (param_1->_IO_write_ptr == param_1->_IO_write_base)) &&\n     (param_1->_IO_save_base == (char *)0x0)) {\n    iVar1 = fileno(param_1);\n    _Var2 = lseek(iVar1,param_2,param_3);\n    if (_Var2 == -1) {\n      iVar1 = -1;\n    }\n    else {\n      param_1->_flags = param_1->_flags & 0xffffffef;\n      param_1->_offset = _Var2;\n      iVar1 = 0;\n    }\n    return iVar1;\n  }\n  iVar1 = fseeko(param_1,param_2,param_3);\n  return iVar1;\n}\n\n", 
    "00109840": "\nuint bkm_scale_by_power(undefined8 param_1,uint param_2,int param_3)\n\n{\n  uint uVar1;\n  uint uVar2;\n  ulong uVar3;\n  \n  uVar3 = (ulong)param_2;\n  param_3 = param_3 + -1;\n  uVar2 = 0;\n  do {\n    uVar1 = bkm_scale(param_1,uVar3 & 0xffffffff);\n    param_3 = param_3 + -1;\n    uVar2 = uVar2 | uVar1;\n  } while (param_3 != -1);\n  return uVar2;\n}\n\n", 
    "0010a330": "\nbool c_islower(int param_1)\n\n{\n  return param_1 - 0x61U < 0x1a;\n}\n\n", 
    "001160b8": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nchar * strrchr(char *__s,int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strrchr@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00103700": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_open_00114f60)();\n  return iVar1;\n}\n\n", 
    "00103740": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n  ulong uVar1;\n  \n  uVar1 = (*(code *)PTR_strtoul_00114f80)();\n  return uVar1;\n}\n\n", 
    "0010a420": "\nint c_toupper(int param_1)\n\n{\n  if (param_1 - 0x61U < 0x1a) {\n    param_1 = param_1 + -0x20;\n  }\n  return param_1;\n}\n\n", 
    "0010c720": "\nint atexit(__func *__func)\n\n{\n  int iVar1;\n  \n  iVar1 = __cxa_atexit(__func,0,__dso_handle);\n  return iVar1;\n}\n\n", 
    "00108b60": "\nvoid quotearg_style_mem(undefined4 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  quotearg_n_style_mem(0,param_1,param_2,param_3);\n  return;\n}\n\n", 
    "00109c50": "\nuint xstrtoumax(byte *param_1,byte **param_2,uint param_3,uintmax_t *param_4,char *param_5)\n\n{\n  byte bVar1;\n  uint uVar2;\n  int *piVar3;\n  ushort **ppuVar4;\n  byte *pbVar5;\n  uintmax_t uVar6;\n  char *pcVar7;\n  int iVar8;\n  undefined8 uVar9;\n  uint uVar10;\n  byte bVar11;\n  long in_FS_OFFSET;\n  byte *local_50;\n  uintmax_t local_48;\n  long local_40;\n  \n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  if (0x24 < param_3) {\n                    /* WARNING: Subroutine does not return */\n    __assert_fail(\"0 <= strtol_base && strtol_base <= 36\",\"lib/xstrtol.c\",0x60,\"xstrtoumax\");\n  }\n  if (param_2 == (byte **)0x0) {\n    param_2 = &local_50;\n  }\n  piVar3 = __errno_location();\n  *piVar3 = 0;\n  bVar11 = *param_1;\n  ppuVar4 = __ctype_b_loc();\n  pbVar5 = param_1;\n  while ((*(byte *)((long)*ppuVar4 + (ulong)bVar11 * 2 + 1) & 0x20) != 0) {\n    bVar11 = pbVar5[1];\n    pbVar5 = pbVar5 + 1;\n  }\n  if (bVar11 != 0x2d) {\n    uVar6 = strtoumax((char *)param_1,(char **)param_2,param_3);\n    pbVar5 = *param_2;\n    local_48 = uVar6;\n    if (pbVar5 != param_1) {\n      if (*piVar3 == 0) {\n        uVar10 = 0;\n      }\n      else {\n        uVar10 = 1;\n        if (*piVar3 != 0x22) goto LAB_00109d4b;\n      }\n      if ((param_5 != (char *)0x0) && (bVar11 = *pbVar5, bVar11 != 0)) {\n        iVar8 = (int)(char)bVar11;\nLAB_00109d8c:\n        pcVar7 = strchr(param_5,iVar8);\n        if (pcVar7 == (char *)0x0) {\nswitchD_00109de0_caseD_43:\n          uVar10 = uVar10 | 2;\n          *param_4 = local_48;\n          goto LAB_00109d12;\n        }\n        switch(bVar11) {\n        case 0x45:\n        case 0x47:\n        case 0x4b:\n        case 0x4d:\n        case 0x50:\n        case 0x54:\n        case 0x59:\n        case 0x5a:\n        case 0x67:\n        case 0x6b:\n        case 0x6d:\n        case 0x74:\n          pcVar7 = strchr(param_5,0x30);\n          if (pcVar7 == (char *)0x0) goto switchD_00109db6_caseD_46;\n          bVar1 = pbVar5[1];\n          if (bVar1 == 0x44) {\n            iVar8 = 2;\n            uVar9 = 1000;\n          }\n          else if (bVar1 == 0x69) {\n            uVar9 = 0x400;\n            iVar8 = (pbVar5[2] == 0x42) + 1 + (uint)(pbVar5[2] == 0x42);\n          }\n          else {\n            iVar8 = (bVar1 == 0x42) + 1;\n            uVar9 = 0x400;\n            if (bVar1 == 0x42) {\n              uVar9 = 1000;\n            }\n          }\n          break;\n        default:\nswitchD_00109db6_caseD_46:\n          iVar8 = 1;\n          uVar9 = 0x400;\n        }\n        switch(bVar11) {\n        case 0x42:\n          uVar2 = bkm_scale(&local_48,0x400);\n          pbVar5 = *param_2;\n          uVar10 = uVar10 | uVar2;\n          break;\n        default:\n          goto switchD_00109de0_caseD_43;\n        case 0x45:\n          uVar2 = bkm_scale_by_power(&local_48,uVar9,6);\n          pbVar5 = *param_2;\n          uVar10 = uVar10 | uVar2;\n          break;\n        case 0x47:\n        case 0x67:\n          uVar2 = bkm_scale_by_power(&local_48,uVar9,3);\n          pbVar5 = *param_2;\n          uVar10 = uVar10 | uVar2;\n          break;\n        case 0x4b:\n        case 0x6b:\n          uVar2 = bkm_scale_by_power(&local_48,uVar9,1);\n          pbVar5 = *param_2;\n          uVar10 = uVar10 | uVar2;\n          break;\n        case 0x4d:\n        case 0x6d:\n          uVar2 = bkm_scale_by_power(&local_48,uVar9,2);\n          pbVar5 = *param_2;\n          uVar10 = uVar10 | uVar2;\n          break;\n        case 0x50:\n          uVar2 = bkm_scale_by_power(&local_48,uVar9,5);\n          pbVar5 = *param_2;\n          uVar10 = uVar10 | uVar2;\n          break;\n        case 0x54:\n        case 0x74:\n          uVar2 = bkm_scale_by_power(&local_48,uVar9,4);\n          pbVar5 = *param_2;\n          uVar10 = uVar10 | uVar2;\n          break;\n        case 0x59:\n          uVar2 = bkm_scale_by_power(&local_48,uVar9,8);\n          pbVar5 = *param_2;\n          uVar10 = uVar10 | uVar2;\n          break;\n        case 0x5a:\n          uVar2 = bkm_scale_by_power(&local_48,uVar9,7);\n          pbVar5 = *param_2;\n          uVar10 = uVar10 | uVar2;\n          break;\n        case 0x62:\n          uVar2 = bkm_scale(&local_48,0x200);\n          pbVar5 = *param_2;\n          uVar10 = uVar10 | uVar2;\n          break;\n        case 99:\n          break;\n        case 0x77:\n          uVar2 = bkm_scale(&local_48,2);\n          pbVar5 = *param_2;\n          uVar10 = uVar10 | uVar2;\n        }\n        uVar6 = local_48;\n        *param_2 = pbVar5 + iVar8;\n        if (pbVar5[iVar8] != 0) {\n          uVar10 = uVar10 | 2;\n        }\n      }\n      *param_4 = uVar6;\n      goto LAB_00109d12;\n    }\n    if ((param_5 != (char *)0x0) && (bVar11 = *param_1, bVar11 != 0)) {\n      iVar8 = (int)(char)bVar11;\n      pcVar7 = strchr(param_5,iVar8);\n      if (pcVar7 != (char *)0x0) {\n        local_48 = 1;\n        uVar10 = 0;\n        goto LAB_00109d8c;\n      }\n    }\n  }\nLAB_00109d4b:\n  uVar10 = 4;\nLAB_00109d12:\n  if (local_40 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return uVar10;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", 
    "00108750": "\nvoid set_quoting_style(undefined1 *param_1,undefined4 param_2)\n\n{\n  if ((undefined4 *)param_1 == (undefined4 *)0x0) {\n    param_1 = default_quoting_options;\n  }\n  *(undefined4 *)param_1 = param_2;\n  return;\n}\n\n", 
    "001161a0": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint fseeko(FILE *__stream,__off_t __off,int __whence)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fseeko@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00108990": "\nvoid quotearg_free(void)\n\n{\n  void **ppvVar1;\n  void *__ptr;\n  undefined *__ptr_00;\n  void **ppvVar2;\n  \n  __ptr_00 = slotvec;\n  if (1 < nslots) {\n    ppvVar2 = (void **)(slotvec + 0x18);\n    ppvVar1 = (void **)(slotvec + (ulong)(nslots - 2) * 0x10 + 0x28);\n    do {\n      __ptr = *ppvVar2;\n      ppvVar2 = ppvVar2 + 2;\n      free(__ptr);\n    } while (ppvVar2 != ppvVar1);\n  }\n  if (*(undefined1 **)(__ptr_00 + 8) != slot0) {\n    free(*(undefined1 **)(__ptr_00 + 8));\n    slotvec0._8_8_ = slot0;\n    slotvec0._0_8_ = 0x100;\n  }\n  if (__ptr_00 != slotvec0) {\n    free(__ptr_00);\n    slotvec = slotvec0;\n  }\n  nslots = 1;\n  return;\n}\n\n", 
    "001035a0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint ioctl(int __fd,ulong __request,...)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_ioctl_00114eb0)();\n  return iVar1;\n}\n\n", 
    "001036c0": "\nvoid __printf_chk(void)\n\n{\n  (*(code *)PTR___printf_chk_00114f40)();\n  return;\n}\n\n", 
    "0010a3a0": "\nbool c_isspace(int param_1)\n\n{\n  if (param_1 < 0xe) {\n    return 8 < param_1;\n  }\n  return param_1 == 0x20;\n}\n\n", 
    "0010c6a0": "\nvoid __libc_csu_init(EVP_PKEY_CTX *param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  long lVar1;\n  \n  _init(param_1);\n  lVar1 = 0;\n  do {\n    (*(code *)(&__frame_dummy_init_array_entry)[lVar1])((ulong)param_1 & 0xffffffff,param_2,param_3)\n    ;\n    lVar1 = lVar1 + 1;\n  } while (lVar1 != 1);\n  return;\n}\n\n", 
    "00116100": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint ferror_unlocked(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ferror_unlocked@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "001037cf": "\nvoid quotearg_n_options_cold(void)\n\n{\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n", 
    "00103610": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = (*(code *)PTR_strtol_00114ee8)();\n  return lVar1;\n}\n\n", 
    "001037ca": "\nvoid quotearg_buffer_restyled_cold(void)\n\n{\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n", 
    "00103730": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nuintmax_t strtoumax(char *__nptr,char **__endptr,int __base)\n\n{\n  uintmax_t uVar1;\n  \n  uVar1 = (*(code *)PTR_strtoumax_00114f78)();\n  return uVar1;\n}\n\n", 
    "001161a8": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint cfsetispeed(termios *__termios_p,speed_t __speed)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* cfsetispeed@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00103fa0": "\nchar * visible(byte param_1)\n\n{\n  char *pcVar1;\n  undefined *puVar2;\n  \n  pcVar1 = \"<undef>\";\n  if (param_1 != 0) {\n    if (param_1 < 0x20) {\n      puVar2 = buf_7364 + 2;\n      buf_7364._0_2_ = CONCAT11(param_1 + 0x40,0x5e);\n    }\n    else if (param_1 < 0x7f) {\n      buf_7364._0_2_ = buf_7364._0_2_ & 0xff00 | (ushort)param_1;\n      puVar2 = buf_7364 + 1;\n    }\n    else if (param_1 == 0x7f) {\n      puVar2 = buf_7364 + 2;\n      buf_7364._0_2_ = 0x3f5e;\n    }\n    else {\n      buf_7364._0_2_ = 0x2d4d;\n      if (param_1 < 0xa0) {\n        puVar2 = buf_7364 + 4;\n        buf_7364._2_2_ = CONCAT11(param_1 - 0x40,0x5e);\n      }\n      else if (param_1 == 0xff) {\n        buf_7364._2_2_ = 0x3f5e;\n        puVar2 = buf_7364 + 4;\n      }\n      else {\n        puVar2 = buf_7364 + 3;\n        buf_7364._2_2_ = buf_7364._2_2_ & 0xff00 | (ushort)(byte)(param_1 + 0x80);\n      }\n    }\n    *puVar2 = 0;\n    pcVar1 = buf_7364;\n  }\n  return pcVar1;\n}\n\n", 
    "0010a310": "\nbool c_isdigit(int param_1)\n\n{\n  return param_1 - 0x30U < 10;\n}\n\n", 
    "00108a50": "\nvoid quotearg_n_mem(void)\n\n{\n  quotearg_n_options();\n  return;\n}\n\n", 
    "001037d9": "\nvoid version_etc_arn_cold(void)\n\n{\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n", 
    "00106cb0": "\nundefined8 strcaseeq7(long param_1,undefined8 param_2,byte param_3,char param_4)\n\n{\n  char cVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  \n  cVar1 = c_isupper((int)(char)param_3);\n  bVar2 = *(byte *)(param_1 + 7);\n  if (cVar1 != '\\0') {\n    bVar2 = bVar2 & 0xdf;\n  }\n  if (param_3 != bVar2) {\n    return 0;\n  }\n  if (param_3 == 0) {\n    return 1;\n  }\n  uVar3 = strcaseeq8(param_1,param_2,(int)param_4);\n  return uVar3;\n}\n\n", 
    "001161b0": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nuintmax_t strtoumax(char *__nptr,char **__endptr,int __base)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strtoumax@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00105350": "\nint strtoul_tcflag_t_constprop_0(char *param_1,char **param_2,undefined4 *param_3)\n\n{\n  int *piVar1;\n  ulong uVar2;\n  int iVar3;\n  \n  piVar1 = __errno_location();\n  *piVar1 = 0;\n  uVar2 = strtoul(param_1,param_2,0x10);\n  iVar3 = *piVar1;\n  if ((((iVar3 == 0) && (**param_2 == ':')) && (param_1 != *param_2)) &&\n     (uVar2 == (uVar2 & 0xffffffff))) {\n    *param_3 = (int)uVar2;\n  }\n  else {\n    iVar3 = -1;\n  }\n  return iVar3;\n}\n\n", 
    "00106dd0": "\nundefined8\nstrcaseeq5(long param_1,undefined8 param_2,byte param_3,char param_4,char param_5,char param_6)\n\n{\n  char cVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  \n  cVar1 = c_isupper((int)(char)param_3);\n  bVar2 = *(byte *)(param_1 + 5);\n  if (cVar1 != '\\0') {\n    bVar2 = bVar2 & 0xdf;\n  }\n  if (param_3 != bVar2) {\n    return 0;\n  }\n  if (param_3 == 0) {\n    return 1;\n  }\n  uVar3 = strcaseeq6(param_1,param_2,(int)param_4,(int)param_5,(int)param_6);\n  return uVar3;\n}\n\n", 
    "00108980": "\nvoid quotearg_alloc(undefined8 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  quotearg_alloc_mem(param_1,param_2,0,param_3);\n  return;\n}\n\n", 
    "0010c734": "\nvoid _fini(void)\n\n{\n  return;\n}\n\n", 
    "0010a3c0": "\nbool c_isupper(int param_1)\n\n{\n  return param_1 - 0x41U < 0x1a;\n}\n\n", 
    "001036b0": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nspeed_t cfgetospeed(termios *__termios_p)\n\n{\n  speed_t sVar1;\n  \n  sVar1 = (*(code *)PTR_cfgetospeed_00114f38)();\n  return sVar1;\n}\n\n", 
    "0010a2a0": "\nbool c_isalpha(int param_1)\n\n{\n  if (param_1 < 0x5b) {\n    return 0x40 < param_1;\n  }\n  return param_1 - 0x61U < 0x1a;\n}\n\n", 
    "001037d4": "\nvoid set_custom_quoting_cold(void)\n\n{\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n", 
    "00116108": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nvoid * calloc(size_t __nmemb,size_t __size)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* calloc@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00109bf0": "\nbool bkm_scale(ulong *param_1,int param_2)\n\n{\n  ulong uVar1;\n  bool bVar2;\n  \n  uVar1 = SUB168(ZEXT816((ulong)(long)param_2) * ZEXT816(*param_1),0);\n  bVar2 = SUB168(ZEXT816((ulong)(long)param_2) * ZEXT816(*param_1) >> 0x40,0) != 0;\n  if (bVar2) {\n    uVar1 = 0xffffffffffffffff;\n  }\n  *param_1 = uVar1;\n  return bVar2;\n}\n\n", 
    "00116110": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint strcmp(char *__s1,char *__s2)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcmp@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00103720": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint cfsetispeed(termios *__termios_p,speed_t __speed)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_cfsetispeed_00114f70)();\n  return iVar1;\n}\n\n", 
    "001161b8": "\n/* WARNING: Control flow encountered bad instruction data */\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strtoul@@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
    "00103600": "\n/* WARNING: Unknown calling convention -- yet parameter storage is locked */\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = (*(code *)PTR_strcmp_00114ee0)();\n  return iVar1;\n}\n\n"
}